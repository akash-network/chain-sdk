// Code generated by mockery v2.52.2. DO NOT EDIT.

package v1beta5

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1beta5 "pkg.akt.dev/go/node/market/v1beta5"
)

// QueryClient is an autogenerated mock type for the QueryClient type
type QueryClient struct {
	mock.Mock
}

type QueryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryClient) EXPECT() *QueryClient_Expecter {
	return &QueryClient_Expecter{mock: &_m.Mock}
}

// Bid provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Bid(ctx context.Context, in *v1beta5.QueryBidRequest, opts ...grpc.CallOption) (*v1beta5.QueryBidResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Bid")
	}

	var r0 *v1beta5.QueryBidResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta5.QueryBidRequest, ...grpc.CallOption) (*v1beta5.QueryBidResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta5.QueryBidRequest, ...grpc.CallOption) *v1beta5.QueryBidResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta5.QueryBidResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta5.QueryBidRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_Bid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bid'
type QueryClient_Bid_Call struct {
	*mock.Call
}

// Bid is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1beta5.QueryBidRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) Bid(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_Bid_Call {
	return &QueryClient_Bid_Call{Call: _e.mock.On("Bid",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_Bid_Call) Run(run func(ctx context.Context, in *v1beta5.QueryBidRequest, opts ...grpc.CallOption)) *QueryClient_Bid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1beta5.QueryBidRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_Bid_Call) Return(_a0 *v1beta5.QueryBidResponse, _a1 error) *QueryClient_Bid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_Bid_Call) RunAndReturn(run func(context.Context, *v1beta5.QueryBidRequest, ...grpc.CallOption) (*v1beta5.QueryBidResponse, error)) *QueryClient_Bid_Call {
	_c.Call.Return(run)
	return _c
}

// Bids provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Bids(ctx context.Context, in *v1beta5.QueryBidsRequest, opts ...grpc.CallOption) (*v1beta5.QueryBidsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Bids")
	}

	var r0 *v1beta5.QueryBidsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta5.QueryBidsRequest, ...grpc.CallOption) (*v1beta5.QueryBidsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta5.QueryBidsRequest, ...grpc.CallOption) *v1beta5.QueryBidsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta5.QueryBidsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta5.QueryBidsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_Bids_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bids'
type QueryClient_Bids_Call struct {
	*mock.Call
}

// Bids is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1beta5.QueryBidsRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) Bids(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_Bids_Call {
	return &QueryClient_Bids_Call{Call: _e.mock.On("Bids",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_Bids_Call) Run(run func(ctx context.Context, in *v1beta5.QueryBidsRequest, opts ...grpc.CallOption)) *QueryClient_Bids_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1beta5.QueryBidsRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_Bids_Call) Return(_a0 *v1beta5.QueryBidsResponse, _a1 error) *QueryClient_Bids_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_Bids_Call) RunAndReturn(run func(context.Context, *v1beta5.QueryBidsRequest, ...grpc.CallOption) (*v1beta5.QueryBidsResponse, error)) *QueryClient_Bids_Call {
	_c.Call.Return(run)
	return _c
}

// Lease provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Lease(ctx context.Context, in *v1beta5.QueryLeaseRequest, opts ...grpc.CallOption) (*v1beta5.QueryLeaseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Lease")
	}

	var r0 *v1beta5.QueryLeaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta5.QueryLeaseRequest, ...grpc.CallOption) (*v1beta5.QueryLeaseResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta5.QueryLeaseRequest, ...grpc.CallOption) *v1beta5.QueryLeaseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta5.QueryLeaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta5.QueryLeaseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_Lease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lease'
type QueryClient_Lease_Call struct {
	*mock.Call
}

// Lease is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1beta5.QueryLeaseRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) Lease(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_Lease_Call {
	return &QueryClient_Lease_Call{Call: _e.mock.On("Lease",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_Lease_Call) Run(run func(ctx context.Context, in *v1beta5.QueryLeaseRequest, opts ...grpc.CallOption)) *QueryClient_Lease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1beta5.QueryLeaseRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_Lease_Call) Return(_a0 *v1beta5.QueryLeaseResponse, _a1 error) *QueryClient_Lease_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_Lease_Call) RunAndReturn(run func(context.Context, *v1beta5.QueryLeaseRequest, ...grpc.CallOption) (*v1beta5.QueryLeaseResponse, error)) *QueryClient_Lease_Call {
	_c.Call.Return(run)
	return _c
}

// Leases provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Leases(ctx context.Context, in *v1beta5.QueryLeasesRequest, opts ...grpc.CallOption) (*v1beta5.QueryLeasesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Leases")
	}

	var r0 *v1beta5.QueryLeasesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta5.QueryLeasesRequest, ...grpc.CallOption) (*v1beta5.QueryLeasesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta5.QueryLeasesRequest, ...grpc.CallOption) *v1beta5.QueryLeasesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta5.QueryLeasesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta5.QueryLeasesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_Leases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Leases'
type QueryClient_Leases_Call struct {
	*mock.Call
}

// Leases is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1beta5.QueryLeasesRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) Leases(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_Leases_Call {
	return &QueryClient_Leases_Call{Call: _e.mock.On("Leases",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_Leases_Call) Run(run func(ctx context.Context, in *v1beta5.QueryLeasesRequest, opts ...grpc.CallOption)) *QueryClient_Leases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1beta5.QueryLeasesRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_Leases_Call) Return(_a0 *v1beta5.QueryLeasesResponse, _a1 error) *QueryClient_Leases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_Leases_Call) RunAndReturn(run func(context.Context, *v1beta5.QueryLeasesRequest, ...grpc.CallOption) (*v1beta5.QueryLeasesResponse, error)) *QueryClient_Leases_Call {
	_c.Call.Return(run)
	return _c
}

// Order provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Order(ctx context.Context, in *v1beta5.QueryOrderRequest, opts ...grpc.CallOption) (*v1beta5.QueryOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Order")
	}

	var r0 *v1beta5.QueryOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta5.QueryOrderRequest, ...grpc.CallOption) (*v1beta5.QueryOrderResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta5.QueryOrderRequest, ...grpc.CallOption) *v1beta5.QueryOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta5.QueryOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta5.QueryOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_Order_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Order'
type QueryClient_Order_Call struct {
	*mock.Call
}

// Order is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1beta5.QueryOrderRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) Order(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_Order_Call {
	return &QueryClient_Order_Call{Call: _e.mock.On("Order",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_Order_Call) Run(run func(ctx context.Context, in *v1beta5.QueryOrderRequest, opts ...grpc.CallOption)) *QueryClient_Order_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1beta5.QueryOrderRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_Order_Call) Return(_a0 *v1beta5.QueryOrderResponse, _a1 error) *QueryClient_Order_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_Order_Call) RunAndReturn(run func(context.Context, *v1beta5.QueryOrderRequest, ...grpc.CallOption) (*v1beta5.QueryOrderResponse, error)) *QueryClient_Order_Call {
	_c.Call.Return(run)
	return _c
}

// Orders provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Orders(ctx context.Context, in *v1beta5.QueryOrdersRequest, opts ...grpc.CallOption) (*v1beta5.QueryOrdersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Orders")
	}

	var r0 *v1beta5.QueryOrdersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta5.QueryOrdersRequest, ...grpc.CallOption) (*v1beta5.QueryOrdersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta5.QueryOrdersRequest, ...grpc.CallOption) *v1beta5.QueryOrdersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta5.QueryOrdersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta5.QueryOrdersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_Orders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Orders'
type QueryClient_Orders_Call struct {
	*mock.Call
}

// Orders is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1beta5.QueryOrdersRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) Orders(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_Orders_Call {
	return &QueryClient_Orders_Call{Call: _e.mock.On("Orders",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_Orders_Call) Run(run func(ctx context.Context, in *v1beta5.QueryOrdersRequest, opts ...grpc.CallOption)) *QueryClient_Orders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1beta5.QueryOrdersRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_Orders_Call) Return(_a0 *v1beta5.QueryOrdersResponse, _a1 error) *QueryClient_Orders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_Orders_Call) RunAndReturn(run func(context.Context, *v1beta5.QueryOrdersRequest, ...grpc.CallOption) (*v1beta5.QueryOrdersResponse, error)) *QueryClient_Orders_Call {
	_c.Call.Return(run)
	return _c
}

// Params provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Params(ctx context.Context, in *v1beta5.QueryParamsRequest, opts ...grpc.CallOption) (*v1beta5.QueryParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 *v1beta5.QueryParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta5.QueryParamsRequest, ...grpc.CallOption) (*v1beta5.QueryParamsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta5.QueryParamsRequest, ...grpc.CallOption) *v1beta5.QueryParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta5.QueryParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta5.QueryParamsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_Params_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Params'
type QueryClient_Params_Call struct {
	*mock.Call
}

// Params is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1beta5.QueryParamsRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) Params(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_Params_Call {
	return &QueryClient_Params_Call{Call: _e.mock.On("Params",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_Params_Call) Run(run func(ctx context.Context, in *v1beta5.QueryParamsRequest, opts ...grpc.CallOption)) *QueryClient_Params_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1beta5.QueryParamsRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_Params_Call) Return(_a0 *v1beta5.QueryParamsResponse, _a1 error) *QueryClient_Params_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_Params_Call) RunAndReturn(run func(context.Context, *v1beta5.QueryParamsRequest, ...grpc.CallOption) (*v1beta5.QueryParamsResponse, error)) *QueryClient_Params_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryClient creates a new instance of QueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryClient {
	mock := &QueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
