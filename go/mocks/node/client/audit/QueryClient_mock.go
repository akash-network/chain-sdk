// Code generated by mockery v2.52.2. DO NOT EDIT.

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1 "pkg.akt.dev/go/node/audit/v1"
)

// QueryClient is an autogenerated mock type for the QueryClient type
type QueryClient struct {
	mock.Mock
}

type QueryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryClient) EXPECT() *QueryClient_Expecter {
	return &QueryClient_Expecter{mock: &_m.Mock}
}

// AllProvidersAttributes provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) AllProvidersAttributes(ctx context.Context, in *v1.QueryAllProvidersAttributesRequest, opts ...grpc.CallOption) (*v1.QueryProvidersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AllProvidersAttributes")
	}

	var r0 *v1.QueryProvidersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.QueryAllProvidersAttributesRequest, ...grpc.CallOption) (*v1.QueryProvidersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.QueryAllProvidersAttributesRequest, ...grpc.CallOption) *v1.QueryProvidersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.QueryProvidersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.QueryAllProvidersAttributesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_AllProvidersAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllProvidersAttributes'
type QueryClient_AllProvidersAttributes_Call struct {
	*mock.Call
}

// AllProvidersAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.QueryAllProvidersAttributesRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) AllProvidersAttributes(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_AllProvidersAttributes_Call {
	return &QueryClient_AllProvidersAttributes_Call{Call: _e.mock.On("AllProvidersAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_AllProvidersAttributes_Call) Run(run func(ctx context.Context, in *v1.QueryAllProvidersAttributesRequest, opts ...grpc.CallOption)) *QueryClient_AllProvidersAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.QueryAllProvidersAttributesRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_AllProvidersAttributes_Call) Return(_a0 *v1.QueryProvidersResponse, _a1 error) *QueryClient_AllProvidersAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_AllProvidersAttributes_Call) RunAndReturn(run func(context.Context, *v1.QueryAllProvidersAttributesRequest, ...grpc.CallOption) (*v1.QueryProvidersResponse, error)) *QueryClient_AllProvidersAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// AuditorAttributes provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) AuditorAttributes(ctx context.Context, in *v1.QueryAuditorAttributesRequest, opts ...grpc.CallOption) (*v1.QueryProvidersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AuditorAttributes")
	}

	var r0 *v1.QueryProvidersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.QueryAuditorAttributesRequest, ...grpc.CallOption) (*v1.QueryProvidersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.QueryAuditorAttributesRequest, ...grpc.CallOption) *v1.QueryProvidersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.QueryProvidersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.QueryAuditorAttributesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_AuditorAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuditorAttributes'
type QueryClient_AuditorAttributes_Call struct {
	*mock.Call
}

// AuditorAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.QueryAuditorAttributesRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) AuditorAttributes(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_AuditorAttributes_Call {
	return &QueryClient_AuditorAttributes_Call{Call: _e.mock.On("AuditorAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_AuditorAttributes_Call) Run(run func(ctx context.Context, in *v1.QueryAuditorAttributesRequest, opts ...grpc.CallOption)) *QueryClient_AuditorAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.QueryAuditorAttributesRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_AuditorAttributes_Call) Return(_a0 *v1.QueryProvidersResponse, _a1 error) *QueryClient_AuditorAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_AuditorAttributes_Call) RunAndReturn(run func(context.Context, *v1.QueryAuditorAttributesRequest, ...grpc.CallOption) (*v1.QueryProvidersResponse, error)) *QueryClient_AuditorAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// ProviderAttributes provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) ProviderAttributes(ctx context.Context, in *v1.QueryProviderAttributesRequest, opts ...grpc.CallOption) (*v1.QueryProvidersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProviderAttributes")
	}

	var r0 *v1.QueryProvidersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.QueryProviderAttributesRequest, ...grpc.CallOption) (*v1.QueryProvidersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.QueryProviderAttributesRequest, ...grpc.CallOption) *v1.QueryProvidersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.QueryProvidersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.QueryProviderAttributesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_ProviderAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProviderAttributes'
type QueryClient_ProviderAttributes_Call struct {
	*mock.Call
}

// ProviderAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.QueryProviderAttributesRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) ProviderAttributes(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_ProviderAttributes_Call {
	return &QueryClient_ProviderAttributes_Call{Call: _e.mock.On("ProviderAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_ProviderAttributes_Call) Run(run func(ctx context.Context, in *v1.QueryProviderAttributesRequest, opts ...grpc.CallOption)) *QueryClient_ProviderAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.QueryProviderAttributesRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_ProviderAttributes_Call) Return(_a0 *v1.QueryProvidersResponse, _a1 error) *QueryClient_ProviderAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_ProviderAttributes_Call) RunAndReturn(run func(context.Context, *v1.QueryProviderAttributesRequest, ...grpc.CallOption) (*v1.QueryProvidersResponse, error)) *QueryClient_ProviderAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// ProviderAuditorAttributes provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) ProviderAuditorAttributes(ctx context.Context, in *v1.QueryProviderAuditorRequest, opts ...grpc.CallOption) (*v1.QueryProvidersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProviderAuditorAttributes")
	}

	var r0 *v1.QueryProvidersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.QueryProviderAuditorRequest, ...grpc.CallOption) (*v1.QueryProvidersResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.QueryProviderAuditorRequest, ...grpc.CallOption) *v1.QueryProvidersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.QueryProvidersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.QueryProviderAuditorRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_ProviderAuditorAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProviderAuditorAttributes'
type QueryClient_ProviderAuditorAttributes_Call struct {
	*mock.Call
}

// ProviderAuditorAttributes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.QueryProviderAuditorRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) ProviderAuditorAttributes(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_ProviderAuditorAttributes_Call {
	return &QueryClient_ProviderAuditorAttributes_Call{Call: _e.mock.On("ProviderAuditorAttributes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_ProviderAuditorAttributes_Call) Run(run func(ctx context.Context, in *v1.QueryProviderAuditorRequest, opts ...grpc.CallOption)) *QueryClient_ProviderAuditorAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1.QueryProviderAuditorRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_ProviderAuditorAttributes_Call) Return(_a0 *v1.QueryProvidersResponse, _a1 error) *QueryClient_ProviderAuditorAttributes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_ProviderAuditorAttributes_Call) RunAndReturn(run func(context.Context, *v1.QueryProviderAuditorRequest, ...grpc.CallOption) (*v1.QueryProvidersResponse, error)) *QueryClient_ProviderAuditorAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryClient creates a new instance of QueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryClient {
	mock := &QueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
