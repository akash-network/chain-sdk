// Code generated by mockery v2.52.2. DO NOT EDIT.

package v1beta4

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1beta4 "pkg.akt.dev/go/node/deployment/v1beta4"
)

// QueryClient is an autogenerated mock type for the QueryClient type
type QueryClient struct {
	mock.Mock
}

type QueryClient_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryClient) EXPECT() *QueryClient_Expecter {
	return &QueryClient_Expecter{mock: &_m.Mock}
}

// Deployment provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Deployment(ctx context.Context, in *v1beta4.QueryDeploymentRequest, opts ...grpc.CallOption) (*v1beta4.QueryDeploymentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Deployment")
	}

	var r0 *v1beta4.QueryDeploymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.QueryDeploymentRequest, ...grpc.CallOption) (*v1beta4.QueryDeploymentResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.QueryDeploymentRequest, ...grpc.CallOption) *v1beta4.QueryDeploymentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.QueryDeploymentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.QueryDeploymentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_Deployment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deployment'
type QueryClient_Deployment_Call struct {
	*mock.Call
}

// Deployment is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1beta4.QueryDeploymentRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) Deployment(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_Deployment_Call {
	return &QueryClient_Deployment_Call{Call: _e.mock.On("Deployment",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_Deployment_Call) Run(run func(ctx context.Context, in *v1beta4.QueryDeploymentRequest, opts ...grpc.CallOption)) *QueryClient_Deployment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1beta4.QueryDeploymentRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_Deployment_Call) Return(_a0 *v1beta4.QueryDeploymentResponse, _a1 error) *QueryClient_Deployment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_Deployment_Call) RunAndReturn(run func(context.Context, *v1beta4.QueryDeploymentRequest, ...grpc.CallOption) (*v1beta4.QueryDeploymentResponse, error)) *QueryClient_Deployment_Call {
	_c.Call.Return(run)
	return _c
}

// Deployments provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Deployments(ctx context.Context, in *v1beta4.QueryDeploymentsRequest, opts ...grpc.CallOption) (*v1beta4.QueryDeploymentsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Deployments")
	}

	var r0 *v1beta4.QueryDeploymentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.QueryDeploymentsRequest, ...grpc.CallOption) (*v1beta4.QueryDeploymentsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.QueryDeploymentsRequest, ...grpc.CallOption) *v1beta4.QueryDeploymentsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.QueryDeploymentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.QueryDeploymentsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_Deployments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deployments'
type QueryClient_Deployments_Call struct {
	*mock.Call
}

// Deployments is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1beta4.QueryDeploymentsRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) Deployments(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_Deployments_Call {
	return &QueryClient_Deployments_Call{Call: _e.mock.On("Deployments",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_Deployments_Call) Run(run func(ctx context.Context, in *v1beta4.QueryDeploymentsRequest, opts ...grpc.CallOption)) *QueryClient_Deployments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1beta4.QueryDeploymentsRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_Deployments_Call) Return(_a0 *v1beta4.QueryDeploymentsResponse, _a1 error) *QueryClient_Deployments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_Deployments_Call) RunAndReturn(run func(context.Context, *v1beta4.QueryDeploymentsRequest, ...grpc.CallOption) (*v1beta4.QueryDeploymentsResponse, error)) *QueryClient_Deployments_Call {
	_c.Call.Return(run)
	return _c
}

// Group provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Group(ctx context.Context, in *v1beta4.QueryGroupRequest, opts ...grpc.CallOption) (*v1beta4.QueryGroupResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Group")
	}

	var r0 *v1beta4.QueryGroupResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.QueryGroupRequest, ...grpc.CallOption) (*v1beta4.QueryGroupResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.QueryGroupRequest, ...grpc.CallOption) *v1beta4.QueryGroupResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.QueryGroupResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.QueryGroupRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_Group_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Group'
type QueryClient_Group_Call struct {
	*mock.Call
}

// Group is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1beta4.QueryGroupRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) Group(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_Group_Call {
	return &QueryClient_Group_Call{Call: _e.mock.On("Group",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_Group_Call) Run(run func(ctx context.Context, in *v1beta4.QueryGroupRequest, opts ...grpc.CallOption)) *QueryClient_Group_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1beta4.QueryGroupRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_Group_Call) Return(_a0 *v1beta4.QueryGroupResponse, _a1 error) *QueryClient_Group_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_Group_Call) RunAndReturn(run func(context.Context, *v1beta4.QueryGroupRequest, ...grpc.CallOption) (*v1beta4.QueryGroupResponse, error)) *QueryClient_Group_Call {
	_c.Call.Return(run)
	return _c
}

// Params provides a mock function with given fields: ctx, in, opts
func (_m *QueryClient) Params(ctx context.Context, in *v1beta4.QueryParamsRequest, opts ...grpc.CallOption) (*v1beta4.QueryParamsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Params")
	}

	var r0 *v1beta4.QueryParamsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.QueryParamsRequest, ...grpc.CallOption) (*v1beta4.QueryParamsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta4.QueryParamsRequest, ...grpc.CallOption) *v1beta4.QueryParamsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1beta4.QueryParamsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta4.QueryParamsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryClient_Params_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Params'
type QueryClient_Params_Call struct {
	*mock.Call
}

// Params is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1beta4.QueryParamsRequest
//   - opts ...grpc.CallOption
func (_e *QueryClient_Expecter) Params(ctx interface{}, in interface{}, opts ...interface{}) *QueryClient_Params_Call {
	return &QueryClient_Params_Call{Call: _e.mock.On("Params",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *QueryClient_Params_Call) Run(run func(ctx context.Context, in *v1beta4.QueryParamsRequest, opts ...grpc.CallOption)) *QueryClient_Params_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v1beta4.QueryParamsRequest), variadicArgs...)
	})
	return _c
}

func (_c *QueryClient_Params_Call) Return(_a0 *v1beta4.QueryParamsResponse, _a1 error) *QueryClient_Params_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QueryClient_Params_Call) RunAndReturn(run func(context.Context, *v1beta4.QueryParamsRequest, ...grpc.CallOption) (*v1beta4.QueryParamsResponse, error)) *QueryClient_Params_Call {
	_c.Call.Return(run)
	return _c
}

// NewQueryClient creates a new instance of QueryClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueryClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueryClient {
	mock := &QueryClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
