// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/base/deposit/v1/deposit.proto

package v1

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Source is an enum which lists source of funds for deployment deposit.
type Source int32

const (
	// Prefix should start with 0 in enum. So declaring dummy state.
	SourceInvalid Source = 0
	// DepositSourceBalance denotes account balance as source of funds
	SourceBalance Source = 1
	// DepositSourceGrant denotes authz grants as source of funds
	SourceGrant Source = 2
)

var Source_name = map[int32]string{
	0: "invalid",
	1: "balance",
	2: "grant",
}

var Source_value = map[string]int32{
	"invalid": 0,
	"balance": 1,
	"grant":   2,
}

func (x Source) String() string {
	return proto.EnumName(Source_name, int32(x))
}

func (Source) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b7af74e38e15b5f1, []int{0}
}

// Deposit is a data type use by MsgCreateDeployment, MsgDepositDeployment and MsgCreateBid to indicate source of the deposit
type Deposit struct {
	// Deposit specifies the amount of coins to include in the deployment's first deposit.
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount" yaml:"amount"`
	// Sources list of deposit sources, each entry must be unique
	Sources Sources `protobuf:"varint,5,rep,packed,name=sources,proto3,enum=akash.base.deposit.v1.Source,castrepeated=Sources" json:"deposit_sources" yaml:"deposit_sources"`
}

func (m *Deposit) Reset()         { *m = Deposit{} }
func (m *Deposit) String() string { return proto.CompactTextString(m) }
func (*Deposit) ProtoMessage()    {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_b7af74e38e15b5f1, []int{0}
}
func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(m, src)
}
func (m *Deposit) XXX_Size() int {
	return m.Size()
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

func (m *Deposit) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *Deposit) GetSources() Sources {
	if m != nil {
		return m.Sources
	}
	return nil
}

func init() {
	proto.RegisterEnum("akash.base.deposit.v1.Source", Source_name, Source_value)
	proto.RegisterType((*Deposit)(nil), "akash.base.deposit.v1.Deposit")
}

func init() {
	proto.RegisterFile("akash/base/deposit/v1/deposit.proto", fileDescriptor_b7af74e38e15b5f1)
}

var fileDescriptor_b7af74e38e15b5f1 = []byte{
	// 358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0xcc, 0x4e, 0x2c,
	0xce, 0xd0, 0x4f, 0x4a, 0x2c, 0x4e, 0xd5, 0x4f, 0x49, 0x2d, 0xc8, 0x2f, 0xce, 0x2c, 0xd1, 0x2f,
	0x33, 0x84, 0x31, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x44, 0xc1, 0x8a, 0xf4, 0x40, 0x8a,
	0xf4, 0x60, 0x32, 0x65, 0x86, 0x52, 0x22, 0xe9, 0xf9, 0xe9, 0xf9, 0x60, 0x15, 0xfa, 0x20, 0x16,
	0x44, 0xb1, 0x94, 0x5c, 0x72, 0x7e, 0x71, 0x6e, 0x7e, 0x31, 0xc4, 0xc8, 0x32, 0xc3, 0xa4, 0xd4,
	0x92, 0x44, 0x43, 0xfd, 0xe4, 0xfc, 0xcc, 0x3c, 0x88, 0xbc, 0xd2, 0x31, 0x46, 0x2e, 0x76, 0x17,
	0x88, 0x21, 0x42, 0x1e, 0x5c, 0x6c, 0x89, 0xb9, 0xf9, 0xa5, 0x79, 0x25, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0xdc, 0x46, 0x92, 0x7a, 0x10, 0xcd, 0x10, 0xab, 0xa0, 0x9a, 0xf5, 0x9c, 0xf3, 0x33, 0xf3,
	0x9c, 0x44, 0x4f, 0xdc, 0x93, 0x67, 0xf8, 0x74, 0x4f, 0x9e, 0xb7, 0x32, 0x31, 0x37, 0xc7, 0x4a,
	0x09, 0xa2, 0x4d, 0x29, 0x08, 0xaa, 0x5f, 0xa8, 0x90, 0x8b, 0xbd, 0x38, 0xbf, 0xb4, 0x28, 0x39,
	0xb5, 0x58, 0x82, 0x55, 0x81, 0x59, 0x83, 0xcf, 0x48, 0x56, 0x0f, 0xab, 0xa3, 0xf5, 0x82, 0xc1,
	0xaa, 0x9c, 0x2c, 0x5e, 0xdd, 0x93, 0xe7, 0x87, 0x0a, 0xc7, 0x43, 0x75, 0x7e, 0xba, 0x27, 0x2f,
	0x06, 0x31, 0x1d, 0x4d, 0x42, 0x69, 0xd5, 0x7d, 0x79, 0x76, 0x88, 0xc6, 0xe2, 0x20, 0x98, 0x3d,
	0x5a, 0x59, 0x5c, 0x6c, 0x10, 0x31, 0x21, 0x39, 0x2e, 0xf6, 0xcc, 0xbc, 0xb2, 0xc4, 0x9c, 0xcc,
	0x14, 0x01, 0x06, 0x29, 0xc1, 0xae, 0xb9, 0x0a, 0xbc, 0x10, 0x09, 0x4f, 0x88, 0x20, 0x48, 0x3e,
	0x29, 0x31, 0x27, 0x31, 0x2f, 0x39, 0x55, 0x80, 0x11, 0x59, 0xde, 0x09, 0x22, 0x28, 0x24, 0xc5,
	0xc5, 0x9a, 0x5e, 0x94, 0x98, 0x57, 0x22, 0xc0, 0x24, 0xc5, 0xdf, 0x35, 0x57, 0x81, 0x1b, 0x22,
	0xeb, 0x0e, 0x12, 0x92, 0x62, 0xe9, 0x58, 0x2c, 0xc7, 0xe0, 0x64, 0x77, 0xe2, 0x91, 0x1c, 0xe3,
	0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c,
	0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x2a, 0x05, 0xd9, 0xe9, 0x7a, 0x89, 0xd9, 0x25, 0x7a, 0x29,
	0xa9, 0x65, 0xfa, 0xe9, 0xf9, 0xfa, 0x79, 0xf9, 0x29, 0xa9, 0xfa, 0x25, 0x95, 0x05, 0xa9, 0xc5,
	0x48, 0xf1, 0x99, 0xc4, 0x06, 0x0e, 0x7b, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x26, 0x3d,
	0x8d, 0x0a, 0xef, 0x01, 0x00, 0x00,
}

func (m *Deposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sources) > 0 {
		dAtA2 := make([]byte, len(m.Sources)*10)
		var j1 int
		for _, num := range m.Sources {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintDeposit(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDeposit(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeposit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Deposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovDeposit(uint64(l))
	if len(m.Sources) > 0 {
		l = 0
		for _, e := range m.Sources {
			l += sovDeposit(uint64(e))
		}
		n += 1 + sovDeposit(uint64(l)) + l
	}
	return n
}

func sovDeposit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeposit(x uint64) (n int) {
	return sovDeposit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Deposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeposit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v Source
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDeposit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Source(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sources = append(m.Sources, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDeposit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDeposit
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDeposit
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Sources) == 0 {
					m.Sources = make([]Source, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Source
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDeposit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Source(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sources = append(m.Sources, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sources", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeposit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeposit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeposit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeposit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeposit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeposit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeposit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeposit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeposit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeposit = fmt.Errorf("proto: unexpected end of group")
)
