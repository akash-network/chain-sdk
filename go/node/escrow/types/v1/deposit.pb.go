// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/escrow/types/v1/deposit.proto

package v1

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	v1 "pkg.akt.dev/go/node/types/deposit/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Depositor stores state of a deposit.
type Depositor struct {
	// Owner is the bech32 address of the depositor.
	// It is a string representing a valid account address.
	//
	// Example:
	//   "akash1..."
	// If depositor is same as the owner, then any incoming coins are added to the Balance.
	// If depositor isn't same as the owner, then any incoming coins are added to the Funds.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	// Height blockchain height at which deposit was created
	Height int64 `protobuf:"varint,2,opt,name=height,proto3" json:"height" yaml:"height"`
	// Source indicated origination of the funds
	Source v1.Source `protobuf:"varint,3,opt,name=source,proto3,enum=akash.base.deposit.v1.Source" json:"source" yaml:"source"`
	// Balance amount of funds available to spend in this deposit.
	Balance types.DecCoin `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance" yaml:"balance"`
}

func (m *Depositor) Reset()         { *m = Depositor{} }
func (m *Depositor) String() string { return proto.CompactTextString(m) }
func (*Depositor) ProtoMessage()    {}
func (*Depositor) Descriptor() ([]byte, []int) {
	return fileDescriptor_4897831283ec2c7d, []int{0}
}
func (m *Depositor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Depositor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Depositor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Depositor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Depositor.Merge(m, src)
}
func (m *Depositor) XXX_Size() int {
	return m.Size()
}
func (m *Depositor) XXX_DiscardUnknown() {
	xxx_messageInfo_Depositor.DiscardUnknown(m)
}

var xxx_messageInfo_Depositor proto.InternalMessageInfo

func (m *Depositor) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Depositor) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Depositor) GetSource() v1.Source {
	if m != nil {
		return m.Source
	}
	return v1.SourceInvalid
}

func (m *Depositor) GetBalance() types.DecCoin {
	if m != nil {
		return m.Balance
	}
	return types.DecCoin{}
}

func init() {
	proto.RegisterType((*Depositor)(nil), "akash.escrow.types.v1.Depositor")
}

func init() {
	proto.RegisterFile("akash/escrow/types/v1/deposit.proto", fileDescriptor_4897831283ec2c7d)
}

var fileDescriptor_4897831283ec2c7d = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0xbf, 0x4e, 0xc2, 0x40,
	0x1c, 0xee, 0x81, 0x62, 0xa8, 0xca, 0xd0, 0x60, 0x52, 0x51, 0xdb, 0x5a, 0x96, 0x2e, 0xde, 0xa5,
	0xb0, 0x99, 0x38, 0x58, 0x49, 0xdc, 0xcb, 0xa4, 0x8b, 0xb9, 0xb6, 0x97, 0xd2, 0x00, 0xbd, 0xa6,
	0x57, 0x4b, 0x78, 0x0b, 0x1f, 0xc6, 0xc1, 0x47, 0x60, 0x24, 0x4e, 0x4e, 0x8d, 0x81, 0x8d, 0x91,
	0x27, 0x30, 0xdc, 0x1d, 0x31, 0xd1, 0xed, 0xbe, 0x3f, 0xbf, 0x2f, 0xdf, 0xfd, 0xee, 0xd4, 0x2e,
	0x1e, 0x63, 0x36, 0x42, 0x84, 0x85, 0x39, 0x9d, 0xa1, 0x62, 0x9e, 0x11, 0x86, 0x4a, 0x17, 0x45,
	0x24, 0xa3, 0x2c, 0x29, 0x60, 0x96, 0xd3, 0x82, 0x6a, 0x67, 0xdc, 0x04, 0x85, 0x09, 0x72, 0x13,
	0x2c, 0xdd, 0x8e, 0x11, 0x52, 0x36, 0xa5, 0x0c, 0x05, 0x98, 0x11, 0x54, 0xba, 0x01, 0x29, 0xb0,
	0x8b, 0x42, 0x9a, 0xa4, 0x62, 0xac, 0x73, 0x2e, 0xf4, 0x17, 0x8e, 0x90, 0x00, 0x52, 0x6a, 0xc7,
	0x34, 0xa6, 0x82, 0xdf, 0x9d, 0x24, 0x2b, 0xcb, 0xf0, 0x3c, 0xd9, 0xe0, 0x5f, 0x19, 0xfb, 0xa3,
	0xa6, 0x36, 0x07, 0x82, 0xa1, 0xb9, 0xf6, 0xa8, 0x1e, 0xd2, 0x59, 0x4a, 0x72, 0x1d, 0x58, 0xc0,
	0x69, 0x7a, 0xee, 0xa6, 0x32, 0x05, 0xb1, 0xad, 0xcc, 0x93, 0x39, 0x9e, 0x4e, 0x6e, 0x6d, 0x0e,
	0xed, 0xcf, 0xf7, 0x9b, 0xb6, 0xac, 0x70, 0x1f, 0x45, 0x39, 0x61, 0x6c, 0x58, 0xe4, 0x49, 0x1a,
	0xfb, 0xc2, 0xae, 0xf5, 0xd5, 0xc6, 0x88, 0x24, 0xf1, 0xa8, 0xd0, 0x6b, 0x16, 0x70, 0xea, 0xde,
	0xc5, 0xa6, 0x32, 0x25, 0xb3, 0xad, 0xcc, 0x53, 0x11, 0x25, 0xb0, 0xed, 0x4b, 0x41, 0xf3, 0xd5,
	0x06, 0xa3, 0xaf, 0x79, 0x48, 0xf4, 0xba, 0x05, 0x9c, 0x56, 0xef, 0x0a, 0x8a, 0x4d, 0xed, 0x6e,
	0x00, 0xf7, 0xb5, 0x4b, 0x17, 0x0e, 0xb9, 0x49, 0x64, 0x8a, 0x81, 0xdf, 0x4c, 0x81, 0x6d, 0x5f,
	0x0a, 0xda, 0x93, 0x7a, 0x14, 0xe0, 0x09, 0x4e, 0x43, 0xa2, 0x1f, 0x58, 0xc0, 0x39, 0xee, 0x5d,
	0x42, 0xd9, 0x9b, 0xa7, 0xca, 0x3d, 0xc3, 0x01, 0x09, 0x1f, 0x68, 0x92, 0x7a, 0xd7, 0x8b, 0xca,
	0x54, 0x36, 0x95, 0xb9, 0x1f, 0xda, 0x56, 0x66, 0x4b, 0x04, 0x4b, 0xc2, 0xf6, 0xf7, 0x92, 0x77,
	0xb7, 0x58, 0x19, 0x60, 0xb9, 0x32, 0xc0, 0xf7, 0xca, 0x00, 0x6f, 0x6b, 0x43, 0x59, 0xae, 0x0d,
	0xe5, 0x6b, 0x6d, 0x28, 0xcf, 0xdd, 0x6c, 0x1c, 0x43, 0x3c, 0x2e, 0x60, 0x44, 0x4a, 0x14, 0x53,
	0x94, 0xd2, 0x88, 0xfc, 0xfd, 0x14, 0x41, 0x83, 0x3f, 0x40, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x51, 0xff, 0xc0, 0xaf, 0x34, 0x02, 0x00, 0x00,
}

func (m *Depositor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Depositor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Depositor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Source != 0 {
		i = encodeVarintDeposit(dAtA, i, uint64(m.Source))
		i--
		dAtA[i] = 0x18
	}
	if m.Height != 0 {
		i = encodeVarintDeposit(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintDeposit(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeposit(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeposit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Depositor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovDeposit(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovDeposit(uint64(m.Height))
	}
	if m.Source != 0 {
		n += 1 + sovDeposit(uint64(m.Source))
	}
	l = m.Balance.Size()
	n += 1 + l + sovDeposit(uint64(l))
	return n
}

func sovDeposit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeposit(x uint64) (n int) {
	return sovDeposit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Depositor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeposit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Depositor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Depositor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= v1.Source(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeposit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeposit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeposit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeposit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeposit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeposit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeposit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeposit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeposit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeposit = fmt.Errorf("proto: unexpected end of group")
)
