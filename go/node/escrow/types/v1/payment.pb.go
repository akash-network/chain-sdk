// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/escrow/types/v1/payment.proto

package v1

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	v1 "pkg.akt.dev/go/node/escrow/id/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Payment stores state for a payment.
type PaymentState struct {
	// Owner is the account bech32 address of the user who owns the deployment.
	// It is a string representing a valid bech32 account address.
	//
	// Example:
	//   "akash1..."
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	// State represents the state of the Payment.
	State State `protobuf:"varint,2,opt,name=state,proto3,enum=akash.escrow.types.v1.State" json:"state" yaml:"state"`
	// Rate holds the rate of the Payment.
	Rate types.DecCoin `protobuf:"bytes,3,opt,name=rate,proto3" json:"rate" yaml:"rate"`
	// Balance is the current available coins.
	Balance types.DecCoin `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance" yaml:"balance"`
	// Unsettled is the amount needed to settle payment if account is overdrawn
	Unsettled types.DecCoin `protobuf:"bytes,5,opt,name=unsettled,proto3" json:"unsettled" yaml:"unsettled"`
	// Withdrawn corresponds to the amount of coins withdrawn by the Payment.
	Withdrawn types.Coin `protobuf:"bytes,6,opt,name=withdrawn,proto3" json:"withdrawn" yaml:"withdrawn"`
}

func (m *PaymentState) Reset()         { *m = PaymentState{} }
func (m *PaymentState) String() string { return proto.CompactTextString(m) }
func (*PaymentState) ProtoMessage()    {}
func (*PaymentState) Descriptor() ([]byte, []int) {
	return fileDescriptor_7da60e54e7a9f59f, []int{0}
}
func (m *PaymentState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentState.Merge(m, src)
}
func (m *PaymentState) XXX_Size() int {
	return m.Size()
}
func (m *PaymentState) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentState.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentState proto.InternalMessageInfo

func (m *PaymentState) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *PaymentState) GetState() State {
	if m != nil {
		return m.State
	}
	return StateInvalid
}

func (m *PaymentState) GetRate() types.DecCoin {
	if m != nil {
		return m.Rate
	}
	return types.DecCoin{}
}

func (m *PaymentState) GetBalance() types.DecCoin {
	if m != nil {
		return m.Balance
	}
	return types.DecCoin{}
}

func (m *PaymentState) GetUnsettled() types.DecCoin {
	if m != nil {
		return m.Unsettled
	}
	return types.DecCoin{}
}

func (m *PaymentState) GetWithdrawn() types.Coin {
	if m != nil {
		return m.Withdrawn
	}
	return types.Coin{}
}

// Payment
type Payment struct {
	ID    v1.Payment   `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	State PaymentState `protobuf:"bytes,2,opt,name=state,proto3" json:"state" yaml:"state"`
}

func (m *Payment) Reset()         { *m = Payment{} }
func (m *Payment) String() string { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()    {}
func (*Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_7da60e54e7a9f59f, []int{1}
}
func (m *Payment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payment.Merge(m, src)
}
func (m *Payment) XXX_Size() int {
	return m.Size()
}
func (m *Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_Payment proto.InternalMessageInfo

func (m *Payment) GetID() v1.Payment {
	if m != nil {
		return m.ID
	}
	return v1.Payment{}
}

func (m *Payment) GetState() PaymentState {
	if m != nil {
		return m.State
	}
	return PaymentState{}
}

func init() {
	proto.RegisterType((*PaymentState)(nil), "akash.escrow.types.v1.PaymentState")
	proto.RegisterType((*Payment)(nil), "akash.escrow.types.v1.Payment")
}

func init() {
	proto.RegisterFile("akash/escrow/types/v1/payment.proto", fileDescriptor_7da60e54e7a9f59f)
}

var fileDescriptor_7da60e54e7a9f59f = []byte{
	// 512 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x41, 0x6b, 0xdb, 0x30,
	0x18, 0x8d, 0xbd, 0xa6, 0x25, 0x4a, 0x29, 0xc3, 0x74, 0xe0, 0x34, 0x9d, 0x9d, 0x3a, 0x0c, 0x72,
	0x99, 0x84, 0xb3, 0xdb, 0x60, 0x87, 0x79, 0x85, 0xb1, 0x41, 0x61, 0xb8, 0x97, 0x6d, 0x87, 0x0d,
	0xc5, 0x12, 0xae, 0x48, 0x62, 0x05, 0x4b, 0x4b, 0xc8, 0xbf, 0x18, 0xec, 0x87, 0xec, 0xb2, 0x1f,
	0xd1, 0x63, 0xd9, 0x69, 0x27, 0x33, 0x92, 0x5b, 0x8e, 0xf9, 0x05, 0xc3, 0x92, 0x1a, 0x37, 0x23,
	0x63, 0xbd, 0xf9, 0x7b, 0xdf, 0xfb, 0xde, 0xfb, 0x2c, 0x3d, 0x81, 0x2e, 0x1e, 0x62, 0x71, 0x85,
	0xa8, 0x48, 0x72, 0x3e, 0x43, 0x72, 0x3e, 0xa1, 0x02, 0x4d, 0x43, 0x34, 0xc1, 0xf3, 0x31, 0xcd,
	0x24, 0x9c, 0xe4, 0x5c, 0x72, 0xe7, 0x91, 0x22, 0x41, 0x4d, 0x82, 0x8a, 0x04, 0xa7, 0xe1, 0x89,
	0x97, 0x70, 0x31, 0xe6, 0x02, 0x0d, 0xb0, 0xa0, 0x68, 0x1a, 0x0e, 0xa8, 0xc4, 0x21, 0x4a, 0x38,
	0xcb, 0xf4, 0xd8, 0x49, 0x4b, 0xf7, 0x3f, 0xab, 0x0a, 0xe9, 0xc2, 0xb4, 0x8e, 0x53, 0x9e, 0x72,
	0x8d, 0x97, 0x5f, 0x06, 0x6d, 0x6f, 0x2d, 0xc3, 0x48, 0xb9, 0x09, 0x23, 0xa6, 0x79, 0xb6, 0x7b,
	0x53, 0x21, 0xb1, 0xa4, 0x9a, 0x12, 0x7c, 0xdb, 0x03, 0x87, 0xef, 0xf4, 0xe6, 0x97, 0x25, 0xec,
	0xbc, 0x06, 0x75, 0x3e, 0xcb, 0x68, 0xee, 0x5a, 0x1d, 0xab, 0xd7, 0x88, 0xc2, 0x55, 0xe1, 0x6b,
	0x60, 0x5d, 0xf8, 0x87, 0x73, 0x3c, 0x1e, 0x3d, 0x0f, 0x54, 0x19, 0xfc, 0xfc, 0xf1, 0xf4, 0xd8,
	0x2c, 0xf8, 0x92, 0x90, 0x9c, 0x0a, 0x71, 0x29, 0x73, 0x96, 0xa5, 0xb1, 0xa6, 0x3b, 0x17, 0xa0,
	0xae, 0x8c, 0x5c, 0xbb, 0x63, 0xf5, 0x8e, 0xfa, 0xa7, 0x70, 0xe7, 0x89, 0x40, 0xe5, 0x1a, 0xb5,
	0x4a, 0x1b, 0x45, 0xaf, 0x6c, 0x54, 0x19, 0xc4, 0x1a, 0x76, 0x2e, 0xc0, 0x5e, 0x5e, 0xaa, 0x3d,
	0xe8, 0x58, 0xbd, 0x66, 0xff, 0x14, 0x1a, 0xeb, 0xf2, 0x20, 0xa1, 0x39, 0x48, 0x78, 0x4e, 0x93,
	0x57, 0x9c, 0x65, 0x51, 0xfb, 0xba, 0xf0, 0x6b, 0xab, 0xc2, 0x57, 0x13, 0xeb, 0xc2, 0x6f, 0x6a,
	0xc1, 0x5c, 0xe9, 0x29, 0xd0, 0xf9, 0x00, 0x0e, 0x06, 0x78, 0x84, 0xb3, 0x84, 0xba, 0x7b, 0xf7,
	0x50, 0x3c, 0x33, 0x8a, 0xb7, 0x43, 0xeb, 0xc2, 0x3f, 0xd2, 0xa2, 0x06, 0x08, 0xe2, 0xdb, 0x96,
	0x83, 0x41, 0xe3, 0x4b, 0x26, 0xa8, 0x94, 0x23, 0x4a, 0xdc, 0xfa, 0x3d, 0xc4, 0x9f, 0x18, 0xf1,
	0x6a, 0x6c, 0x5d, 0xf8, 0x0f, 0xb5, 0xfc, 0x06, 0x0a, 0xe2, 0xaa, 0xed, 0x7c, 0x02, 0x8d, 0x19,
	0x93, 0x57, 0x24, 0xc7, 0xb3, 0xcc, 0xdd, 0x57, 0x16, 0xad, 0x9d, 0x16, 0xdb, 0xfa, 0x9b, 0x99,
	0x4a, 0x7f, 0x03, 0x05, 0x71, 0xd5, 0x0e, 0xbe, 0x5b, 0xe0, 0xc0, 0xa4, 0xc2, 0x79, 0x0b, 0x6c,
	0x46, 0x54, 0x1a, 0x9a, 0xfd, 0xf6, 0xf6, 0x25, 0x32, 0x52, 0xde, 0xa0, 0x21, 0x46, 0x8f, 0x4b,
	0x9b, 0x45, 0xe1, 0xdb, 0x6f, 0xce, 0x57, 0x85, 0x6f, 0xb3, 0xf2, 0x2f, 0x1a, 0xda, 0x85, 0x91,
	0x20, 0xb6, 0x19, 0x71, 0xde, 0xdf, 0xcd, 0x44, 0xb3, 0xdf, 0xfd, 0x47, 0x26, 0xee, 0x06, 0x52,
	0xcb, 0xfe, 0x2f, 0x1e, 0xd1, 0x8b, 0xeb, 0x85, 0x67, 0xdd, 0x2c, 0x3c, 0xeb, 0xf7, 0xc2, 0xb3,
	0xbe, 0x2e, 0xbd, 0xda, 0xcd, 0xd2, 0xab, 0xfd, 0x5a, 0x7a, 0xb5, 0x8f, 0xdd, 0xc9, 0x30, 0x85,
	0x78, 0x28, 0x21, 0xa1, 0x53, 0x94, 0x72, 0x94, 0x71, 0x42, 0xff, 0x7e, 0x12, 0x83, 0x7d, 0xf5,
	0x1a, 0x9e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xcb, 0xa3, 0xbb, 0xdc, 0x03, 0x00, 0x00,
}

func (m *PaymentState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Withdrawn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPayment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Unsettled.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPayment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPayment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Rate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPayment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.State != 0 {
		i = encodeVarintPayment(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintPayment(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Payment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Payment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPayment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPayment(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintPayment(dAtA []byte, offset int, v uint64) int {
	offset -= sovPayment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PaymentState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovPayment(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovPayment(uint64(m.State))
	}
	l = m.Rate.Size()
	n += 1 + l + sovPayment(uint64(l))
	l = m.Balance.Size()
	n += 1 + l + sovPayment(uint64(l))
	l = m.Unsettled.Size()
	n += 1 + l + sovPayment(uint64(l))
	l = m.Withdrawn.Size()
	n += 1 + l + sovPayment(uint64(l))
	return n
}

func (m *Payment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovPayment(uint64(l))
	l = m.State.Size()
	n += 1 + l + sovPayment(uint64(l))
	return n
}

func sovPayment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPayment(x uint64) (n int) {
	return sovPayment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PaymentState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsettled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Unsettled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Withdrawn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayment
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPayment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPayment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPayment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPayment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPayment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPayment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPayment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPayment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPayment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPayment = fmt.Errorf("proto: unexpected end of group")
)
