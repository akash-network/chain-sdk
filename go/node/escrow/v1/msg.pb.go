// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/escrow/v1/msg.proto

package v1

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	v1 "pkg.akt.dev/go/node/escrow/id/v1"
	v11 "pkg.akt.dev/go/node/types/deposit/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgAccountDeposit represents a message to deposit funds into an existing escrow account
// on the blockchain. This is part of the interaction mechanism for managing
// deployment-related resources.
type MsgAccountDeposit struct {
	// Signer is the account bech32 address of the user who wants to deposit into
	// an escrow account. Does not necessarily needs to be an owner of the deployment.
	// It is a string representing a valid bech32 account address.
	//
	// Example:
	//   "akash1..."
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer" yaml:"signer"`
	// ID is the unique identifier of the account.
	ID v1.Account `protobuf:"bytes,2,opt,name=id,proto3" json:"id" yaml:"id"`
	// Deposit contains information about the deposit amount and the source of the deposit to the escrow account.
	Deposit v11.Deposit `protobuf:"bytes,3,opt,name=deposit,proto3" json:"deposit" yaml:"deposit"`
}

func (m *MsgAccountDeposit) Reset()         { *m = MsgAccountDeposit{} }
func (m *MsgAccountDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgAccountDeposit) ProtoMessage()    {}
func (*MsgAccountDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe5b05db1aa5e6, []int{0}
}
func (m *MsgAccountDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAccountDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAccountDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAccountDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAccountDeposit.Merge(m, src)
}
func (m *MsgAccountDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgAccountDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAccountDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAccountDeposit proto.InternalMessageInfo

func (m *MsgAccountDeposit) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func (m *MsgAccountDeposit) GetID() v1.Account {
	if m != nil {
		return m.ID
	}
	return v1.Account{}
}

func (m *MsgAccountDeposit) GetDeposit() v11.Deposit {
	if m != nil {
		return m.Deposit
	}
	return v11.Deposit{}
}

// MsgAccountDepositResponse defines response type for the MsgDeposit.
type MsgAccountDepositResponse struct {
}

func (m *MsgAccountDepositResponse) Reset()         { *m = MsgAccountDepositResponse{} }
func (m *MsgAccountDepositResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAccountDepositResponse) ProtoMessage()    {}
func (*MsgAccountDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0afe5b05db1aa5e6, []int{1}
}
func (m *MsgAccountDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAccountDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAccountDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAccountDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAccountDepositResponse.Merge(m, src)
}
func (m *MsgAccountDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAccountDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAccountDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAccountDepositResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAccountDeposit)(nil), "akash.escrow.v1.MsgAccountDeposit")
	proto.RegisterType((*MsgAccountDepositResponse)(nil), "akash.escrow.v1.MsgAccountDepositResponse")
}

func init() { proto.RegisterFile("akash/escrow/v1/msg.proto", fileDescriptor_0afe5b05db1aa5e6) }

var fileDescriptor_0afe5b05db1aa5e6 = []byte{
	// 389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xbf, 0x6a, 0xe3, 0x40,
	0x10, 0xc6, 0x25, 0x1d, 0xf8, 0xb0, 0x8e, 0x3b, 0x73, 0xc2, 0x70, 0xfe, 0x83, 0xb5, 0x3e, 0x5d,
	0x63, 0x0e, 0x6e, 0x85, 0xce, 0x45, 0xc0, 0x9d, 0x85, 0x9b, 0x24, 0xa4, 0x51, 0xba, 0xa4, 0x08,
	0xb2, 0x76, 0xd9, 0x2c, 0x8e, 0xb5, 0x42, 0xab, 0x28, 0xa4, 0xcd, 0x13, 0xa4, 0x4e, 0x95, 0x47,
	0x48, 0x91, 0x87, 0x70, 0x69, 0x52, 0xa5, 0x5a, 0x82, 0x5c, 0x24, 0xb8, 0xf4, 0x13, 0x04, 0x69,
	0xd7, 0x04, 0x93, 0x6e, 0x67, 0x7e, 0x33, 0xdf, 0xcc, 0x7c, 0xac, 0xd9, 0x0e, 0x67, 0x21, 0x3f,
	0x77, 0x31, 0x8f, 0x52, 0x76, 0xe5, 0xe6, 0x9e, 0x3b, 0xe7, 0x04, 0x26, 0x29, 0xcb, 0x98, 0xd5,
	0xa8, 0x10, 0x94, 0x08, 0xe6, 0x5e, 0xa7, 0x49, 0x18, 0x61, 0x15, 0x73, 0xcb, 0x97, 0x2c, 0xeb,
	0xb4, 0x23, 0xc6, 0xe7, 0x8c, 0x9f, 0x49, 0x20, 0x03, 0x85, 0x7e, 0xc9, 0xa8, 0xd4, 0xdc, 0x91,
	0xee, 0x74, 0x77, 0xa6, 0x52, 0x54, 0x52, 0x8a, 0x14, 0xfc, 0x23, 0xe1, 0x34, 0xe4, 0xd8, 0x45,
	0x38, 0x61, 0x9c, 0x66, 0x25, 0x57, 0x4f, 0x59, 0xe4, 0xdc, 0x19, 0xe6, 0xcf, 0x23, 0x4e, 0xc6,
	0x51, 0xc4, 0x2e, 0xe3, 0x6c, 0x22, 0x99, 0x75, 0x68, 0xd6, 0x38, 0x25, 0x31, 0x4e, 0x5b, 0x7a,
	0x5f, 0x1f, 0xd4, 0xfd, 0xe1, 0x5a, 0x00, 0x95, 0xd9, 0x08, 0xf0, 0xfd, 0x3a, 0x9c, 0x5f, 0x8c,
	0x1c, 0x19, 0x3b, 0x4f, 0x8f, 0xff, 0x9a, 0x6a, 0xdb, 0x31, 0x42, 0x29, 0xe6, 0xfc, 0x38, 0x4b,
	0x69, 0x4c, 0x02, 0xd5, 0x60, 0x1d, 0x98, 0x06, 0x45, 0x2d, 0xa3, 0xaf, 0x0f, 0xbe, 0xfd, 0xef,
	0xc2, 0x1d, 0x33, 0x28, 0x82, 0xb9, 0x07, 0xd5, 0x70, 0xbf, 0xb7, 0x10, 0x40, 0x2b, 0x04, 0x30,
	0xf6, 0x27, 0x6b, 0x01, 0x0c, 0x8a, 0x36, 0x02, 0xd4, 0xe5, 0x2c, 0x8a, 0x9c, 0xc0, 0xa0, 0xc8,
	0x3a, 0x35, 0xbf, 0xaa, 0xfd, 0x5b, 0x5f, 0x2a, 0x41, 0x5b, 0x09, 0x96, 0x57, 0xc2, 0xed, 0x69,
	0xb9, 0x07, 0xd5, 0x25, 0xfe, 0xef, 0x52, 0x73, 0x2d, 0xc0, 0xb6, 0x6d, 0x23, 0xc0, 0x0f, 0x29,
	0xa9, 0x12, 0x4e, 0xb0, 0x45, 0xa3, 0xc6, 0xdb, 0x3d, 0xd0, 0x6e, 0x5e, 0x1f, 0xfe, 0xaa, 0xcd,
	0x9d, 0xae, 0xd9, 0xfe, 0xe4, 0x4d, 0x80, 0x79, 0xc2, 0x62, 0x8e, 0xfd, 0xbd, 0x45, 0x61, 0xeb,
	0xcb, 0xc2, 0xd6, 0x5f, 0x0a, 0x5b, 0xbf, 0x5d, 0xd9, 0xda, 0x72, 0x65, 0x6b, 0xcf, 0x2b, 0x5b,
	0x3b, 0xe9, 0x25, 0x33, 0x02, 0xc3, 0x59, 0x06, 0x11, 0xce, 0x5d, 0xc2, 0xdc, 0x98, 0x21, 0xfc,
	0xf1, 0x33, 0xa6, 0xb5, 0xca, 0xf9, 0xe1, 0x7b, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x14, 0x06,
	0x2a, 0x33, 0x02, 0x00, 0x00,
}

func (m *MsgAccountDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAccountDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAccountDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintMsg(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAccountDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAccountDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAccountDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAccountDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovMsg(uint64(l))
	}
	l = m.ID.Size()
	n += 1 + l + sovMsg(uint64(l))
	l = m.Deposit.Size()
	n += 1 + l + sovMsg(uint64(l))
	return n
}

func (m *MsgAccountDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsg(x uint64) (n int) {
	return sovMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAccountDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAccountDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAccountDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAccountDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAccountDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAccountDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsg = fmt.Errorf("proto: unexpected end of group")
)
