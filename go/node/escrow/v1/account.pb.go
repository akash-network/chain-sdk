// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/escrow/v1/account.proto

package v1

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Funds struct {
	// Balance holds the unspent coins received from all deposits
	Balance   types.DecCoin               `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance" yaml:"balance"`
	Overdraft cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=overdraft,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"overdraft"`
}

func (m *Funds) Reset()         { *m = Funds{} }
func (m *Funds) String() string { return proto.CompactTextString(m) }
func (*Funds) ProtoMessage()    {}
func (*Funds) Descriptor() ([]byte, []int) {
	return fileDescriptor_6835c04008686422, []int{0}
}
func (m *Funds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Funds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Funds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Funds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Funds.Merge(m, src)
}
func (m *Funds) XXX_Size() int {
	return m.Size()
}
func (m *Funds) XXX_DiscardUnknown() {
	xxx_messageInfo_Funds.DiscardUnknown(m)
}

var xxx_messageInfo_Funds proto.InternalMessageInfo

func (m *Funds) GetBalance() types.DecCoin {
	if m != nil {
		return m.Balance
	}
	return types.DecCoin{}
}

// Account stores state for an escrow account.
type Account struct {
	// Id is the unique identifier for an escrow account.
	ID AccountID `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	// Owner is the bech32 address of the account.
	// It is a string representing a valid account address.
	//
	// Example:
	//   "akash1..."
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner" yaml:"owner"`
	// State represents the current state of an Account.
	State State `protobuf:"varint,3,opt,name=state,proto3,enum=akash.escrow.v1.State" json:"state" yaml:"state"`
	// Transferred total coins spent by this account.
	Transferred github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,4,rep,name=transferred,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"transferred" yaml:"transferred"`
	// SettledAt represents the block height at which this account was last settled.
	SettledAt int64 `protobuf:"varint,5,opt,name=settled_at,json=settledAt,proto3" json:"settledAt" yaml:"settledAt"`
	// Balance holds the unspent coins received from all deposits
	Funds    []Funds   `protobuf:"bytes,6,rep,name=funds,proto3" json:"funds" yaml:"funds"`
	Deposits []Deposit `protobuf:"bytes,9,rep,name=deposits,proto3" json:"depositors" yaml:"depositors"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_6835c04008686422, []int{1}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetID() AccountID {
	if m != nil {
		return m.ID
	}
	return AccountID{}
}

func (m *Account) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Account) GetState() State {
	if m != nil {
		return m.State
	}
	return StateInvalid
}

func (m *Account) GetTransferred() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Transferred
	}
	return nil
}

func (m *Account) GetSettledAt() int64 {
	if m != nil {
		return m.SettledAt
	}
	return 0
}

func (m *Account) GetFunds() []Funds {
	if m != nil {
		return m.Funds
	}
	return nil
}

func (m *Account) GetDeposits() []Deposit {
	if m != nil {
		return m.Deposits
	}
	return nil
}

func init() {
	proto.RegisterType((*Funds)(nil), "akash.escrow.v1.Funds")
	proto.RegisterType((*Account)(nil), "akash.escrow.v1.Account")
}

func init() { proto.RegisterFile("akash/escrow/v1/account.proto", fileDescriptor_6835c04008686422) }

var fileDescriptor_6835c04008686422 = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xc1, 0x6f, 0xd3, 0x3e,
	0x18, 0x6d, 0xba, 0x75, 0xfb, 0xc5, 0xfb, 0x69, 0x40, 0x34, 0xa1, 0xac, 0x63, 0x71, 0xc9, 0x85,
	0x4a, 0x68, 0x8e, 0x3a, 0x0e, 0x48, 0xdc, 0x16, 0x22, 0xd0, 0x04, 0x08, 0x29, 0xbb, 0x00, 0x12,
	0x9a, 0xdc, 0xd8, 0xcb, 0xa2, 0xae, 0x71, 0x15, 0x7b, 0x9d, 0xf6, 0x5f, 0x70, 0xe4, 0x6f, 0xe0,
	0xca, 0xfe, 0x88, 0x1d, 0xa7, 0x9d, 0x10, 0x07, 0x83, 0xba, 0x5b, 0x8f, 0x3d, 0x73, 0x40, 0xb1,
	0x1d, 0x52, 0xad, 0x42, 0x9c, 0xda, 0xef, 0xbd, 0xe7, 0xf7, 0xbd, 0x7c, 0x9f, 0x0d, 0xb6, 0xf1,
	0x00, 0xf3, 0xe3, 0x80, 0xf2, 0xa4, 0x60, 0x67, 0xc1, 0xb8, 0x17, 0xe0, 0x24, 0x61, 0xa7, 0xb9,
	0x40, 0xa3, 0x82, 0x09, 0xe6, 0xdc, 0x51, 0x34, 0xd2, 0x34, 0x1a, 0xf7, 0xda, 0x1b, 0x29, 0x4b,
	0x99, 0xe2, 0x82, 0xf2, 0x9f, 0x96, 0xb5, 0x37, 0x13, 0xc6, 0x87, 0x8c, 0x1f, 0x6a, 0x42, 0x17,
	0x86, 0xf2, 0x74, 0x15, 0xf4, 0x31, 0xa7, 0xc1, 0xb8, 0xd7, 0xa7, 0x02, 0xf7, 0x82, 0x84, 0x65,
	0xb9, 0xe1, 0xe1, 0x5f, 0x02, 0x64, 0xc4, 0x08, 0x16, 0x12, 0x12, 0x3a, 0x62, 0x3c, 0x33, 0x09,
	0xdb, 0x5b, 0xb7, 0x69, 0x2e, 0xb0, 0xa0, 0x9a, 0xf4, 0xbf, 0x5a, 0xa0, 0xf5, 0xe2, 0x34, 0x27,
	0xdc, 0x79, 0x0f, 0x56, 0xfb, 0xf8, 0x04, 0xe7, 0x09, 0x75, 0xad, 0x8e, 0xd5, 0x5d, 0xdb, 0x7d,
	0x80, 0x4c, 0xcc, 0x32, 0x18, 0x32, 0xc1, 0x50, 0x44, 0x93, 0xe7, 0x2c, 0xcb, 0xc3, 0x87, 0x97,
	0x12, 0x36, 0xa6, 0x12, 0x56, 0x87, 0x66, 0x12, 0xae, 0x9f, 0xe3, 0xe1, 0xc9, 0x33, 0xdf, 0x00,
	0x7e, 0x5c, 0x51, 0xce, 0x5b, 0x60, 0xb3, 0x31, 0x2d, 0x48, 0x81, 0x8f, 0x84, 0xdb, 0xec, 0x58,
	0x5d, 0x3b, 0xec, 0x95, 0xc7, 0xbf, 0x4b, 0xb8, 0xa5, 0x7b, 0x70, 0x32, 0x40, 0x19, 0x0b, 0x86,
	0x58, 0x1c, 0xa3, 0xd7, 0x34, 0xc5, 0xc9, 0x79, 0x44, 0x93, 0xeb, 0x8b, 0x1d, 0x60, 0x22, 0x44,
	0x34, 0x89, 0x6b, 0x0f, 0xff, 0xd7, 0x32, 0x58, 0xdd, 0xd3, 0x53, 0x70, 0xf6, 0x41, 0x33, 0x23,
	0x26, 0x72, 0x1b, 0xdd, 0xda, 0x06, 0x32, 0xaa, 0xfd, 0x28, 0xdc, 0x2e, 0x3b, 0x4e, 0x24, 0x6c,
	0xee, 0x47, 0x53, 0x09, 0x9b, 0x19, 0x99, 0x49, 0x68, 0xeb, 0xc4, 0x19, 0xf1, 0xe3, 0x66, 0x46,
	0x9c, 0x97, 0xa0, 0xc5, 0xce, 0x72, 0x5a, 0x54, 0x19, 0xa7, 0x12, 0x6a, 0x60, 0x26, 0xe1, 0xff,
	0x5a, 0xaa, 0x4a, 0xff, 0xfa, 0x62, 0x67, 0xc3, 0x24, 0xdb, 0x23, 0xa4, 0xa0, 0x9c, 0x1f, 0x88,
	0x22, 0xcb, 0xd3, 0x58, 0xcb, 0x4b, 0x23, 0x35, 0x64, 0x77, 0xa9, 0x63, 0x75, 0xd7, 0x77, 0xef,
	0x2f, 0xc4, 0x3a, 0x28, 0xd9, 0x70, 0xb3, 0x6c, 0xa0, 0x84, 0x75, 0x03, 0x55, 0xfa, 0xb1, 0x86,
	0x9d, 0xcf, 0x16, 0x58, 0x13, 0x05, 0xce, 0xf9, 0x11, 0x2d, 0x0a, 0x4a, 0xdc, 0xe5, 0xce, 0xd2,
	0x3f, 0x37, 0xf3, 0xce, 0x6c, 0x66, 0xfe, 0xe0, 0x4c, 0x42, 0x47, 0xfb, 0xcf, 0x81, 0xfe, 0x97,
	0x1f, 0xf0, 0x71, 0x9a, 0x89, 0xe3, 0xd3, 0x3e, 0x4a, 0xd8, 0xd0, 0xdc, 0x4a, 0xf3, 0xb3, 0xc3,
	0xc9, 0x20, 0x10, 0xe7, 0x23, 0xca, 0x2b, 0x63, 0x1e, 0xcf, 0x3b, 0x3a, 0x6f, 0x00, 0xe0, 0x54,
	0x88, 0x13, 0x4a, 0x0e, 0xb1, 0x70, 0x5b, 0x1d, 0xab, 0xbb, 0x14, 0xa2, 0x89, 0x84, 0xf6, 0x81,
	0x46, 0xf7, 0xc4, 0x54, 0x42, 0x9b, 0x57, 0xc5, 0x4c, 0xc2, 0xbb, 0xe6, 0x0b, 0x2b, 0xc8, 0x8f,
	0x6b, 0xda, 0x79, 0x05, 0x5a, 0x47, 0xe5, 0x3d, 0x74, 0x57, 0xd4, 0x27, 0x2e, 0x8e, 0x4c, 0xdd,
	0x52, 0xbd, 0xc5, 0x72, 0x6c, 0x4a, 0x5c, 0x8f, 0x4d, 0x95, 0x7e, 0xac, 0x61, 0xe7, 0x23, 0xf8,
	0xcf, 0xbc, 0x01, 0xee, 0xda, 0xca, 0xcf, 0x5d, 0xf0, 0x8b, 0xb4, 0x20, 0x7c, 0x64, 0x1c, 0x81,
	0x39, 0xc1, 0x8a, 0xd2, 0xf6, 0x9e, 0xb6, 0xad, 0x31, 0x3f, 0xfe, 0x63, 0x19, 0x3e, 0xbd, 0x9c,
	0x78, 0xd6, 0xd5, 0xc4, 0xb3, 0x7e, 0x4e, 0x3c, 0xeb, 0xd3, 0x8d, 0xd7, 0xb8, 0xba, 0xf1, 0x1a,
	0xdf, 0x6e, 0xbc, 0xc6, 0x87, 0xed, 0xd1, 0x20, 0x45, 0x78, 0x20, 0x10, 0xa1, 0xe3, 0x20, 0x65,
	0x41, 0xce, 0x08, 0xad, 0x5f, 0x5e, 0x7f, 0x45, 0x3d, 0xba, 0x27, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x37, 0x19, 0x76, 0x37, 0x54, 0x04, 0x00, 0x00,
}

func (m *Funds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Funds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Funds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Overdraft.Size()
		i -= size
		if _, err := m.Overdraft.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposits) > 0 {
		for iNdEx := len(m.Deposits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Funds) > 0 {
		for iNdEx := len(m.Funds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Funds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.SettledAt != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.SettledAt))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Transferred) > 0 {
		for iNdEx := len(m.Transferred) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transferred[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.State != 0 {
		i = encodeVarintAccount(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.ID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Funds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Balance.Size()
	n += 1 + l + sovAccount(uint64(l))
	l = m.Overdraft.Size()
	n += 1 + l + sovAccount(uint64(l))
	return n
}

func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovAccount(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovAccount(uint64(m.State))
	}
	if len(m.Transferred) > 0 {
		for _, e := range m.Transferred {
			l = e.Size()
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	if m.SettledAt != 0 {
		n += 1 + sovAccount(uint64(m.SettledAt))
	}
	if len(m.Funds) > 0 {
		for _, e := range m.Funds {
			l = e.Size()
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	if len(m.Deposits) > 0 {
		for _, e := range m.Deposits {
			l = e.Size()
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	return n
}

func sovAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAccount(x uint64) (n int) {
	return sovAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Funds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Funds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Funds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Overdraft", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Overdraft.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transferred", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transferred = append(m.Transferred, types.DecCoin{})
			if err := m.Transferred[len(m.Transferred)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettledAt", wireType)
			}
			m.SettledAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SettledAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Funds = append(m.Funds, Funds{})
			if err := m.Funds[len(m.Funds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposits = append(m.Deposits, Deposit{})
			if err := m.Deposits[len(m.Deposits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAccount = fmt.Errorf("proto: unexpected end of group")
)
