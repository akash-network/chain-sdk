// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/escrow/v1/authz.proto

package v1

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Scope defines the types of deposit operations that can be authorized.
// This enum is used to restrict the authorization to specific deposit contexts,
// allowing fine-grained permission control within the authz system.
type DepositAuthorization_Scope int32

const (
	// Prefix should start with 0 in enum. So declaring dummy state.
	DepositScopeInvalid DepositAuthorization_Scope = 0
	// DepositScopeDeployment allows deposits for deployment-related operations.
	DepositScopeDeployment DepositAuthorization_Scope = 1
	// DepositScopeBid allows deposits for bid-related operations.
	DepositScopeBid DepositAuthorization_Scope = 2
)

var DepositAuthorization_Scope_name = map[int32]string{
	0: "invalid",
	1: "deployment",
	2: "bid",
}

var DepositAuthorization_Scope_value = map[string]int32{
	"invalid":    0,
	"deployment": 1,
	"bid":        2,
}

func (x DepositAuthorization_Scope) String() string {
	return proto.EnumName(DepositAuthorization_Scope_name, int32(x))
}

func (DepositAuthorization_Scope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c3b1a57c8542827d, []int{0, 0}
}

// DepositAuthorization allows the grantee to deposit up to spend_limit coins from
// the granter's account for Akash deployments and bids. This authorization is used
// within the Cosmos SDK authz module to grant scoped permissions for deposit operations.
// The authorization can be restricted to specific scopes (deployment or bid) to limit
// what types of deposits the grantee is authorized to make on behalf of the granter.
type DepositAuthorization struct {
	// SpendLimit is the maximum amount the grantee is authorized to spend from the granter's account.
	// This limit applies cumulatively across all deposit operations within the authorized scopes.
	// Once this limit is reached, the authorization becomes invalid and no further deposits can be made.
	SpendLimit types.Coin `protobuf:"bytes,1,opt,name=spend_limit,json=spendLimit,proto3" json:"spend_limit"`
	// Scopes defines the specific types of deposit operations this authorization permits.
	// This provides fine-grained control over what operations
	// the grantee can perform using the granter's funds.
	Scopes DepositAuthorizationScopes `protobuf:"varint,2,rep,packed,name=scopes,proto3,enum=akash.escrow.v1.DepositAuthorization_Scope,castrepeated=DepositAuthorizationScopes" json:"scopes" yaml:"scopes"`
}

func (m *DepositAuthorization) Reset()         { *m = DepositAuthorization{} }
func (m *DepositAuthorization) String() string { return proto.CompactTextString(m) }
func (*DepositAuthorization) ProtoMessage()    {}
func (*DepositAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3b1a57c8542827d, []int{0}
}
func (m *DepositAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositAuthorization.Merge(m, src)
}
func (m *DepositAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *DepositAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_DepositAuthorization proto.InternalMessageInfo

func (m *DepositAuthorization) GetSpendLimit() types.Coin {
	if m != nil {
		return m.SpendLimit
	}
	return types.Coin{}
}

func (m *DepositAuthorization) GetScopes() DepositAuthorizationScopes {
	if m != nil {
		return m.Scopes
	}
	return nil
}

func init() {
	proto.RegisterEnum("akash.escrow.v1.DepositAuthorization_Scope", DepositAuthorization_Scope_name, DepositAuthorization_Scope_value)
	proto.RegisterType((*DepositAuthorization)(nil), "akash.escrow.v1.DepositAuthorization")
}

func init() { proto.RegisterFile("akash/escrow/v1/authz.proto", fileDescriptor_c3b1a57c8542827d) }

var fileDescriptor_c3b1a57c8542827d = []byte{
	// 452 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0xed, 0x06, 0x8a, 0x74, 0x15, 0x34, 0x38, 0x15, 0xb4, 0x07, 0xd8, 0x96, 0xc5, 0x50,
	0x15, 0xe5, 0xae, 0x2e, 0x03, 0xa2, 0x1b, 0xa1, 0x0b, 0x12, 0x12, 0x52, 0x99, 0x60, 0xa9, 0x2e,
	0xf6, 0x29, 0x39, 0x25, 0xbe, 0x67, 0xe5, 0xae, 0x46, 0xad, 0x04, 0x33, 0xca, 0xc4, 0x17, 0xc8,
	0xc4, 0xc6, 0xc4, 0xd0, 0x2f, 0xc0, 0x56, 0x31, 0x55, 0x4c, 0x4c, 0x01, 0x25, 0x03, 0x52, 0x46,
	0x3e, 0x01, 0xca, 0xdd, 0x01, 0x01, 0x65, 0xb1, 0xde, 0xff, 0x7e, 0xef, 0xff, 0xf4, 0xde, 0xf3,
	0x43, 0xb7, 0x58, 0x8f, 0xa9, 0x2e, 0xe5, 0x2a, 0x1b, 0xc0, 0x2b, 0x5a, 0xa5, 0x94, 0x1d, 0xeb,
	0xee, 0x29, 0x29, 0x07, 0xa0, 0x21, 0x58, 0x37, 0x90, 0x58, 0x48, 0xaa, 0x14, 0x5f, 0x67, 0x85,
	0x90, 0x40, 0xcd, 0xd7, 0xe6, 0xe0, 0x8d, 0x0e, 0x74, 0xc0, 0x84, 0x74, 0x1e, 0xb9, 0xd7, 0xad,
	0x0c, 0x54, 0x01, 0xea, 0xc8, 0x02, 0x2b, 0x1c, 0x0a, 0xad, 0xa2, 0x6d, 0xa6, 0x38, 0xad, 0xd2,
	0x36, 0xd7, 0x2c, 0xa5, 0x19, 0x08, 0x69, 0x79, 0xf2, 0xa9, 0x86, 0x36, 0x0e, 0x78, 0x09, 0x4a,
	0xe8, 0x47, 0xc7, 0xba, 0x0b, 0x03, 0x71, 0xca, 0xb4, 0x00, 0x19, 0x3c, 0x43, 0x6b, 0xaa, 0xe4,
	0x32, 0x3f, 0xea, 0x8b, 0x42, 0xe8, 0x4d, 0x3f, 0xf6, 0xb7, 0xd7, 0xf6, 0xb6, 0x88, 0x2b, 0x3e,
	0x2f, 0x47, 0x5c, 0x39, 0xf2, 0x18, 0x84, 0x6c, 0x35, 0xce, 0xc7, 0x91, 0x37, 0x1b, 0x47, 0x8b,
	0xae, 0x43, 0x64, 0xc4, 0xd3, 0x79, 0x1c, 0xbc, 0x41, 0xab, 0x2a, 0x83, 0x92, 0xab, 0xcd, 0x95,
	0xb8, 0xb6, 0x7d, 0x6d, 0xef, 0x1e, 0xf9, 0x6f, 0x5e, 0xb2, 0xac, 0x0f, 0xf2, 0x7c, 0xee, 0x69,
	0x3d, 0x9c, 0x8d, 0x23, 0x67, 0xff, 0x39, 0x8e, 0xae, 0x9e, 0xb0, 0xa2, 0xbf, 0x9f, 0x58, 0x9d,
	0x7c, 0xf8, 0x16, 0xe1, 0x65, 0x56, 0xe3, 0x54, 0x87, 0xce, 0x96, 0xbc, 0x46, 0x97, 0xcd, 0x4b,
	0x70, 0x17, 0x5d, 0x11, 0xb2, 0x62, 0x7d, 0x91, 0xd7, 0x3d, 0x7c, 0x73, 0x38, 0x8a, 0x1b, 0xce,
	0x6d, 0xf0, 0x13, 0x8b, 0x82, 0x1d, 0x84, 0x72, 0x5e, 0xf6, 0xe1, 0xa4, 0xe0, 0x52, 0xd7, 0x7d,
	0x8c, 0x87, 0xa3, 0xf8, 0xc6, 0x62, 0xe2, 0xc1, 0x1f, 0x1a, 0xdc, 0x46, 0xb5, 0xb6, 0xc8, 0xeb,
	0x2b, 0xb8, 0x31, 0x1c, 0xc5, 0xeb, 0x8b, 0x49, 0x2d, 0x91, 0xe3, 0x4b, 0x6f, 0xdf, 0x87, 0xde,
	0xfe, 0x8b, 0xcf, 0x67, 0xcd, 0xc4, 0x6d, 0xcf, 0xfe, 0xf5, 0xdf, 0xeb, 0xfb, 0xa7, 0xe9, 0x2f,
	0x67, 0xcd, 0x7a, 0xd6, 0x65, 0x42, 0x36, 0x55, 0xde, 0x8b, 0xab, 0x5d, 0x92, 0x92, 0xdd, 0xe1,
	0x8f, 0x8f, 0x3b, 0xd8, 0x5e, 0xce, 0xb2, 0x39, 0x5b, 0x0f, 0xce, 0x27, 0xa1, 0x7f, 0x31, 0x09,
	0xfd, 0xef, 0x93, 0xd0, 0x7f, 0x37, 0x0d, 0xbd, 0x8b, 0x69, 0xe8, 0x7d, 0x9d, 0x86, 0xde, 0xcb,
	0x3b, 0x65, 0xaf, 0x43, 0x58, 0x4f, 0x93, 0x9c, 0x57, 0xb4, 0x03, 0x54, 0x42, 0xce, 0xff, 0x5e,
	0x5f, 0x7b, 0xd5, 0xdc, 0xc0, 0xfd, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x25, 0x71, 0xa1,
	0x97, 0x02, 0x00, 0x00,
}

func (m *DepositAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scopes) > 0 {
		dAtA2 := make([]byte, len(m.Scopes)*10)
		var j1 int
		for _, num := range m.Scopes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintAuthz(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.SpendLimit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuthz(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintAuthz(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthz(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DepositAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SpendLimit.Size()
	n += 1 + l + sovAuthz(uint64(l))
	if len(m.Scopes) > 0 {
		l = 0
		for _, e := range m.Scopes {
			l += sovAuthz(uint64(e))
		}
		n += 1 + sovAuthz(uint64(l)) + l
	}
	return n
}

func sovAuthz(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuthz(x uint64) (n int) {
	return sovAuthz(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DepositAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpendLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v DepositAuthorization_Scope
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuthz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= DepositAuthorization_Scope(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Scopes = append(m.Scopes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAuthz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAuthz
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAuthz
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Scopes) == 0 {
					m.Scopes = make([]DepositAuthorization_Scope, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v DepositAuthorization_Scope
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAuthz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= DepositAuthorization_Scope(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Scopes = append(m.Scopes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Scopes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthz(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthz
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthz
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthz
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthz        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthz          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthz = fmt.Errorf("proto: unexpected end of group")
)
