// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: akash/escrow/id/v1/id.proto

package v1

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Scope is an enum which refers to the account scope
type Scope int32

const (
	// Prefix should start with 0 in enum. So declaring dummy state.
	ScopeInvalid Scope = 0
	// DeploymentActive denotes state for deployment active.
	ScopeDeployment Scope = 1
	// DeploymentClosed denotes state for deployment closed.
	ScopeBid Scope = 2
)

var Scope_name = map[int32]string{
	0: "invalid",
	1: "deployment",
	2: "bid",
}

var Scope_value = map[string]int32{
	"invalid":    0,
	"deployment": 1,
	"bid":        2,
}

func (x Scope) String() string {
	return proto.EnumName(Scope_name, int32(x))
}

func (Scope) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97ba2ace3c3a203a, []int{0}
}

// Account is the account identifier.
type Account struct {
	Scope Scope  `protobuf:"varint,1,opt,name=scope,proto3,enum=akash.escrow.id.v1.Scope" json:"scope" yaml:"scope"`
	XID   string `protobuf:"bytes,2,opt,name=xid,proto3" json:"xid" yaml:"xid"`
}

func (m *Account) Reset()         { *m = Account{} }
func (m *Account) String() string { return proto.CompactTextString(m) }
func (*Account) ProtoMessage()    {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_97ba2ace3c3a203a, []int{0}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetScope() Scope {
	if m != nil {
		return m.Scope
	}
	return ScopeInvalid
}

func (m *Account) GetXID() string {
	if m != nil {
		return m.XID
	}
	return ""
}

// Payment is the payment identifier.
type Payment struct {
	AID Account `protobuf:"bytes,1,opt,name=aid,proto3" json:"aid" yaml:"aid"`
	XID string  `protobuf:"bytes,2,opt,name=xid,proto3" json:"xid" yaml:"xid"`
}

func (m *Payment) Reset()         { *m = Payment{} }
func (m *Payment) String() string { return proto.CompactTextString(m) }
func (*Payment) ProtoMessage()    {}
func (*Payment) Descriptor() ([]byte, []int) {
	return fileDescriptor_97ba2ace3c3a203a, []int{1}
}
func (m *Payment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Payment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payment.Merge(m, src)
}
func (m *Payment) XXX_Size() int {
	return m.Size()
}
func (m *Payment) XXX_DiscardUnknown() {
	xxx_messageInfo_Payment.DiscardUnknown(m)
}

var xxx_messageInfo_Payment proto.InternalMessageInfo

func (m *Payment) GetAID() Account {
	if m != nil {
		return m.AID
	}
	return Account{}
}

func (m *Payment) GetXID() string {
	if m != nil {
		return m.XID
	}
	return ""
}

func init() {
	proto.RegisterEnum("akash.escrow.id.v1.Scope", Scope_name, Scope_value)
	proto.RegisterType((*Account)(nil), "akash.escrow.id.v1.Account")
	proto.RegisterType((*Payment)(nil), "akash.escrow.id.v1.Payment")
}

func init() { proto.RegisterFile("akash/escrow/id/v1/id.proto", fileDescriptor_97ba2ace3c3a203a) }

var fileDescriptor_97ba2ace3c3a203a = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x31, 0x6f, 0xe2, 0x30,
	0x1c, 0xc5, 0x63, 0x02, 0xc7, 0x9d, 0x0f, 0xdd, 0x45, 0xbe, 0x3b, 0x09, 0xc2, 0x5d, 0x12, 0xe5,
	0x16, 0x74, 0x83, 0x23, 0xb8, 0x8d, 0x8d, 0x88, 0x85, 0x2e, 0xad, 0xe8, 0x52, 0x75, 0x33, 0x71,
	0x14, 0x2c, 0x20, 0x8e, 0x20, 0x4d, 0xe1, 0x1b, 0x54, 0x74, 0x61, 0xec, 0x82, 0x54, 0xa9, 0x5f,
	0x86, 0x91, 0xb1, 0x53, 0x54, 0x85, 0x8d, 0x91, 0x4f, 0x50, 0xc5, 0xae, 0xaa, 0x56, 0xed, 0xd4,
	0xcd, 0xfe, 0xbd, 0x67, 0xbf, 0x67, 0xff, 0x61, 0x9d, 0x8c, 0xc8, 0x6c, 0xe8, 0xf8, 0x33, 0x6f,
	0xca, 0x2f, 0x1d, 0x46, 0x9d, 0xa4, 0xe9, 0x30, 0x8a, 0xa3, 0x29, 0x8f, 0x39, 0x42, 0x42, 0xc4,
	0x52, 0xc4, 0x8c, 0xe2, 0xa4, 0xa9, 0xff, 0x0c, 0x78, 0xc0, 0x85, 0xec, 0xe4, 0x2b, 0xe9, 0xb4,
	0xaf, 0x01, 0x2c, 0x77, 0x3c, 0x8f, 0x5f, 0x84, 0x31, 0x3a, 0x82, 0xa5, 0x99, 0xc7, 0x23, 0xbf,
	0x0a, 0x2c, 0xd0, 0xf8, 0xd6, 0xaa, 0xe1, 0xb7, 0xb7, 0xe0, 0xd3, 0xdc, 0xe0, 0xd6, 0xf6, 0xa9,
	0x29, 0xbd, 0x87, 0xd4, 0xac, 0x2c, 0xc8, 0x64, 0xdc, 0xb6, 0xc5, 0xd6, 0xee, 0x4b, 0x8c, 0x30,
	0x54, 0xe7, 0x8c, 0x56, 0x0b, 0x16, 0x68, 0x7c, 0x71, 0x7f, 0x67, 0xa9, 0xa9, 0x9e, 0xf5, 0xba,
	0xfb, 0xd4, 0xcc, 0xe9, 0x21, 0x35, 0xa1, 0x3c, 0x33, 0x67, 0xd4, 0xee, 0xe7, 0xa8, 0x5d, 0xbc,
	0xb9, 0x35, 0x81, 0xbd, 0x02, 0xb0, 0x7c, 0x42, 0x16, 0x13, 0x3f, 0x8c, 0xd1, 0x31, 0x54, 0x09,
	0xa3, 0xa2, 0xcb, 0xd7, 0x56, 0xfd, 0xbd, 0x2e, 0x4f, 0xbd, 0x5d, 0x6b, 0x93, 0x9a, 0x4a, 0x1e,
	0xd1, 0x91, 0x11, 0xe4, 0x65, 0x04, 0x11, 0x11, 0x84, 0xd1, 0x8f, 0x55, 0xfa, 0x37, 0x84, 0x25,
	0xf1, 0x66, 0xf4, 0x07, 0x96, 0x59, 0x98, 0x90, 0x31, 0xa3, 0x9a, 0xa2, 0x6b, 0xcb, 0xb5, 0x55,
	0x11, 0xbc, 0x27, 0x19, 0xfa, 0x0b, 0x21, 0xf5, 0xa3, 0x31, 0x17, 0xe5, 0x35, 0xa0, 0xff, 0x58,
	0xae, 0xad, 0xef, 0xc2, 0xd1, 0x7d, 0xc6, 0xe8, 0x17, 0x54, 0x07, 0x8c, 0x6a, 0x05, 0xbd, 0xb2,
	0x5c, 0x5b, 0x9f, 0xe5, 0x5f, 0x32, 0xaa, 0x17, 0xaf, 0xee, 0x0c, 0xc5, 0x6d, 0x6f, 0x32, 0x03,
	0x6c, 0x33, 0x03, 0x3c, 0x64, 0x06, 0x58, 0xed, 0x0c, 0x65, 0xbb, 0x33, 0x94, 0xfb, 0x9d, 0xa1,
	0x9c, 0x5b, 0xd1, 0x28, 0xc0, 0x64, 0x14, 0x63, 0xea, 0x27, 0x4e, 0xc0, 0x9d, 0x90, 0x53, 0xff,
	0xd5, 0xe4, 0x07, 0x9f, 0xc4, 0x34, 0xff, 0x3f, 0x06, 0x00, 0x00, 0xff, 0xff, 0xde, 0x42, 0xfd,
	0xdf, 0x16, 0x02, 0x00, 0x00,
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Account) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.XID) > 0 {
		i -= len(m.XID)
		copy(dAtA[i:], m.XID)
		i = encodeVarintId(dAtA, i, uint64(len(m.XID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Scope != 0 {
		i = encodeVarintId(dAtA, i, uint64(m.Scope))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Payment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Payment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.XID) > 0 {
		i -= len(m.XID)
		copy(dAtA[i:], m.XID)
		i = encodeVarintId(dAtA, i, uint64(len(m.XID)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.AID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintId(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintId(dAtA []byte, offset int, v uint64) int {
	offset -= sovId(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Scope != 0 {
		n += 1 + sovId(uint64(m.Scope))
	}
	l = len(m.XID)
	if l > 0 {
		n += 1 + l + sovId(uint64(l))
	}
	return n
}

func (m *Payment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AID.Size()
	n += 1 + l + sovId(uint64(l))
	l = len(m.XID)
	if l > 0 {
		n += 1 + l + sovId(uint64(l))
	}
	return n
}

func sovId(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozId(x uint64) (n int) {
	return sovId(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			m.Scope = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scope |= Scope(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthId
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthId
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowId
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthId
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthId
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipId(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowId
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthId
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupId
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthId
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthId        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowId          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupId = fmt.Errorf("proto: unexpected end of group")
)
