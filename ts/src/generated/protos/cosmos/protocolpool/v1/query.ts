// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: cosmos/protocolpool/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../base/v1beta1/coin.ts";
import { ContinuousFund, Params } from "./types.ts";
import Long = require("long");

export const protobufPackage = "cosmos.protocolpool.v1";

/**
 * QueryCommunityPoolRequest is the request type for the Query/CommunityPool RPC
 * method.
 */
export interface QueryCommunityPoolRequest {
}

/**
 * QueryCommunityPoolResponse is the response type for the Query/CommunityPool
 * RPC method.
 */
export interface QueryCommunityPoolResponse {
  /** pool defines community pool's coins. */
  pool: Coin[];
}

/**
 * QueryContinuousFundRequest is the request type for the Query/ContinuousFund
 * RPC method.
 */
export interface QueryContinuousFundRequest {
  /** recipient is the recipient address to query unclaimed budget amount for. */
  recipient: string;
}

/**
 * QueryUnclaimedBudgetResponse is the response type for the Query/ContinuousFund
 * RPC method.
 */
export interface QueryContinuousFundResponse {
  /** ContinuousFunds is the given continuous fund returned in the query. */
  continuousFund: ContinuousFund | undefined;
}

/**
 * QueryContinuousFundRequest is the request type for the Query/ContinuousFunds
 * RPC method.
 */
export interface QueryContinuousFundsRequest {
}

/**
 * QueryUnclaimedBudgetResponse is the response type for the Query/ContinuousFunds
 * RPC method.
 */
export interface QueryContinuousFundsResponse {
  /** ContinuousFunds defines all continuous funds in state. */
  continuousFunds: ContinuousFund[];
}

/** QueryParamsRequest is the response type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  params: Params | undefined;
}

function createBaseQueryCommunityPoolRequest(): QueryCommunityPoolRequest {
  return {};
}

export const QueryCommunityPoolRequest: MessageFns<
  QueryCommunityPoolRequest,
  "cosmos.protocolpool.v1.QueryCommunityPoolRequest"
> = {
  $type: "cosmos.protocolpool.v1.QueryCommunityPoolRequest" as const,

  encode(_: QueryCommunityPoolRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryCommunityPoolRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryCommunityPoolRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryCommunityPoolRequest {
    return {};
  },

  toJSON(_: QueryCommunityPoolRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryCommunityPoolRequest>): QueryCommunityPoolRequest {
    return QueryCommunityPoolRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryCommunityPoolRequest>): QueryCommunityPoolRequest {
    const message = createBaseQueryCommunityPoolRequest();
    return message;
  },
};

function createBaseQueryCommunityPoolResponse(): QueryCommunityPoolResponse {
  return { pool: [] };
}

export const QueryCommunityPoolResponse: MessageFns<
  QueryCommunityPoolResponse,
  "cosmos.protocolpool.v1.QueryCommunityPoolResponse"
> = {
  $type: "cosmos.protocolpool.v1.QueryCommunityPoolResponse" as const,

  encode(message: QueryCommunityPoolResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.pool) {
      Coin.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryCommunityPoolResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryCommunityPoolResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pool.push(Coin.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryCommunityPoolResponse {
    return { pool: globalThis.Array.isArray(object?.pool) ? object.pool.map((e: any) => Coin.fromJSON(e)) : [] };
  },

  toJSON(message: QueryCommunityPoolResponse): unknown {
    const obj: any = {};
    if (message.pool?.length) {
      obj.pool = message.pool.map((e) => Coin.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryCommunityPoolResponse>): QueryCommunityPoolResponse {
    return QueryCommunityPoolResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryCommunityPoolResponse>): QueryCommunityPoolResponse {
    const message = createBaseQueryCommunityPoolResponse();
    message.pool = object.pool?.map((e) => Coin.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryContinuousFundRequest(): QueryContinuousFundRequest {
  return { recipient: "" };
}

export const QueryContinuousFundRequest: MessageFns<
  QueryContinuousFundRequest,
  "cosmos.protocolpool.v1.QueryContinuousFundRequest"
> = {
  $type: "cosmos.protocolpool.v1.QueryContinuousFundRequest" as const,

  encode(message: QueryContinuousFundRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recipient !== "") {
      writer.uint32(10).string(message.recipient);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryContinuousFundRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContinuousFundRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContinuousFundRequest {
    return { recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "" };
  },

  toJSON(message: QueryContinuousFundRequest): unknown {
    const obj: any = {};
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryContinuousFundRequest>): QueryContinuousFundRequest {
    return QueryContinuousFundRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryContinuousFundRequest>): QueryContinuousFundRequest {
    const message = createBaseQueryContinuousFundRequest();
    message.recipient = object.recipient ?? "";
    return message;
  },
};

function createBaseQueryContinuousFundResponse(): QueryContinuousFundResponse {
  return { continuousFund: undefined };
}

export const QueryContinuousFundResponse: MessageFns<
  QueryContinuousFundResponse,
  "cosmos.protocolpool.v1.QueryContinuousFundResponse"
> = {
  $type: "cosmos.protocolpool.v1.QueryContinuousFundResponse" as const,

  encode(message: QueryContinuousFundResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.continuousFund !== undefined) {
      ContinuousFund.encode(message.continuousFund, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryContinuousFundResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContinuousFundResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.continuousFund = ContinuousFund.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContinuousFundResponse {
    return {
      continuousFund: isSet(object.continuousFund) ? ContinuousFund.fromJSON(object.continuousFund) : undefined,
    };
  },

  toJSON(message: QueryContinuousFundResponse): unknown {
    const obj: any = {};
    if (message.continuousFund !== undefined) {
      obj.continuousFund = ContinuousFund.toJSON(message.continuousFund);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryContinuousFundResponse>): QueryContinuousFundResponse {
    return QueryContinuousFundResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryContinuousFundResponse>): QueryContinuousFundResponse {
    const message = createBaseQueryContinuousFundResponse();
    message.continuousFund = (object.continuousFund !== undefined && object.continuousFund !== null)
      ? ContinuousFund.fromPartial(object.continuousFund)
      : undefined;
    return message;
  },
};

function createBaseQueryContinuousFundsRequest(): QueryContinuousFundsRequest {
  return {};
}

export const QueryContinuousFundsRequest: MessageFns<
  QueryContinuousFundsRequest,
  "cosmos.protocolpool.v1.QueryContinuousFundsRequest"
> = {
  $type: "cosmos.protocolpool.v1.QueryContinuousFundsRequest" as const,

  encode(_: QueryContinuousFundsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryContinuousFundsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContinuousFundsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryContinuousFundsRequest {
    return {};
  },

  toJSON(_: QueryContinuousFundsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryContinuousFundsRequest>): QueryContinuousFundsRequest {
    return QueryContinuousFundsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryContinuousFundsRequest>): QueryContinuousFundsRequest {
    const message = createBaseQueryContinuousFundsRequest();
    return message;
  },
};

function createBaseQueryContinuousFundsResponse(): QueryContinuousFundsResponse {
  return { continuousFunds: [] };
}

export const QueryContinuousFundsResponse: MessageFns<
  QueryContinuousFundsResponse,
  "cosmos.protocolpool.v1.QueryContinuousFundsResponse"
> = {
  $type: "cosmos.protocolpool.v1.QueryContinuousFundsResponse" as const,

  encode(message: QueryContinuousFundsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.continuousFunds) {
      ContinuousFund.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryContinuousFundsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContinuousFundsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.continuousFunds.push(ContinuousFund.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContinuousFundsResponse {
    return {
      continuousFunds: globalThis.Array.isArray(object?.continuousFunds)
        ? object.continuousFunds.map((e: any) => ContinuousFund.fromJSON(e))
        : [],
    };
  },

  toJSON(message: QueryContinuousFundsResponse): unknown {
    const obj: any = {};
    if (message.continuousFunds?.length) {
      obj.continuousFunds = message.continuousFunds.map((e) => ContinuousFund.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<QueryContinuousFundsResponse>): QueryContinuousFundsResponse {
    return QueryContinuousFundsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryContinuousFundsResponse>): QueryContinuousFundsResponse {
    const message = createBaseQueryContinuousFundsResponse();
    message.continuousFunds = object.continuousFunds?.map((e) => ContinuousFund.fromPartial(e)) || [];
    return message;
  },
};

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest, "cosmos.protocolpool.v1.QueryParamsRequest"> = {
  $type: "cosmos.protocolpool.v1.QueryParamsRequest" as const,

  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse, "cosmos.protocolpool.v1.QueryParamsResponse"> = {
  $type: "cosmos.protocolpool.v1.QueryParamsResponse" as const,

  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
