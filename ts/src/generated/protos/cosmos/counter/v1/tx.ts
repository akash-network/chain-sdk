// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: cosmos/counter/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "cosmos.counter.v1";

/** MsgIncreaseCounter defines a count Msg service counter. */
export interface MsgIncreaseCounter {
  /** signer is the address that controls the module (defaults to x/gov unless overwritten). */
  signer: string;
  /** count is the number of times to increment the counter. */
  count: Long;
}

/** MsgIncreaseCountResponse is the Msg/Counter response type. */
export interface MsgIncreaseCountResponse {
  /** new_count is the number of times the counter was incremented. */
  newCount: Long;
}

function createBaseMsgIncreaseCounter(): MsgIncreaseCounter {
  return { signer: "", count: Long.ZERO };
}

export const MsgIncreaseCounter: MessageFns<MsgIncreaseCounter, "cosmos.counter.v1.MsgIncreaseCounter"> = {
  $type: "cosmos.counter.v1.MsgIncreaseCounter" as const,

  encode(message: MsgIncreaseCounter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (!message.count.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.count.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgIncreaseCounter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgIncreaseCounter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.count = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgIncreaseCounter {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      count: isSet(object.count) ? Long.fromValue(object.count) : Long.ZERO,
    };
  },

  toJSON(message: MsgIncreaseCounter): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (!message.count.equals(Long.ZERO)) {
      obj.count = (message.count || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<MsgIncreaseCounter>): MsgIncreaseCounter {
    return MsgIncreaseCounter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgIncreaseCounter>): MsgIncreaseCounter {
    const message = createBaseMsgIncreaseCounter();
    message.signer = object.signer ?? "";
    message.count = (object.count !== undefined && object.count !== null) ? Long.fromValue(object.count) : Long.ZERO;
    return message;
  },
};

function createBaseMsgIncreaseCountResponse(): MsgIncreaseCountResponse {
  return { newCount: Long.ZERO };
}

export const MsgIncreaseCountResponse: MessageFns<
  MsgIncreaseCountResponse,
  "cosmos.counter.v1.MsgIncreaseCountResponse"
> = {
  $type: "cosmos.counter.v1.MsgIncreaseCountResponse" as const,

  encode(message: MsgIncreaseCountResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.newCount.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.newCount.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgIncreaseCountResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgIncreaseCountResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.newCount = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgIncreaseCountResponse {
    return { newCount: isSet(object.newCount) ? Long.fromValue(object.newCount) : Long.ZERO };
  },

  toJSON(message: MsgIncreaseCountResponse): unknown {
    const obj: any = {};
    if (!message.newCount.equals(Long.ZERO)) {
      obj.newCount = (message.newCount || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<MsgIncreaseCountResponse>): MsgIncreaseCountResponse {
    return MsgIncreaseCountResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgIncreaseCountResponse>): MsgIncreaseCountResponse {
    const message = createBaseMsgIncreaseCountResponse();
    message.newCount = (object.newCount !== undefined && object.newCount !== null)
      ? Long.fromValue(object.newCount)
      : Long.ZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
