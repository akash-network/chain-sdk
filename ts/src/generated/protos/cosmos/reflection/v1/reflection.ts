// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: cosmos/reflection/v1/reflection.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FileDescriptorProto } from "../../../google/protobuf/descriptor.ts";

export const protobufPackage = "cosmos.reflection.v1";

/** FileDescriptorsRequest is the Query/FileDescriptors request type. */
export interface FileDescriptorsRequest {
}

/** FileDescriptorsResponse is the Query/FileDescriptors response type. */
export interface FileDescriptorsResponse {
  /** files is the file descriptors. */
  files: FileDescriptorProto[];
}

function createBaseFileDescriptorsRequest(): FileDescriptorsRequest {
  return {};
}

export const FileDescriptorsRequest: MessageFns<FileDescriptorsRequest, "cosmos.reflection.v1.FileDescriptorsRequest"> =
  {
    $type: "cosmos.reflection.v1.FileDescriptorsRequest" as const,

    encode(_: FileDescriptorsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): FileDescriptorsRequest {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseFileDescriptorsRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(_: any): FileDescriptorsRequest {
      return {};
    },

    toJSON(_: FileDescriptorsRequest): unknown {
      const obj: any = {};
      return obj;
    },

    create(base?: DeepPartial<FileDescriptorsRequest>): FileDescriptorsRequest {
      return FileDescriptorsRequest.fromPartial(base ?? {});
    },
    fromPartial(_: DeepPartial<FileDescriptorsRequest>): FileDescriptorsRequest {
      const message = createBaseFileDescriptorsRequest();
      return message;
    },
  };

function createBaseFileDescriptorsResponse(): FileDescriptorsResponse {
  return { files: [] };
}

export const FileDescriptorsResponse: MessageFns<
  FileDescriptorsResponse,
  "cosmos.reflection.v1.FileDescriptorsResponse"
> = {
  $type: "cosmos.reflection.v1.FileDescriptorsResponse" as const,

  encode(message: FileDescriptorsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.files) {
      FileDescriptorProto.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileDescriptorsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileDescriptorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.files.push(FileDescriptorProto.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileDescriptorsResponse {
    return {
      files: globalThis.Array.isArray(object?.files)
        ? object.files.map((e: any) => FileDescriptorProto.fromJSON(e))
        : [],
    };
  },

  toJSON(message: FileDescriptorsResponse): unknown {
    const obj: any = {};
    if (message.files?.length) {
      obj.files = message.files.map((e) => FileDescriptorProto.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FileDescriptorsResponse>): FileDescriptorsResponse {
    return FileDescriptorsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileDescriptorsResponse>): FileDescriptorsResponse {
    const message = createBaseFileDescriptorsResponse();
    message.files = object.files?.map((e) => FileDescriptorProto.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
