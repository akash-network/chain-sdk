import { bytesFromBase64, base64FromBytes, isSet } from "../../../../../encoding/typeEncodingHelpers.ts"
import type { DeepPartial, MessageFns } from "../../../../../encoding/typeEncodingHelpers.ts"
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: cosmos/benchmark/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Op } from "./benchmark.ts";

/** MsgLoadTestOps defines a message containing a sequence of load test operations. */
export interface MsgLoadTest {
  caller: Uint8Array;
  ops: Op[];
}

/** MsgLoadTestResponse defines a message containing the results of a load test operation. */
export interface MsgLoadTestResponse {
  totalTime: Long;
  totalErrors: Long;
}

function createBaseMsgLoadTest(): MsgLoadTest {
  return { caller: new Uint8Array(0), ops: [] };
}

export const MsgLoadTest: MessageFns<MsgLoadTest, "cosmos.benchmark.v1.MsgLoadTest"> = {
  $type: "cosmos.benchmark.v1.MsgLoadTest" as const,

  encode(message: MsgLoadTest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.caller.length !== 0) {
      writer.uint32(10).bytes(message.caller);
    }
    for (const v of message.ops) {
      Op.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgLoadTest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLoadTest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.caller = reader.bytes();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ops.push(Op.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLoadTest {
    return {
      caller: isSet(object.caller) ? bytesFromBase64(object.caller) : new Uint8Array(0),
      ops: globalThis.Array.isArray(object?.ops) ? object.ops.map((e: any) => Op.fromJSON(e)) : [],
    };
  },

  toJSON(message: MsgLoadTest): unknown {
    const obj: any = {};
    if (message.caller.length !== 0) {
      obj.caller = base64FromBytes(message.caller);
    }
    if (message.ops?.length) {
      obj.ops = message.ops.map((e) => Op.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgLoadTest>): MsgLoadTest {
    return MsgLoadTest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgLoadTest>): MsgLoadTest {
    const message = createBaseMsgLoadTest();
    message.caller = object.caller ?? new Uint8Array(0);
    message.ops = object.ops?.map((e) => Op.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgLoadTestResponse(): MsgLoadTestResponse {
  return { totalTime: Long.UZERO, totalErrors: Long.UZERO };
}

export const MsgLoadTestResponse: MessageFns<MsgLoadTestResponse, "cosmos.benchmark.v1.MsgLoadTestResponse"> = {
  $type: "cosmos.benchmark.v1.MsgLoadTestResponse" as const,

  encode(message: MsgLoadTestResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.totalTime.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.totalTime.toString());
    }
    if (!message.totalErrors.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.totalErrors.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgLoadTestResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLoadTestResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.totalTime = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalErrors = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLoadTestResponse {
    return {
      totalTime: isSet(object.total_time) ? Long.fromValue(object.total_time) : Long.UZERO,
      totalErrors: isSet(object.total_errors) ? Long.fromValue(object.total_errors) : Long.UZERO,
    };
  },

  toJSON(message: MsgLoadTestResponse): unknown {
    const obj: any = {};
    if (!message.totalTime.equals(Long.UZERO)) {
      obj.total_time = (message.totalTime || Long.UZERO).toString();
    }
    if (!message.totalErrors.equals(Long.UZERO)) {
      obj.total_errors = (message.totalErrors || Long.UZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<MsgLoadTestResponse>): MsgLoadTestResponse {
    return MsgLoadTestResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgLoadTestResponse>): MsgLoadTestResponse {
    const message = createBaseMsgLoadTestResponse();
    message.totalTime = (object.totalTime !== undefined && object.totalTime !== null)
      ? Long.fromValue(object.totalTime)
      : Long.UZERO;
    message.totalErrors = (object.totalErrors !== undefined && object.totalErrors !== null)
      ? Long.fromValue(object.totalErrors)
      : Long.UZERO;
    return message;
  },
};

function _unused_bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function _unused_base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type _unused_DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function _unused_isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface _unused_MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
