// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: cosmos/benchmark/module/v1/module.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "cosmos.benchmark.module.v1";

/** Module is the config object of the benchmark module. */
export interface Module {
  genesisParams: GeneratorParams | undefined;
}

/** GenesisParams defines the genesis parameters for the benchmark module. */
export interface GeneratorParams {
  /** seed is the seed for the random number generator. */
  seed: Long;
  /** bucket_count is the number of store keys to uniformly distribute genesis_count keys across. */
  bucketCount: Long;
  /** key_mean is the mean size (in normal distribution) of keys in each bucket. */
  keyMean: Long;
  /** key_std_dev is the standard deviation of key sizes in each bucket. */
  keyStdDev: Long;
  /** value_mean is the mean size (in normal distribution) of values in each bucket. */
  valueMean: Long;
  /** value_std_dev is the standard deviation of value sizes in each bucket. */
  valueStdDev: Long;
  /** genesis_count is the number of keys to insert in the store, distributed across all buckets. */
  genesisCount: Long;
  /** insert_weight is the weight of insert operations. */
  insertWeight: number;
  /** update_weight is the weight of update operations. */
  updateWeight: number;
  /** get_weight is the weight of get operations. */
  getWeight: number;
  /** delete_weight is the weight of delete operations. */
  deleteWeight: number;
}

function createBaseModule(): Module {
  return { genesisParams: undefined };
}

export const Module: MessageFns<Module, "cosmos.benchmark.module.v1.Module"> = {
  $type: "cosmos.benchmark.module.v1.Module" as const,

  encode(message: Module, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.genesisParams !== undefined) {
      GeneratorParams.encode(message.genesisParams, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Module {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.genesisParams = GeneratorParams.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Module {
    return {
      genesisParams: isSet(object.genesis_params) ? GeneratorParams.fromJSON(object.genesis_params) : undefined,
    };
  },

  toJSON(message: Module): unknown {
    const obj: any = {};
    if (message.genesisParams !== undefined) {
      obj.genesis_params = GeneratorParams.toJSON(message.genesisParams);
    }
    return obj;
  },

  create(base?: DeepPartial<Module>): Module {
    return Module.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Module>): Module {
    const message = createBaseModule();
    message.genesisParams = (object.genesisParams !== undefined && object.genesisParams !== null)
      ? GeneratorParams.fromPartial(object.genesisParams)
      : undefined;
    return message;
  },
};

function createBaseGeneratorParams(): GeneratorParams {
  return {
    seed: Long.UZERO,
    bucketCount: Long.UZERO,
    keyMean: Long.UZERO,
    keyStdDev: Long.UZERO,
    valueMean: Long.UZERO,
    valueStdDev: Long.UZERO,
    genesisCount: Long.UZERO,
    insertWeight: 0,
    updateWeight: 0,
    getWeight: 0,
    deleteWeight: 0,
  };
}

export const GeneratorParams: MessageFns<GeneratorParams, "cosmos.benchmark.module.v1.GeneratorParams"> = {
  $type: "cosmos.benchmark.module.v1.GeneratorParams" as const,

  encode(message: GeneratorParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.seed.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.seed.toString());
    }
    if (!message.bucketCount.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.bucketCount.toString());
    }
    if (!message.keyMean.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.keyMean.toString());
    }
    if (!message.keyStdDev.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.keyStdDev.toString());
    }
    if (!message.valueMean.equals(Long.UZERO)) {
      writer.uint32(48).uint64(message.valueMean.toString());
    }
    if (!message.valueStdDev.equals(Long.UZERO)) {
      writer.uint32(56).uint64(message.valueStdDev.toString());
    }
    if (!message.genesisCount.equals(Long.UZERO)) {
      writer.uint32(64).uint64(message.genesisCount.toString());
    }
    if (message.insertWeight !== 0) {
      writer.uint32(77).float(message.insertWeight);
    }
    if (message.updateWeight !== 0) {
      writer.uint32(85).float(message.updateWeight);
    }
    if (message.getWeight !== 0) {
      writer.uint32(101).float(message.getWeight);
    }
    if (message.deleteWeight !== 0) {
      writer.uint32(93).float(message.deleteWeight);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GeneratorParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGeneratorParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.seed = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.bucketCount = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.keyMean = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.keyStdDev = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.valueMean = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.valueStdDev = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.genesisCount = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 9: {
          if (tag !== 77) {
            break;
          }

          message.insertWeight = reader.float();
          continue;
        }
        case 10: {
          if (tag !== 85) {
            break;
          }

          message.updateWeight = reader.float();
          continue;
        }
        case 12: {
          if (tag !== 101) {
            break;
          }

          message.getWeight = reader.float();
          continue;
        }
        case 11: {
          if (tag !== 93) {
            break;
          }

          message.deleteWeight = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GeneratorParams {
    return {
      seed: isSet(object.seed) ? Long.fromValue(object.seed) : Long.UZERO,
      bucketCount: isSet(object.bucket_count) ? Long.fromValue(object.bucket_count) : Long.UZERO,
      keyMean: isSet(object.key_mean) ? Long.fromValue(object.key_mean) : Long.UZERO,
      keyStdDev: isSet(object.key_std_dev) ? Long.fromValue(object.key_std_dev) : Long.UZERO,
      valueMean: isSet(object.value_mean) ? Long.fromValue(object.value_mean) : Long.UZERO,
      valueStdDev: isSet(object.value_std_dev) ? Long.fromValue(object.value_std_dev) : Long.UZERO,
      genesisCount: isSet(object.genesis_count) ? Long.fromValue(object.genesis_count) : Long.UZERO,
      insertWeight: isSet(object.insert_weight) ? globalThis.Number(object.insert_weight) : 0,
      updateWeight: isSet(object.update_weight) ? globalThis.Number(object.update_weight) : 0,
      getWeight: isSet(object.get_weight) ? globalThis.Number(object.get_weight) : 0,
      deleteWeight: isSet(object.delete_weight) ? globalThis.Number(object.delete_weight) : 0,
    };
  },

  toJSON(message: GeneratorParams): unknown {
    const obj: any = {};
    if (!message.seed.equals(Long.UZERO)) {
      obj.seed = (message.seed || Long.UZERO).toString();
    }
    if (!message.bucketCount.equals(Long.UZERO)) {
      obj.bucket_count = (message.bucketCount || Long.UZERO).toString();
    }
    if (!message.keyMean.equals(Long.UZERO)) {
      obj.key_mean = (message.keyMean || Long.UZERO).toString();
    }
    if (!message.keyStdDev.equals(Long.UZERO)) {
      obj.key_std_dev = (message.keyStdDev || Long.UZERO).toString();
    }
    if (!message.valueMean.equals(Long.UZERO)) {
      obj.value_mean = (message.valueMean || Long.UZERO).toString();
    }
    if (!message.valueStdDev.equals(Long.UZERO)) {
      obj.value_std_dev = (message.valueStdDev || Long.UZERO).toString();
    }
    if (!message.genesisCount.equals(Long.UZERO)) {
      obj.genesis_count = (message.genesisCount || Long.UZERO).toString();
    }
    if (message.insertWeight !== 0) {
      obj.insert_weight = message.insertWeight;
    }
    if (message.updateWeight !== 0) {
      obj.update_weight = message.updateWeight;
    }
    if (message.getWeight !== 0) {
      obj.get_weight = message.getWeight;
    }
    if (message.deleteWeight !== 0) {
      obj.delete_weight = message.deleteWeight;
    }
    return obj;
  },

  create(base?: DeepPartial<GeneratorParams>): GeneratorParams {
    return GeneratorParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GeneratorParams>): GeneratorParams {
    const message = createBaseGeneratorParams();
    message.seed = (object.seed !== undefined && object.seed !== null) ? Long.fromValue(object.seed) : Long.UZERO;
    message.bucketCount = (object.bucketCount !== undefined && object.bucketCount !== null)
      ? Long.fromValue(object.bucketCount)
      : Long.UZERO;
    message.keyMean = (object.keyMean !== undefined && object.keyMean !== null)
      ? Long.fromValue(object.keyMean)
      : Long.UZERO;
    message.keyStdDev = (object.keyStdDev !== undefined && object.keyStdDev !== null)
      ? Long.fromValue(object.keyStdDev)
      : Long.UZERO;
    message.valueMean = (object.valueMean !== undefined && object.valueMean !== null)
      ? Long.fromValue(object.valueMean)
      : Long.UZERO;
    message.valueStdDev = (object.valueStdDev !== undefined && object.valueStdDev !== null)
      ? Long.fromValue(object.valueStdDev)
      : Long.UZERO;
    message.genesisCount = (object.genesisCount !== undefined && object.genesisCount !== null)
      ? Long.fromValue(object.genesisCount)
      : Long.UZERO;
    message.insertWeight = object.insertWeight ?? 0;
    message.updateWeight = object.updateWeight ?? 0;
    message.getWeight = object.getWeight ?? 0;
    message.deleteWeight = object.deleteWeight ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
