// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: cosmos/mint/v1beta1/mint.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "cosmos.mint.v1beta1";

/** Minter represents the minting state. */
export interface Minter {
  /** current annual inflation rate */
  inflation: string;
  /** current annual expected provisions */
  annualProvisions: string;
}

/** Params defines the parameters for the x/mint module. */
export interface Params {
  /** type of coin to mint */
  mintDenom: string;
  /** maximum annual change in inflation rate */
  inflationRateChange: string;
  /** maximum inflation rate */
  inflationMax: string;
  /** minimum inflation rate */
  inflationMin: string;
  /** goal of percent bonded atoms */
  goalBonded: string;
  /** expected blocks per year */
  blocksPerYear: Long;
}

function createBaseMinter(): Minter {
  return { inflation: "", annualProvisions: "" };
}

export const Minter: MessageFns<Minter, "cosmos.mint.v1beta1.Minter"> = {
  $type: "cosmos.mint.v1beta1.Minter" as const,

  encode(message: Minter, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inflation !== "") {
      writer.uint32(10).string(message.inflation);
    }
    if (message.annualProvisions !== "") {
      writer.uint32(18).string(message.annualProvisions);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Minter {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMinter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inflation = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.annualProvisions = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Minter {
    return {
      inflation: isSet(object.inflation) ? globalThis.String(object.inflation) : "",
      annualProvisions: isSet(object.annual_provisions) ? globalThis.String(object.annual_provisions) : "",
    };
  },

  toJSON(message: Minter): unknown {
    const obj: any = {};
    if (message.inflation !== "") {
      obj.inflation = message.inflation;
    }
    if (message.annualProvisions !== "") {
      obj.annual_provisions = message.annualProvisions;
    }
    return obj;
  },

  create(base?: DeepPartial<Minter>): Minter {
    return Minter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Minter>): Minter {
    const message = createBaseMinter();
    message.inflation = object.inflation ?? "";
    message.annualProvisions = object.annualProvisions ?? "";
    return message;
  },
};

function createBaseParams(): Params {
  return {
    mintDenom: "",
    inflationRateChange: "",
    inflationMax: "",
    inflationMin: "",
    goalBonded: "",
    blocksPerYear: Long.UZERO,
  };
}

export const Params: MessageFns<Params, "cosmos.mint.v1beta1.Params"> = {
  $type: "cosmos.mint.v1beta1.Params" as const,

  encode(message: Params, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mintDenom !== "") {
      writer.uint32(10).string(message.mintDenom);
    }
    if (message.inflationRateChange !== "") {
      writer.uint32(18).string(message.inflationRateChange);
    }
    if (message.inflationMax !== "") {
      writer.uint32(26).string(message.inflationMax);
    }
    if (message.inflationMin !== "") {
      writer.uint32(34).string(message.inflationMin);
    }
    if (message.goalBonded !== "") {
      writer.uint32(42).string(message.goalBonded);
    }
    if (!message.blocksPerYear.equals(Long.UZERO)) {
      writer.uint32(48).uint64(message.blocksPerYear.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mintDenom = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inflationRateChange = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inflationMax = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.inflationMin = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.goalBonded = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.blocksPerYear = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      mintDenom: isSet(object.mint_denom) ? globalThis.String(object.mint_denom) : "",
      inflationRateChange: isSet(object.inflation_rate_change) ? globalThis.String(object.inflation_rate_change) : "",
      inflationMax: isSet(object.inflation_max) ? globalThis.String(object.inflation_max) : "",
      inflationMin: isSet(object.inflation_min) ? globalThis.String(object.inflation_min) : "",
      goalBonded: isSet(object.goal_bonded) ? globalThis.String(object.goal_bonded) : "",
      blocksPerYear: isSet(object.blocks_per_year) ? Long.fromValue(object.blocks_per_year) : Long.UZERO,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.mintDenom !== "") {
      obj.mint_denom = message.mintDenom;
    }
    if (message.inflationRateChange !== "") {
      obj.inflation_rate_change = message.inflationRateChange;
    }
    if (message.inflationMax !== "") {
      obj.inflation_max = message.inflationMax;
    }
    if (message.inflationMin !== "") {
      obj.inflation_min = message.inflationMin;
    }
    if (message.goalBonded !== "") {
      obj.goal_bonded = message.goalBonded;
    }
    if (!message.blocksPerYear.equals(Long.UZERO)) {
      obj.blocks_per_year = (message.blocksPerYear || Long.UZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Params>): Params {
    return Params.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Params>): Params {
    const message = createBaseParams();
    message.mintDenom = object.mintDenom ?? "";
    message.inflationRateChange = object.inflationRateChange ?? "";
    message.inflationMax = object.inflationMax ?? "";
    message.inflationMin = object.inflationMin ?? "";
    message.goalBonded = object.goalBonded ?? "";
    message.blocksPerYear = (object.blocksPerYear !== undefined && object.blocksPerYear !== null)
      ? Long.fromValue(object.blocksPerYear)
      : Long.UZERO;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
