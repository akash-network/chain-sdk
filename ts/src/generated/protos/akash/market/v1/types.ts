// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/market/v1/types.proto

/* eslint-disable */

/** LeaseClosedReason indicates reason bid was closed */
export enum LeaseClosedReason {
  /**
   * lease_closed_invalid - LeaseClosedReasonInvalid represents the default zero value for LeaseClosedReason.
   * This value indicates an uninitialized or invalid lease closure reason and should not
   * be used
   */
  lease_closed_invalid = 0,
  /** lease_closed_owner - values between 1..9999 indicate owner‑initiated close */
  lease_closed_owner = 1,
  /**
   * lease_closed_reason_unstable - values between 10000..19999 are indicating provider initiated close
   * lease_closed_reason_unstable lease workloads have been unstable
   */
  lease_closed_reason_unstable = 10000,
  /** lease_closed_reason_decommission - lease_closed_reason_decommission provider is being decommissioned */
  lease_closed_reason_decommission = 10001,
  /** lease_closed_reason_unspecified - lease_closed_reason_unspecified provider did not specify reason */
  lease_closed_reason_unspecified = 10002,
  /** lease_closed_reason_manifest_timeout - lease_closed_reason_manifest_timeout provider closed leases due to manifest not received */
  lease_closed_reason_manifest_timeout = 10003,
  /** lease_closed_reason_insufficient_funds - values between 20000..29999 indicate network‑initiated close */
  lease_closed_reason_insufficient_funds = 20000,
  UNRECOGNIZED = -1,
}

export function leaseClosedReasonFromJSON(object: any): LeaseClosedReason {
  switch (object) {
    case 0:
    case "lease_closed_invalid":
      return LeaseClosedReason.lease_closed_invalid;
    case 1:
    case "lease_closed_owner":
      return LeaseClosedReason.lease_closed_owner;
    case 10000:
    case "lease_closed_reason_unstable":
      return LeaseClosedReason.lease_closed_reason_unstable;
    case 10001:
    case "lease_closed_reason_decommission":
      return LeaseClosedReason.lease_closed_reason_decommission;
    case 10002:
    case "lease_closed_reason_unspecified":
      return LeaseClosedReason.lease_closed_reason_unspecified;
    case 10003:
    case "lease_closed_reason_manifest_timeout":
      return LeaseClosedReason.lease_closed_reason_manifest_timeout;
    case 20000:
    case "lease_closed_reason_insufficient_funds":
      return LeaseClosedReason.lease_closed_reason_insufficient_funds;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LeaseClosedReason.UNRECOGNIZED;
  }
}

export function leaseClosedReasonToJSON(object: LeaseClosedReason): string {
  switch (object) {
    case LeaseClosedReason.lease_closed_invalid:
      return "lease_closed_invalid";
    case LeaseClosedReason.lease_closed_owner:
      return "lease_closed_owner";
    case LeaseClosedReason.lease_closed_reason_unstable:
      return "lease_closed_reason_unstable";
    case LeaseClosedReason.lease_closed_reason_decommission:
      return "lease_closed_reason_decommission";
    case LeaseClosedReason.lease_closed_reason_unspecified:
      return "lease_closed_reason_unspecified";
    case LeaseClosedReason.lease_closed_reason_manifest_timeout:
      return "lease_closed_reason_manifest_timeout";
    case LeaseClosedReason.lease_closed_reason_insufficient_funds:
      return "lease_closed_reason_insufficient_funds";
    case LeaseClosedReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
