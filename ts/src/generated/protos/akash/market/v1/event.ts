// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/market/v1/event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { DecCoin } from "../../../cosmos/base/v1beta1/coin.ts";
import { BidID } from "./bid.ts";
import { LeaseID } from "./lease.ts";
import { OrderID } from "./order.ts";
import { LeaseClosedReason, leaseClosedReasonFromJSON, leaseClosedReasonToJSON } from "./types.ts";
import Long = require("long");

export const protobufPackage = "akash.market.v1";

/**
 * EventOrderCreated is triggered when an order is created.
 * It contains all the information required to identify an order.
 */
export interface EventOrderCreated {
  /** Id is the unique identifier of the Order. */
  id: OrderID | undefined;
}

/**
 * EventOrderClosed is triggered when an order is closed.
 * It contains all the information required to identify an order.
 */
export interface EventOrderClosed {
  /** Id is the unique identifier of the Order. */
  id: OrderID | undefined;
}

/**
 * EventBidCreated is triggered when a bid is created.
 * It contains all the information required to identify a bid.
 */
export interface EventBidCreated {
  /** Id is the unique identifier of the Bid. */
  id:
    | BidID
    | undefined;
  /** Price stated on the Bid. */
  price: DecCoin | undefined;
}

/**
 * EventBidClosed is triggered when a bid is closed.
 * It contains all the information required to identify a bid.
 */
export interface EventBidClosed {
  /** Id is the unique identifier of the Bid. */
  id: BidID | undefined;
}

/**
 * EventLeaseCreated is triggered when a lease is created.
 * It contains all the information required to identify a lease.
 */
export interface EventLeaseCreated {
  /** Id is the unique identifier of the Lease. */
  id:
    | LeaseID
    | undefined;
  /** Price settled for the lease. */
  price: DecCoin | undefined;
}

/**
 * EventLeaseClosed is triggered when a lease is closed.
 * It contains all the information required to identify a lease.
 */
export interface EventLeaseClosed {
  /** Id is the unique identifier of the Lease. */
  id: LeaseID | undefined;
  reason: LeaseClosedReason;
}

function createBaseEventOrderCreated(): EventOrderCreated {
  return { id: undefined };
}

export const EventOrderCreated: MessageFns<EventOrderCreated, "akash.market.v1.EventOrderCreated"> = {
  $type: "akash.market.v1.EventOrderCreated" as const,

  encode(message: EventOrderCreated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      OrderID.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventOrderCreated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOrderCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = OrderID.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventOrderCreated {
    return { id: isSet(object.id) ? OrderID.fromJSON(object.id) : undefined };
  },

  toJSON(message: EventOrderCreated): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = OrderID.toJSON(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<EventOrderCreated>): EventOrderCreated {
    return EventOrderCreated.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventOrderCreated>): EventOrderCreated {
    const message = createBaseEventOrderCreated();
    message.id = (object.id !== undefined && object.id !== null) ? OrderID.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseEventOrderClosed(): EventOrderClosed {
  return { id: undefined };
}

export const EventOrderClosed: MessageFns<EventOrderClosed, "akash.market.v1.EventOrderClosed"> = {
  $type: "akash.market.v1.EventOrderClosed" as const,

  encode(message: EventOrderClosed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      OrderID.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventOrderClosed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventOrderClosed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = OrderID.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventOrderClosed {
    return { id: isSet(object.id) ? OrderID.fromJSON(object.id) : undefined };
  },

  toJSON(message: EventOrderClosed): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = OrderID.toJSON(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<EventOrderClosed>): EventOrderClosed {
    return EventOrderClosed.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventOrderClosed>): EventOrderClosed {
    const message = createBaseEventOrderClosed();
    message.id = (object.id !== undefined && object.id !== null) ? OrderID.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseEventBidCreated(): EventBidCreated {
  return { id: undefined, price: undefined };
}

export const EventBidCreated: MessageFns<EventBidCreated, "akash.market.v1.EventBidCreated"> = {
  $type: "akash.market.v1.EventBidCreated" as const,

  encode(message: EventBidCreated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      BidID.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.price !== undefined) {
      DecCoin.encode(message.price, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventBidCreated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventBidCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = BidID.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.price = DecCoin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventBidCreated {
    return {
      id: isSet(object.id) ? BidID.fromJSON(object.id) : undefined,
      price: isSet(object.price) ? DecCoin.fromJSON(object.price) : undefined,
    };
  },

  toJSON(message: EventBidCreated): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = BidID.toJSON(message.id);
    }
    if (message.price !== undefined) {
      obj.price = DecCoin.toJSON(message.price);
    }
    return obj;
  },

  create(base?: DeepPartial<EventBidCreated>): EventBidCreated {
    return EventBidCreated.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventBidCreated>): EventBidCreated {
    const message = createBaseEventBidCreated();
    message.id = (object.id !== undefined && object.id !== null) ? BidID.fromPartial(object.id) : undefined;
    message.price = (object.price !== undefined && object.price !== null)
      ? DecCoin.fromPartial(object.price)
      : undefined;
    return message;
  },
};

function createBaseEventBidClosed(): EventBidClosed {
  return { id: undefined };
}

export const EventBidClosed: MessageFns<EventBidClosed, "akash.market.v1.EventBidClosed"> = {
  $type: "akash.market.v1.EventBidClosed" as const,

  encode(message: EventBidClosed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      BidID.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventBidClosed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventBidClosed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = BidID.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventBidClosed {
    return { id: isSet(object.id) ? BidID.fromJSON(object.id) : undefined };
  },

  toJSON(message: EventBidClosed): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = BidID.toJSON(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<EventBidClosed>): EventBidClosed {
    return EventBidClosed.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventBidClosed>): EventBidClosed {
    const message = createBaseEventBidClosed();
    message.id = (object.id !== undefined && object.id !== null) ? BidID.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseEventLeaseCreated(): EventLeaseCreated {
  return { id: undefined, price: undefined };
}

export const EventLeaseCreated: MessageFns<EventLeaseCreated, "akash.market.v1.EventLeaseCreated"> = {
  $type: "akash.market.v1.EventLeaseCreated" as const,

  encode(message: EventLeaseCreated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      LeaseID.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.price !== undefined) {
      DecCoin.encode(message.price, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventLeaseCreated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventLeaseCreated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = LeaseID.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.price = DecCoin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventLeaseCreated {
    return {
      id: isSet(object.id) ? LeaseID.fromJSON(object.id) : undefined,
      price: isSet(object.price) ? DecCoin.fromJSON(object.price) : undefined,
    };
  },

  toJSON(message: EventLeaseCreated): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = LeaseID.toJSON(message.id);
    }
    if (message.price !== undefined) {
      obj.price = DecCoin.toJSON(message.price);
    }
    return obj;
  },

  create(base?: DeepPartial<EventLeaseCreated>): EventLeaseCreated {
    return EventLeaseCreated.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventLeaseCreated>): EventLeaseCreated {
    const message = createBaseEventLeaseCreated();
    message.id = (object.id !== undefined && object.id !== null) ? LeaseID.fromPartial(object.id) : undefined;
    message.price = (object.price !== undefined && object.price !== null)
      ? DecCoin.fromPartial(object.price)
      : undefined;
    return message;
  },
};

function createBaseEventLeaseClosed(): EventLeaseClosed {
  return { id: undefined, reason: 0 };
}

export const EventLeaseClosed: MessageFns<EventLeaseClosed, "akash.market.v1.EventLeaseClosed"> = {
  $type: "akash.market.v1.EventLeaseClosed" as const,

  encode(message: EventLeaseClosed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      LeaseID.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.reason !== 0) {
      writer.uint32(16).int32(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventLeaseClosed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventLeaseClosed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = LeaseID.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventLeaseClosed {
    return {
      id: isSet(object.id) ? LeaseID.fromJSON(object.id) : undefined,
      reason: isSet(object.reason) ? leaseClosedReasonFromJSON(object.reason) : 0,
    };
  },

  toJSON(message: EventLeaseClosed): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = LeaseID.toJSON(message.id);
    }
    if (message.reason !== 0) {
      obj.reason = leaseClosedReasonToJSON(message.reason);
    }
    return obj;
  },

  create(base?: DeepPartial<EventLeaseClosed>): EventLeaseClosed {
    return EventLeaseClosed.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventLeaseClosed>): EventLeaseClosed {
    const message = createBaseEventLeaseClosed();
    message.id = (object.id !== undefined && object.id !== null) ? LeaseID.fromPartial(object.id) : undefined;
    message.reason = object.reason ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
