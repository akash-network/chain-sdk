// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/market/v1/lease.proto

/* eslint-disable */
import Long = require("long");
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { DecCoin } from "../../../cosmos/base/v1beta1/coin.ts";
import { LeaseClosedReason, leaseClosedReasonFromJSON, leaseClosedReasonToJSON } from "./types.ts";

export const protobufPackage = "akash.market.v1";

/** LeaseID stores bid details of lease. */
export interface LeaseID {
  /**
   * Owner is the account bech32 address of the user who owns the deployment.
   * It is a string representing a valid bech32 account address.
   *
   * Example:
   *   "akash1..."
   */
  owner: string;
  /**
   * Dseq (deployment sequence number) is a unique numeric identifier for the deployment.
   * It is used to differentiate deployments created by the same owner.
   */
  dseq: Long;
  /**
   * Gseq (group sequence number) is a unique numeric identifier for the group.
   * It is used to differentiate groups created by the same owner in a deployment.
   */
  gseq: number;
  /**
   * Oseq (order sequence) distinguishes multiple orders associated with a single deployment.
   * Oseq is incremented when a lease associated with an existing deployment is closed, and a new order is generated.
   */
  oseq: number;
  /**
   * Provider is the account bech32 address of the provider making the bid.
   * It is a string representing a valid account bech32 address.
   *
   * Example:
   *   "akash1..."
   */
  provider: string;
  /** BSeq (bid sequence) distinguishes multiple bids associated with a single deployment from same provider. */
  bseq: number;
}

/**
 * Lease stores LeaseID, state of lease and price.
 * The Lease defines the terms under which the provider allocates resources to fulfill
 * the tenant's deployment requirements.
 * Leases are paid from the tenant to the provider through a deposit and withdraw mechanism and are priced in blocks.
 */
export interface Lease {
  /** Id is the unique identifier of the Lease. */
  id:
    | LeaseID
    | undefined;
  /** State represents the state of the Lease. */
  state: Lease_State;
  /** Price holds the settled price for the Lease. */
  price:
    | DecCoin
    | undefined;
  /** CreatedAt is the block height at which the Lease was created. */
  createdAt: Long;
  /** ClosedOn is the block height at which the Lease was closed. */
  closedOn: Long;
  reason: LeaseClosedReason;
}

/** State is an enum which refers to state of lease. */
export enum Lease_State {
  /** invalid - Prefix should start with 0 in enum. So declaring dummy state. */
  invalid = 0,
  /** active - LeaseActive denotes state for lease active. */
  active = 1,
  /** insufficient_funds - LeaseInsufficientFunds denotes state for lease insufficient_funds. */
  insufficient_funds = 2,
  /** closed - LeaseClosed denotes state for lease closed. */
  closed = 3,
  UNRECOGNIZED = -1,
}

export function lease_StateFromJSON(object: any): Lease_State {
  switch (object) {
    case 0:
    case "invalid":
      return Lease_State.invalid;
    case 1:
    case "active":
      return Lease_State.active;
    case 2:
    case "insufficient_funds":
      return Lease_State.insufficient_funds;
    case 3:
    case "closed":
      return Lease_State.closed;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Lease_State.UNRECOGNIZED;
  }
}

export function lease_StateToJSON(object: Lease_State): string {
  switch (object) {
    case Lease_State.invalid:
      return "invalid";
    case Lease_State.active:
      return "active";
    case Lease_State.insufficient_funds:
      return "insufficient_funds";
    case Lease_State.closed:
      return "closed";
    case Lease_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseLeaseID(): LeaseID {
  return { owner: "", dseq: Long.UZERO, gseq: 0, oseq: 0, provider: "", bseq: 0 };
}

export const LeaseID: MessageFns<LeaseID, "akash.market.v1.LeaseID"> = {
  $type: "akash.market.v1.LeaseID" as const,

  encode(message: LeaseID, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (!message.dseq.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.dseq.toString());
    }
    if (message.gseq !== 0) {
      writer.uint32(24).uint32(message.gseq);
    }
    if (message.oseq !== 0) {
      writer.uint32(32).uint32(message.oseq);
    }
    if (message.provider !== "") {
      writer.uint32(42).string(message.provider);
    }
    if (message.bseq !== 0) {
      writer.uint32(48).uint32(message.bseq);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeaseID {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeaseID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.dseq = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.gseq = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.oseq = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.provider = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.bseq = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LeaseID {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      dseq: isSet(object.dseq) ? Long.fromValue(object.dseq) : Long.UZERO,
      gseq: isSet(object.gseq) ? globalThis.Number(object.gseq) : 0,
      oseq: isSet(object.oseq) ? globalThis.Number(object.oseq) : 0,
      provider: isSet(object.provider) ? globalThis.String(object.provider) : "",
      bseq: isSet(object.bseq) ? globalThis.Number(object.bseq) : 0,
    };
  },

  toJSON(message: LeaseID): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (!message.dseq.equals(Long.UZERO)) {
      obj.dseq = (message.dseq || Long.UZERO).toString();
    }
    if (message.gseq !== 0) {
      obj.gseq = Math.round(message.gseq);
    }
    if (message.oseq !== 0) {
      obj.oseq = Math.round(message.oseq);
    }
    if (message.provider !== "") {
      obj.provider = message.provider;
    }
    if (message.bseq !== 0) {
      obj.bseq = Math.round(message.bseq);
    }
    return obj;
  },

  create(base?: DeepPartial<LeaseID>): LeaseID {
    return LeaseID.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LeaseID>): LeaseID {
    const message = createBaseLeaseID();
    message.owner = object.owner ?? "";
    message.dseq = (object.dseq !== undefined && object.dseq !== null) ? Long.fromValue(object.dseq) : Long.UZERO;
    message.gseq = object.gseq ?? 0;
    message.oseq = object.oseq ?? 0;
    message.provider = object.provider ?? "";
    message.bseq = object.bseq ?? 0;
    return message;
  },
};

function createBaseLease(): Lease {
  return { id: undefined, state: 0, price: undefined, createdAt: Long.ZERO, closedOn: Long.ZERO, reason: 0 };
}

export const Lease: MessageFns<Lease, "akash.market.v1.Lease"> = {
  $type: "akash.market.v1.Lease" as const,

  encode(message: Lease, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      LeaseID.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.price !== undefined) {
      DecCoin.encode(message.price, writer.uint32(26).fork()).join();
    }
    if (!message.createdAt.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.createdAt.toString());
    }
    if (!message.closedOn.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.closedOn.toString());
    }
    if (message.reason !== 0) {
      writer.uint32(48).int32(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Lease {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLease();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = LeaseID.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.price = DecCoin.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.createdAt = Long.fromString(reader.int64().toString());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.closedOn = Long.fromString(reader.int64().toString());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.reason = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Lease {
    return {
      id: isSet(object.id) ? LeaseID.fromJSON(object.id) : undefined,
      state: isSet(object.state) ? lease_StateFromJSON(object.state) : 0,
      price: isSet(object.price) ? DecCoin.fromJSON(object.price) : undefined,
      createdAt: isSet(object.createdAt) ? Long.fromValue(object.createdAt) : Long.ZERO,
      closedOn: isSet(object.closedOn) ? Long.fromValue(object.closedOn) : Long.ZERO,
      reason: isSet(object.reason) ? leaseClosedReasonFromJSON(object.reason) : 0,
    };
  },

  toJSON(message: Lease): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = LeaseID.toJSON(message.id);
    }
    if (message.state !== 0) {
      obj.state = lease_StateToJSON(message.state);
    }
    if (message.price !== undefined) {
      obj.price = DecCoin.toJSON(message.price);
    }
    if (!message.createdAt.equals(Long.ZERO)) {
      obj.createdAt = (message.createdAt || Long.ZERO).toString();
    }
    if (!message.closedOn.equals(Long.ZERO)) {
      obj.closedOn = (message.closedOn || Long.ZERO).toString();
    }
    if (message.reason !== 0) {
      obj.reason = leaseClosedReasonToJSON(message.reason);
    }
    return obj;
  },

  create(base?: DeepPartial<Lease>): Lease {
    return Lease.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Lease>): Lease {
    const message = createBaseLease();
    message.id = (object.id !== undefined && object.id !== null) ? LeaseID.fromPartial(object.id) : undefined;
    message.state = object.state ?? 0;
    message.price = (object.price !== undefined && object.price !== null)
      ? DecCoin.fromPartial(object.price)
      : undefined;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Long.fromValue(object.createdAt)
      : Long.ZERO;
    message.closedOn = (object.closedOn !== undefined && object.closedOn !== null)
      ? Long.fromValue(object.closedOn)
      : Long.ZERO;
    message.reason = object.reason ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
