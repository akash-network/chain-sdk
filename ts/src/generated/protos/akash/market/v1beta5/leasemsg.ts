// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/market/v1beta5/leasemsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { BidID } from "../v1/bid.ts";
import { LeaseID } from "../v1/lease.ts";

export const protobufPackage = "akash.market.v1beta5";

/** MsgCreateLease is sent to create a lease. */
export interface MsgCreateLease {
  /** BidId is the unique identifier of the Bid. */
  bidId: BidID | undefined;
}

/** MsgCreateLeaseResponse is the response from creating a lease. */
export interface MsgCreateLeaseResponse {
}

/** MsgWithdrawLease defines an SDK message for withdrawing lease funds. */
export interface MsgWithdrawLease {
  /** BidId is the unique identifier of the Bid. */
  id: LeaseID | undefined;
}

/** MsgWithdrawLeaseResponse defines the Msg/WithdrawLease response type. */
export interface MsgWithdrawLeaseResponse {
}

/** MsgCloseLease defines an SDK message for closing order. */
export interface MsgCloseLease {
  /** LeaseID is the unique identifier of the Lease. */
  id: LeaseID | undefined;
}

/** MsgCloseLeaseResponse defines the Msg/CloseLease response type. */
export interface MsgCloseLeaseResponse {
}

function createBaseMsgCreateLease(): MsgCreateLease {
  return { bidId: undefined };
}

export const MsgCreateLease: MessageFns<MsgCreateLease, "akash.market.v1beta5.MsgCreateLease"> = {
  $type: "akash.market.v1beta5.MsgCreateLease" as const,

  encode(message: MsgCreateLease, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bidId !== undefined) {
      BidID.encode(message.bidId, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateLease {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateLease();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bidId = BidID.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateLease {
    return { bidId: isSet(object.bidId) ? BidID.fromJSON(object.bidId) : undefined };
  },

  toJSON(message: MsgCreateLease): unknown {
    const obj: any = {};
    if (message.bidId !== undefined) {
      obj.bidId = BidID.toJSON(message.bidId);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCreateLease>): MsgCreateLease {
    return MsgCreateLease.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCreateLease>): MsgCreateLease {
    const message = createBaseMsgCreateLease();
    message.bidId = (object.bidId !== undefined && object.bidId !== null) ? BidID.fromPartial(object.bidId) : undefined;
    return message;
  },
};

function createBaseMsgCreateLeaseResponse(): MsgCreateLeaseResponse {
  return {};
}

export const MsgCreateLeaseResponse: MessageFns<MsgCreateLeaseResponse, "akash.market.v1beta5.MsgCreateLeaseResponse"> =
  {
    $type: "akash.market.v1beta5.MsgCreateLeaseResponse" as const,

    encode(_: MsgCreateLeaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateLeaseResponse {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMsgCreateLeaseResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(_: any): MsgCreateLeaseResponse {
      return {};
    },

    toJSON(_: MsgCreateLeaseResponse): unknown {
      const obj: any = {};
      return obj;
    },

    create(base?: DeepPartial<MsgCreateLeaseResponse>): MsgCreateLeaseResponse {
      return MsgCreateLeaseResponse.fromPartial(base ?? {});
    },
    fromPartial(_: DeepPartial<MsgCreateLeaseResponse>): MsgCreateLeaseResponse {
      const message = createBaseMsgCreateLeaseResponse();
      return message;
    },
  };

function createBaseMsgWithdrawLease(): MsgWithdrawLease {
  return { id: undefined };
}

export const MsgWithdrawLease: MessageFns<MsgWithdrawLease, "akash.market.v1beta5.MsgWithdrawLease"> = {
  $type: "akash.market.v1beta5.MsgWithdrawLease" as const,

  encode(message: MsgWithdrawLease, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      LeaseID.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgWithdrawLease {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawLease();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = LeaseID.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgWithdrawLease {
    return { id: isSet(object.id) ? LeaseID.fromJSON(object.id) : undefined };
  },

  toJSON(message: MsgWithdrawLease): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = LeaseID.toJSON(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgWithdrawLease>): MsgWithdrawLease {
    return MsgWithdrawLease.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgWithdrawLease>): MsgWithdrawLease {
    const message = createBaseMsgWithdrawLease();
    message.id = (object.id !== undefined && object.id !== null) ? LeaseID.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseMsgWithdrawLeaseResponse(): MsgWithdrawLeaseResponse {
  return {};
}

export const MsgWithdrawLeaseResponse: MessageFns<
  MsgWithdrawLeaseResponse,
  "akash.market.v1beta5.MsgWithdrawLeaseResponse"
> = {
  $type: "akash.market.v1beta5.MsgWithdrawLeaseResponse" as const,

  encode(_: MsgWithdrawLeaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgWithdrawLeaseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWithdrawLeaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgWithdrawLeaseResponse {
    return {};
  },

  toJSON(_: MsgWithdrawLeaseResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgWithdrawLeaseResponse>): MsgWithdrawLeaseResponse {
    return MsgWithdrawLeaseResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgWithdrawLeaseResponse>): MsgWithdrawLeaseResponse {
    const message = createBaseMsgWithdrawLeaseResponse();
    return message;
  },
};

function createBaseMsgCloseLease(): MsgCloseLease {
  return { id: undefined };
}

export const MsgCloseLease: MessageFns<MsgCloseLease, "akash.market.v1beta5.MsgCloseLease"> = {
  $type: "akash.market.v1beta5.MsgCloseLease" as const,

  encode(message: MsgCloseLease, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      LeaseID.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCloseLease {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCloseLease();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = LeaseID.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCloseLease {
    return { id: isSet(object.id) ? LeaseID.fromJSON(object.id) : undefined };
  },

  toJSON(message: MsgCloseLease): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = LeaseID.toJSON(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCloseLease>): MsgCloseLease {
    return MsgCloseLease.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCloseLease>): MsgCloseLease {
    const message = createBaseMsgCloseLease();
    message.id = (object.id !== undefined && object.id !== null) ? LeaseID.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseMsgCloseLeaseResponse(): MsgCloseLeaseResponse {
  return {};
}

export const MsgCloseLeaseResponse: MessageFns<MsgCloseLeaseResponse, "akash.market.v1beta5.MsgCloseLeaseResponse"> = {
  $type: "akash.market.v1beta5.MsgCloseLeaseResponse" as const,

  encode(_: MsgCloseLeaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCloseLeaseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCloseLeaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCloseLeaseResponse {
    return {};
  },

  toJSON(_: MsgCloseLeaseResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgCloseLeaseResponse>): MsgCloseLeaseResponse {
    return MsgCloseLeaseResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgCloseLeaseResponse>): MsgCloseLeaseResponse {
    const message = createBaseMsgCloseLeaseResponse();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
