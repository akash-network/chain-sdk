// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/market/v1beta5/bidmsg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { DecCoin } from "../../../cosmos/base/v1beta1/coin.ts";
import { Deposit } from "../../base/deposit/v1/deposit.ts";
import { BidID } from "../v1/bid.ts";
import { ResourceOffer } from "./resourcesoffer.ts";
import Long = require("long");

export const protobufPackage = "akash.market.v1beta5";

/** MsgCreateBid defines an SDK message for creating Bid. */
export interface MsgCreateBid {
  id:
    | BidID
    | undefined;
  /** Price holds the pricing stated on the Bid. */
  price:
    | DecCoin
    | undefined;
  /** Deposit holds the amount of coins to deposit. */
  deposit:
    | Deposit
    | undefined;
  /** ResourceOffer is a list of resource offers. */
  resourcesOffer: ResourceOffer[];
}

/** MsgCreateBidResponse defines the Msg/CreateBid response type. */
export interface MsgCreateBidResponse {
}

/** MsgCloseBid defines an SDK message for closing bid. */
export interface MsgCloseBid {
  /** Id is the unique identifier of the Bid. */
  id: BidID | undefined;
}

/** MsgCloseBidResponse defines the Msg/CloseBid response type. */
export interface MsgCloseBidResponse {
}

function createBaseMsgCreateBid(): MsgCreateBid {
  return { id: undefined, price: undefined, deposit: undefined, resourcesOffer: [] };
}

export const MsgCreateBid: MessageFns<MsgCreateBid, "akash.market.v1beta5.MsgCreateBid"> = {
  $type: "akash.market.v1beta5.MsgCreateBid" as const,

  encode(message: MsgCreateBid, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      BidID.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.price !== undefined) {
      DecCoin.encode(message.price, writer.uint32(18).fork()).join();
    }
    if (message.deposit !== undefined) {
      Deposit.encode(message.deposit, writer.uint32(26).fork()).join();
    }
    for (const v of message.resourcesOffer) {
      ResourceOffer.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateBid {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = BidID.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.price = DecCoin.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.deposit = Deposit.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.resourcesOffer.push(ResourceOffer.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateBid {
    return {
      id: isSet(object.id) ? BidID.fromJSON(object.id) : undefined,
      price: isSet(object.price) ? DecCoin.fromJSON(object.price) : undefined,
      deposit: isSet(object.deposit) ? Deposit.fromJSON(object.deposit) : undefined,
      resourcesOffer: globalThis.Array.isArray(object?.resourcesOffer)
        ? object.resourcesOffer.map((e: any) => ResourceOffer.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgCreateBid): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = BidID.toJSON(message.id);
    }
    if (message.price !== undefined) {
      obj.price = DecCoin.toJSON(message.price);
    }
    if (message.deposit !== undefined) {
      obj.deposit = Deposit.toJSON(message.deposit);
    }
    if (message.resourcesOffer?.length) {
      obj.resourcesOffer = message.resourcesOffer.map((e) => ResourceOffer.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCreateBid>): MsgCreateBid {
    return MsgCreateBid.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCreateBid>): MsgCreateBid {
    const message = createBaseMsgCreateBid();
    message.id = (object.id !== undefined && object.id !== null) ? BidID.fromPartial(object.id) : undefined;
    message.price = (object.price !== undefined && object.price !== null)
      ? DecCoin.fromPartial(object.price)
      : undefined;
    message.deposit = (object.deposit !== undefined && object.deposit !== null)
      ? Deposit.fromPartial(object.deposit)
      : undefined;
    message.resourcesOffer = object.resourcesOffer?.map((e) => ResourceOffer.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgCreateBidResponse(): MsgCreateBidResponse {
  return {};
}

export const MsgCreateBidResponse: MessageFns<MsgCreateBidResponse, "akash.market.v1beta5.MsgCreateBidResponse"> = {
  $type: "akash.market.v1beta5.MsgCreateBidResponse" as const,

  encode(_: MsgCreateBidResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateBidResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateBidResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateBidResponse {
    return {};
  },

  toJSON(_: MsgCreateBidResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgCreateBidResponse>): MsgCreateBidResponse {
    return MsgCreateBidResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgCreateBidResponse>): MsgCreateBidResponse {
    const message = createBaseMsgCreateBidResponse();
    return message;
  },
};

function createBaseMsgCloseBid(): MsgCloseBid {
  return { id: undefined };
}

export const MsgCloseBid: MessageFns<MsgCloseBid, "akash.market.v1beta5.MsgCloseBid"> = {
  $type: "akash.market.v1beta5.MsgCloseBid" as const,

  encode(message: MsgCloseBid, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      BidID.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCloseBid {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCloseBid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = BidID.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCloseBid {
    return { id: isSet(object.id) ? BidID.fromJSON(object.id) : undefined };
  },

  toJSON(message: MsgCloseBid): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = BidID.toJSON(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCloseBid>): MsgCloseBid {
    return MsgCloseBid.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCloseBid>): MsgCloseBid {
    const message = createBaseMsgCloseBid();
    message.id = (object.id !== undefined && object.id !== null) ? BidID.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseMsgCloseBidResponse(): MsgCloseBidResponse {
  return {};
}

export const MsgCloseBidResponse: MessageFns<MsgCloseBidResponse, "akash.market.v1beta5.MsgCloseBidResponse"> = {
  $type: "akash.market.v1beta5.MsgCloseBidResponse" as const,

  encode(_: MsgCloseBidResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCloseBidResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCloseBidResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCloseBidResponse {
    return {};
  },

  toJSON(_: MsgCloseBidResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgCloseBidResponse>): MsgCloseBidResponse {
    return MsgCloseBidResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgCloseBidResponse>): MsgCloseBidResponse {
    const message = createBaseMsgCloseBidResponse();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
