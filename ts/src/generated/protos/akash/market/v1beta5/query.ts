import { isSet } from "../../../../../encoding/typeEncodingHelpers.ts"
import type { DeepPartial, MessageFns } from "../../../../../encoding/typeEncodingHelpers.ts"
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/market/v1beta5/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination.ts";
import { Account } from "../../escrow/types/v1/account.ts";
import { Payment } from "../../escrow/types/v1/payment.ts";
import { BidID } from "../v1/bid.ts";
import { LeaseFilters } from "../v1/filters.ts";
import { Lease, LeaseID } from "../v1/lease.ts";
import { OrderID } from "../v1/order.ts";
import { Bid } from "./bid.ts";
import { BidFilters, OrderFilters } from "./filters.ts";
import { Order } from "./order.ts";
import { Params } from "./params.ts";

/** QueryOrdersRequest is request type for the Query/Orders RPC method. */
export interface QueryOrdersRequest {
  /** Filters holds the fields to filter orders. */
  filters:
    | OrderFilters
    | undefined;
  /** Pagination is used to paginate the request. */
  pagination: PageRequest | undefined;
}

/** QueryOrdersResponse is response type for the Query/Orders RPC method */
export interface QueryOrdersResponse {
  /** Orders is a list of market orders. */
  orders: Order[];
  /** Pagination contains the information about response pagination. */
  pagination: PageResponse | undefined;
}

/** QueryOrderRequest is request type for the Query/Order RPC method. */
export interface QueryOrderRequest {
  /** Id is the unique identifier of the Order. */
  id: OrderID | undefined;
}

/** QueryOrderResponse is response type for the Query/Order RPC method. */
export interface QueryOrderResponse {
  /** Order represents a market order. */
  order: Order | undefined;
}

/** QueryBidsRequest is request type for the Query/Bids RPC method. */
export interface QueryBidsRequest {
  /** Filters holds the fields to filter bids. */
  filters:
    | BidFilters
    | undefined;
  /** Pagination is used to paginate the request. */
  pagination: PageRequest | undefined;
}

/** QueryBidsResponse is response type for the Query/Bids RPC method */
export interface QueryBidsResponse {
  /** Bids is a list of deployment bids. */
  bids: QueryBidResponse[];
  /** Pagination contains the information about response pagination. */
  pagination: PageResponse | undefined;
}

/** QueryBidRequest is request type for the Query/Bid RPC method. */
export interface QueryBidRequest {
  /** Id is the unique identifier for the Bid. */
  id: BidID | undefined;
}

/** QueryBidResponse is response type for the Query/Bid RPC method. */
export interface QueryBidResponse {
  /** Bid represents a deployment bid. */
  bid:
    | Bid
    | undefined;
  /** EscrowAccount represents the escrow account created for the Bid. */
  escrowAccount: Account | undefined;
}

/** QueryLeasesRequest is request type for the Query/Leases RPC method. */
export interface QueryLeasesRequest {
  /** Filters holds the fields to filter leases. */
  filters:
    | LeaseFilters
    | undefined;
  /** Pagination is used to paginate the request. */
  pagination: PageRequest | undefined;
}

/** QueryLeasesResponse is response type for the Query/Leases RPC method. */
export interface QueryLeasesResponse {
  /** Leases is a list of Lease. */
  leases: QueryLeaseResponse[];
  /** Pagination contains the information about response pagination. */
  pagination: PageResponse | undefined;
}

/** QueryLeaseRequest is request type for the Query/Lease RPC method. */
export interface QueryLeaseRequest {
  /** Id is the unique identifier of the Lease. */
  id: LeaseID | undefined;
}

/** QueryLeaseResponse is response type for the Query/Lease RPC method */
export interface QueryLeaseResponse {
  /** Lease holds the lease for a deployment. */
  lease:
    | Lease
    | undefined;
  /** EscrowPayment holds information about the Lease's fractional payment. */
  escrowPayment: Payment | undefined;
}

/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params defines the parameters of the module. */
  params: Params | undefined;
}

function createBaseQueryOrdersRequest(): QueryOrdersRequest {
  return { filters: undefined, pagination: undefined };
}

export const QueryOrdersRequest: MessageFns<QueryOrdersRequest, "akash.market.v1beta5.QueryOrdersRequest"> = {
  $type: "akash.market.v1beta5.QueryOrdersRequest" as const,

  encode(message: QueryOrdersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filters !== undefined) {
      OrderFilters.encode(message.filters, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOrdersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOrdersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filters = OrderFilters.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOrdersRequest {
    return {
      filters: isSet(object.filters) ? OrderFilters.fromJSON(object.filters) : undefined,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryOrdersRequest): unknown {
    const obj: any = {};
    if (message.filters !== undefined) {
      obj.filters = OrderFilters.toJSON(message.filters);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOrdersRequest>): QueryOrdersRequest {
    return QueryOrdersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOrdersRequest>): QueryOrdersRequest {
    const message = createBaseQueryOrdersRequest();
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? OrderFilters.fromPartial(object.filters)
      : undefined;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryOrdersResponse(): QueryOrdersResponse {
  return { orders: [], pagination: undefined };
}

export const QueryOrdersResponse: MessageFns<QueryOrdersResponse, "akash.market.v1beta5.QueryOrdersResponse"> = {
  $type: "akash.market.v1beta5.QueryOrdersResponse" as const,

  encode(message: QueryOrdersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.orders) {
      Order.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOrdersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOrdersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.orders.push(Order.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOrdersResponse {
    return {
      orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e: any) => Order.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryOrdersResponse): unknown {
    const obj: any = {};
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => Order.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOrdersResponse>): QueryOrdersResponse {
    return QueryOrdersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOrdersResponse>): QueryOrdersResponse {
    const message = createBaseQueryOrdersResponse();
    message.orders = object.orders?.map((e) => Order.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryOrderRequest(): QueryOrderRequest {
  return { id: undefined };
}

export const QueryOrderRequest: MessageFns<QueryOrderRequest, "akash.market.v1beta5.QueryOrderRequest"> = {
  $type: "akash.market.v1beta5.QueryOrderRequest" as const,

  encode(message: QueryOrderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      OrderID.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOrderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = OrderID.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOrderRequest {
    return { id: isSet(object.id) ? OrderID.fromJSON(object.id) : undefined };
  },

  toJSON(message: QueryOrderRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = OrderID.toJSON(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOrderRequest>): QueryOrderRequest {
    return QueryOrderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOrderRequest>): QueryOrderRequest {
    const message = createBaseQueryOrderRequest();
    message.id = (object.id !== undefined && object.id !== null) ? OrderID.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseQueryOrderResponse(): QueryOrderResponse {
  return { order: undefined };
}

export const QueryOrderResponse: MessageFns<QueryOrderResponse, "akash.market.v1beta5.QueryOrderResponse"> = {
  $type: "akash.market.v1beta5.QueryOrderResponse" as const,

  encode(message: QueryOrderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.order !== undefined) {
      Order.encode(message.order, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryOrderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.order = Order.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryOrderResponse {
    return { order: isSet(object.order) ? Order.fromJSON(object.order) : undefined };
  },

  toJSON(message: QueryOrderResponse): unknown {
    const obj: any = {};
    if (message.order !== undefined) {
      obj.order = Order.toJSON(message.order);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryOrderResponse>): QueryOrderResponse {
    return QueryOrderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryOrderResponse>): QueryOrderResponse {
    const message = createBaseQueryOrderResponse();
    message.order = (object.order !== undefined && object.order !== null) ? Order.fromPartial(object.order) : undefined;
    return message;
  },
};

function createBaseQueryBidsRequest(): QueryBidsRequest {
  return { filters: undefined, pagination: undefined };
}

export const QueryBidsRequest: MessageFns<QueryBidsRequest, "akash.market.v1beta5.QueryBidsRequest"> = {
  $type: "akash.market.v1beta5.QueryBidsRequest" as const,

  encode(message: QueryBidsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filters !== undefined) {
      BidFilters.encode(message.filters, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryBidsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBidsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filters = BidFilters.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBidsRequest {
    return {
      filters: isSet(object.filters) ? BidFilters.fromJSON(object.filters) : undefined,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryBidsRequest): unknown {
    const obj: any = {};
    if (message.filters !== undefined) {
      obj.filters = BidFilters.toJSON(message.filters);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryBidsRequest>): QueryBidsRequest {
    return QueryBidsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryBidsRequest>): QueryBidsRequest {
    const message = createBaseQueryBidsRequest();
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? BidFilters.fromPartial(object.filters)
      : undefined;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryBidsResponse(): QueryBidsResponse {
  return { bids: [], pagination: undefined };
}

export const QueryBidsResponse: MessageFns<QueryBidsResponse, "akash.market.v1beta5.QueryBidsResponse"> = {
  $type: "akash.market.v1beta5.QueryBidsResponse" as const,

  encode(message: QueryBidsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.bids) {
      QueryBidResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryBidsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBidsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bids.push(QueryBidResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBidsResponse {
    return {
      bids: globalThis.Array.isArray(object?.bids) ? object.bids.map((e: any) => QueryBidResponse.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryBidsResponse): unknown {
    const obj: any = {};
    if (message.bids?.length) {
      obj.bids = message.bids.map((e) => QueryBidResponse.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryBidsResponse>): QueryBidsResponse {
    return QueryBidsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryBidsResponse>): QueryBidsResponse {
    const message = createBaseQueryBidsResponse();
    message.bids = object.bids?.map((e) => QueryBidResponse.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryBidRequest(): QueryBidRequest {
  return { id: undefined };
}

export const QueryBidRequest: MessageFns<QueryBidRequest, "akash.market.v1beta5.QueryBidRequest"> = {
  $type: "akash.market.v1beta5.QueryBidRequest" as const,

  encode(message: QueryBidRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      BidID.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryBidRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBidRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = BidID.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBidRequest {
    return { id: isSet(object.id) ? BidID.fromJSON(object.id) : undefined };
  },

  toJSON(message: QueryBidRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = BidID.toJSON(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryBidRequest>): QueryBidRequest {
    return QueryBidRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryBidRequest>): QueryBidRequest {
    const message = createBaseQueryBidRequest();
    message.id = (object.id !== undefined && object.id !== null) ? BidID.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseQueryBidResponse(): QueryBidResponse {
  return { bid: undefined, escrowAccount: undefined };
}

export const QueryBidResponse: MessageFns<QueryBidResponse, "akash.market.v1beta5.QueryBidResponse"> = {
  $type: "akash.market.v1beta5.QueryBidResponse" as const,

  encode(message: QueryBidResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.bid !== undefined) {
      Bid.encode(message.bid, writer.uint32(10).fork()).join();
    }
    if (message.escrowAccount !== undefined) {
      Account.encode(message.escrowAccount, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryBidResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBidResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bid = Bid.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.escrowAccount = Account.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBidResponse {
    return {
      bid: isSet(object.bid) ? Bid.fromJSON(object.bid) : undefined,
      escrowAccount: isSet(object.escrow_account) ? Account.fromJSON(object.escrow_account) : undefined,
    };
  },

  toJSON(message: QueryBidResponse): unknown {
    const obj: any = {};
    if (message.bid !== undefined) {
      obj.bid = Bid.toJSON(message.bid);
    }
    if (message.escrowAccount !== undefined) {
      obj.escrow_account = Account.toJSON(message.escrowAccount);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryBidResponse>): QueryBidResponse {
    return QueryBidResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryBidResponse>): QueryBidResponse {
    const message = createBaseQueryBidResponse();
    message.bid = (object.bid !== undefined && object.bid !== null) ? Bid.fromPartial(object.bid) : undefined;
    message.escrowAccount = (object.escrowAccount !== undefined && object.escrowAccount !== null)
      ? Account.fromPartial(object.escrowAccount)
      : undefined;
    return message;
  },
};

function createBaseQueryLeasesRequest(): QueryLeasesRequest {
  return { filters: undefined, pagination: undefined };
}

export const QueryLeasesRequest: MessageFns<QueryLeasesRequest, "akash.market.v1beta5.QueryLeasesRequest"> = {
  $type: "akash.market.v1beta5.QueryLeasesRequest" as const,

  encode(message: QueryLeasesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filters !== undefined) {
      LeaseFilters.encode(message.filters, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLeasesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLeasesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filters = LeaseFilters.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLeasesRequest {
    return {
      filters: isSet(object.filters) ? LeaseFilters.fromJSON(object.filters) : undefined,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryLeasesRequest): unknown {
    const obj: any = {};
    if (message.filters !== undefined) {
      obj.filters = LeaseFilters.toJSON(message.filters);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLeasesRequest>): QueryLeasesRequest {
    return QueryLeasesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLeasesRequest>): QueryLeasesRequest {
    const message = createBaseQueryLeasesRequest();
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? LeaseFilters.fromPartial(object.filters)
      : undefined;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryLeasesResponse(): QueryLeasesResponse {
  return { leases: [], pagination: undefined };
}

export const QueryLeasesResponse: MessageFns<QueryLeasesResponse, "akash.market.v1beta5.QueryLeasesResponse"> = {
  $type: "akash.market.v1beta5.QueryLeasesResponse" as const,

  encode(message: QueryLeasesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.leases) {
      QueryLeaseResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLeasesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLeasesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.leases.push(QueryLeaseResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLeasesResponse {
    return {
      leases: globalThis.Array.isArray(object?.leases)
        ? object.leases.map((e: any) => QueryLeaseResponse.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryLeasesResponse): unknown {
    const obj: any = {};
    if (message.leases?.length) {
      obj.leases = message.leases.map((e) => QueryLeaseResponse.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLeasesResponse>): QueryLeasesResponse {
    return QueryLeasesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLeasesResponse>): QueryLeasesResponse {
    const message = createBaseQueryLeasesResponse();
    message.leases = object.leases?.map((e) => QueryLeaseResponse.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryLeaseRequest(): QueryLeaseRequest {
  return { id: undefined };
}

export const QueryLeaseRequest: MessageFns<QueryLeaseRequest, "akash.market.v1beta5.QueryLeaseRequest"> = {
  $type: "akash.market.v1beta5.QueryLeaseRequest" as const,

  encode(message: QueryLeaseRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      LeaseID.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLeaseRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLeaseRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = LeaseID.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLeaseRequest {
    return { id: isSet(object.id) ? LeaseID.fromJSON(object.id) : undefined };
  },

  toJSON(message: QueryLeaseRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = LeaseID.toJSON(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLeaseRequest>): QueryLeaseRequest {
    return QueryLeaseRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLeaseRequest>): QueryLeaseRequest {
    const message = createBaseQueryLeaseRequest();
    message.id = (object.id !== undefined && object.id !== null) ? LeaseID.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseQueryLeaseResponse(): QueryLeaseResponse {
  return { lease: undefined, escrowPayment: undefined };
}

export const QueryLeaseResponse: MessageFns<QueryLeaseResponse, "akash.market.v1beta5.QueryLeaseResponse"> = {
  $type: "akash.market.v1beta5.QueryLeaseResponse" as const,

  encode(message: QueryLeaseResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lease !== undefined) {
      Lease.encode(message.lease, writer.uint32(10).fork()).join();
    }
    if (message.escrowPayment !== undefined) {
      Payment.encode(message.escrowPayment, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryLeaseResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryLeaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.lease = Lease.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.escrowPayment = Payment.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryLeaseResponse {
    return {
      lease: isSet(object.lease) ? Lease.fromJSON(object.lease) : undefined,
      escrowPayment: isSet(object.escrow_payment) ? Payment.fromJSON(object.escrow_payment) : undefined,
    };
  },

  toJSON(message: QueryLeaseResponse): unknown {
    const obj: any = {};
    if (message.lease !== undefined) {
      obj.lease = Lease.toJSON(message.lease);
    }
    if (message.escrowPayment !== undefined) {
      obj.escrow_payment = Payment.toJSON(message.escrowPayment);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryLeaseResponse>): QueryLeaseResponse {
    return QueryLeaseResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryLeaseResponse>): QueryLeaseResponse {
    const message = createBaseQueryLeaseResponse();
    message.lease = (object.lease !== undefined && object.lease !== null) ? Lease.fromPartial(object.lease) : undefined;
    message.escrowPayment = (object.escrowPayment !== undefined && object.escrowPayment !== null)
      ? Payment.fromPartial(object.escrowPayment)
      : undefined;
    return message;
  },
};

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest, "akash.market.v1beta5.QueryParamsRequest"> = {
  $type: "akash.market.v1beta5.QueryParamsRequest" as const,

  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse, "akash.market.v1beta5.QueryParamsResponse"> = {
  $type: "akash.market.v1beta5.QueryParamsResponse" as const,

  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type _unused_DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function _unused_isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface _unused_MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
