// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/provider/v1beta4/provider.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Attribute } from "../../base/attributes/v1/attribute.ts";
import Long = require("long");

export const protobufPackage = "akash.provider.v1beta4";

/** Info contains information on the provider. */
export interface Info {
  /** Email is the email address to contact the provider. */
  email: string;
  /** Website is the URL to the landing page or socials of the provider. */
  website: string;
}

/**
 * Provider stores owner and host details.
 * Akash providers are entities that contribute computing resources to the network.
 * They can be individuals or organizations with underutilized computing resources, such as data centers or personal servers.
 * Providers participate in the network by running the Akash node software and setting the price for their services.
 * Users can then choose a provider based on factors such as cost, performance, and location.
 */
export interface Provider {
  /**
   * Owner is the bech32 address of the account of the provider.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   */
  owner: string;
  /**
   * HostURI is the Uniform Resource Identifier for provider connection.
   * This URI is used to directly connect to the provider to perform tasks such as sending the manifest.
   */
  hostUri: string;
  /** Attributes is a list of arbitrary attribute key-value pairs. */
  attributes: Attribute[];
  /** Info contains additional provider information. */
  info: Info | undefined;
}

function createBaseInfo(): Info {
  return { email: "", website: "" };
}

export const Info: MessageFns<Info, "akash.provider.v1beta4.Info"> = {
  $type: "akash.provider.v1beta4.Info" as const,

  encode(message: Info, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.website !== "") {
      writer.uint32(18).string(message.website);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Info {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.website = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Info {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      website: isSet(object.website) ? globalThis.String(object.website) : "",
    };
  },

  toJSON(message: Info): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.website !== "") {
      obj.website = message.website;
    }
    return obj;
  },

  create(base?: DeepPartial<Info>): Info {
    return Info.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Info>): Info {
    const message = createBaseInfo();
    message.email = object.email ?? "";
    message.website = object.website ?? "";
    return message;
  },
};

function createBaseProvider(): Provider {
  return { owner: "", hostUri: "", attributes: [], info: undefined };
}

export const Provider: MessageFns<Provider, "akash.provider.v1beta4.Provider"> = {
  $type: "akash.provider.v1beta4.Provider" as const,

  encode(message: Provider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.hostUri !== "") {
      writer.uint32(18).string(message.hostUri);
    }
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.info !== undefined) {
      Info.encode(message.info, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Provider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.hostUri = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.info = Info.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Provider {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      hostUri: isSet(object.hostUri) ? globalThis.String(object.hostUri) : "",
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => Attribute.fromJSON(e))
        : [],
      info: isSet(object.info) ? Info.fromJSON(object.info) : undefined,
    };
  },

  toJSON(message: Provider): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.hostUri !== "") {
      obj.hostUri = message.hostUri;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    if (message.info !== undefined) {
      obj.info = Info.toJSON(message.info);
    }
    return obj;
  },

  create(base?: DeepPartial<Provider>): Provider {
    return Provider.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Provider>): Provider {
    const message = createBaseProvider();
    message.owner = object.owner ?? "";
    message.hostUri = object.hostUri ?? "";
    message.attributes = object.attributes?.map((e) => Attribute.fromPartial(e)) || [];
    message.info = (object.info !== undefined && object.info !== null) ? Info.fromPartial(object.info) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
