// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/provider/v1beta4/msg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Attribute } from "../../base/attributes/v1/attribute.ts";
import { Info } from "./provider.ts";
import Long = require("long");

export const protobufPackage = "akash.provider.v1beta4";

/** MsgCreateProvider defines an SDK message for creating a provider. */
export interface MsgCreateProvider {
  /**
   * Owner is the bech32 address of the account of the provider.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   */
  owner: string;
  /**
   * HostURI is the Uniform Resource Identifier for provider connection.
   * This URI is used to directly connect to the provider to perform tasks such as sending the manifest.
   */
  hostUri: string;
  /** Attributes is a list of arbitrary attribute key-value pairs. */
  attributes: Attribute[];
  /** Info contains additional provider information. */
  info: Info | undefined;
}

/** MsgCreateProviderResponse defines the Msg/CreateProvider response type. */
export interface MsgCreateProviderResponse {
}

/** MsgUpdateProvider defines an SDK message for updating a provider */
export interface MsgUpdateProvider {
  owner: string;
  hostUri: string;
  attributes: Attribute[];
  info: Info | undefined;
}

/** MsgUpdateProviderResponse defines the Msg/UpdateProvider response type. */
export interface MsgUpdateProviderResponse {
}

/** MsgDeleteProvider defines an SDK message for deleting a provider */
export interface MsgDeleteProvider {
  owner: string;
}

/** MsgDeleteProviderResponse defines the Msg/DeleteProvider response type. */
export interface MsgDeleteProviderResponse {
}

function createBaseMsgCreateProvider(): MsgCreateProvider {
  return { owner: "", hostUri: "", attributes: [], info: undefined };
}

export const MsgCreateProvider: MessageFns<MsgCreateProvider, "akash.provider.v1beta4.MsgCreateProvider"> = {
  $type: "akash.provider.v1beta4.MsgCreateProvider" as const,

  encode(message: MsgCreateProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.hostUri !== "") {
      writer.uint32(18).string(message.hostUri);
    }
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.info !== undefined) {
      Info.encode(message.info, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.hostUri = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.info = Info.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateProvider {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      hostUri: isSet(object.hostUri) ? globalThis.String(object.hostUri) : "",
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => Attribute.fromJSON(e))
        : [],
      info: isSet(object.info) ? Info.fromJSON(object.info) : undefined,
    };
  },

  toJSON(message: MsgCreateProvider): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.hostUri !== "") {
      obj.hostUri = message.hostUri;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    if (message.info !== undefined) {
      obj.info = Info.toJSON(message.info);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCreateProvider>): MsgCreateProvider {
    return MsgCreateProvider.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCreateProvider>): MsgCreateProvider {
    const message = createBaseMsgCreateProvider();
    message.owner = object.owner ?? "";
    message.hostUri = object.hostUri ?? "";
    message.attributes = object.attributes?.map((e) => Attribute.fromPartial(e)) || [];
    message.info = (object.info !== undefined && object.info !== null) ? Info.fromPartial(object.info) : undefined;
    return message;
  },
};

function createBaseMsgCreateProviderResponse(): MsgCreateProviderResponse {
  return {};
}

export const MsgCreateProviderResponse: MessageFns<
  MsgCreateProviderResponse,
  "akash.provider.v1beta4.MsgCreateProviderResponse"
> = {
  $type: "akash.provider.v1beta4.MsgCreateProviderResponse" as const,

  encode(_: MsgCreateProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateProviderResponse {
    return {};
  },

  toJSON(_: MsgCreateProviderResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgCreateProviderResponse>): MsgCreateProviderResponse {
    return MsgCreateProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgCreateProviderResponse>): MsgCreateProviderResponse {
    const message = createBaseMsgCreateProviderResponse();
    return message;
  },
};

function createBaseMsgUpdateProvider(): MsgUpdateProvider {
  return { owner: "", hostUri: "", attributes: [], info: undefined };
}

export const MsgUpdateProvider: MessageFns<MsgUpdateProvider, "akash.provider.v1beta4.MsgUpdateProvider"> = {
  $type: "akash.provider.v1beta4.MsgUpdateProvider" as const,

  encode(message: MsgUpdateProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.hostUri !== "") {
      writer.uint32(18).string(message.hostUri);
    }
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.info !== undefined) {
      Info.encode(message.info, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.hostUri = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.info = Info.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateProvider {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      hostUri: isSet(object.hostUri) ? globalThis.String(object.hostUri) : "",
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => Attribute.fromJSON(e))
        : [],
      info: isSet(object.info) ? Info.fromJSON(object.info) : undefined,
    };
  },

  toJSON(message: MsgUpdateProvider): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.hostUri !== "") {
      obj.hostUri = message.hostUri;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    if (message.info !== undefined) {
      obj.info = Info.toJSON(message.info);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateProvider>): MsgUpdateProvider {
    return MsgUpdateProvider.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUpdateProvider>): MsgUpdateProvider {
    const message = createBaseMsgUpdateProvider();
    message.owner = object.owner ?? "";
    message.hostUri = object.hostUri ?? "";
    message.attributes = object.attributes?.map((e) => Attribute.fromPartial(e)) || [];
    message.info = (object.info !== undefined && object.info !== null) ? Info.fromPartial(object.info) : undefined;
    return message;
  },
};

function createBaseMsgUpdateProviderResponse(): MsgUpdateProviderResponse {
  return {};
}

export const MsgUpdateProviderResponse: MessageFns<
  MsgUpdateProviderResponse,
  "akash.provider.v1beta4.MsgUpdateProviderResponse"
> = {
  $type: "akash.provider.v1beta4.MsgUpdateProviderResponse" as const,

  encode(_: MsgUpdateProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateProviderResponse {
    return {};
  },

  toJSON(_: MsgUpdateProviderResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateProviderResponse>): MsgUpdateProviderResponse {
    return MsgUpdateProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgUpdateProviderResponse>): MsgUpdateProviderResponse {
    const message = createBaseMsgUpdateProviderResponse();
    return message;
  },
};

function createBaseMsgDeleteProvider(): MsgDeleteProvider {
  return { owner: "" };
}

export const MsgDeleteProvider: MessageFns<MsgDeleteProvider, "akash.provider.v1beta4.MsgDeleteProvider"> = {
  $type: "akash.provider.v1beta4.MsgDeleteProvider" as const,

  encode(message: MsgDeleteProvider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteProvider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteProvider {
    return { owner: isSet(object.owner) ? globalThis.String(object.owner) : "" };
  },

  toJSON(message: MsgDeleteProvider): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgDeleteProvider>): MsgDeleteProvider {
    return MsgDeleteProvider.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgDeleteProvider>): MsgDeleteProvider {
    const message = createBaseMsgDeleteProvider();
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseMsgDeleteProviderResponse(): MsgDeleteProviderResponse {
  return {};
}

export const MsgDeleteProviderResponse: MessageFns<
  MsgDeleteProviderResponse,
  "akash.provider.v1beta4.MsgDeleteProviderResponse"
> = {
  $type: "akash.provider.v1beta4.MsgDeleteProviderResponse" as const,

  encode(_: MsgDeleteProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteProviderResponse {
    return {};
  },

  toJSON(_: MsgDeleteProviderResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgDeleteProviderResponse>): MsgDeleteProviderResponse {
    return MsgDeleteProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgDeleteProviderResponse>): MsgDeleteProviderResponse {
    const message = createBaseMsgDeleteProviderResponse();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
