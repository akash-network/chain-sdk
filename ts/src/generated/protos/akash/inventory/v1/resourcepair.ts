// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/inventory/v1/resourcepair.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Quantity } from "../../../k8s.io/apimachinery/pkg/api/resource/generated.ts";
import { Attribute } from "../../base/attributes/v1/attribute.ts";
import Long = require("long");

export const protobufPackage = "akash.inventory.v1";

/** ResourcePair to extents resource.Quantity to provide total and available units of the resource */
export interface ResourcePair {
  allocatable: Quantity | undefined;
  allocated: Quantity | undefined;
  attributes: Attribute[];
  capacity: Quantity | undefined;
}

function createBaseResourcePair(): ResourcePair {
  return { allocatable: undefined, allocated: undefined, attributes: [], capacity: undefined };
}

export const ResourcePair: MessageFns<ResourcePair, "akash.inventory.v1.ResourcePair"> = {
  $type: "akash.inventory.v1.ResourcePair" as const,

  encode(message: ResourcePair, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.allocatable !== undefined) {
      Quantity.encode(message.allocatable, writer.uint32(10).fork()).join();
    }
    if (message.allocated !== undefined) {
      Quantity.encode(message.allocated, writer.uint32(18).fork()).join();
    }
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.capacity !== undefined) {
      Quantity.encode(message.capacity, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourcePair {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourcePair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.allocatable = Quantity.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.allocated = Quantity.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.capacity = Quantity.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourcePair {
    return {
      allocatable: isSet(object.allocatable) ? Quantity.fromJSON(object.allocatable) : undefined,
      allocated: isSet(object.allocated) ? Quantity.fromJSON(object.allocated) : undefined,
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => Attribute.fromJSON(e))
        : [],
      capacity: isSet(object.capacity) ? Quantity.fromJSON(object.capacity) : undefined,
    };
  },

  toJSON(message: ResourcePair): unknown {
    const obj: any = {};
    if (message.allocatable !== undefined) {
      obj.allocatable = Quantity.toJSON(message.allocatable);
    }
    if (message.allocated !== undefined) {
      obj.allocated = Quantity.toJSON(message.allocated);
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    if (message.capacity !== undefined) {
      obj.capacity = Quantity.toJSON(message.capacity);
    }
    return obj;
  },

  create(base?: DeepPartial<ResourcePair>): ResourcePair {
    return ResourcePair.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResourcePair>): ResourcePair {
    const message = createBaseResourcePair();
    message.allocatable = (object.allocatable !== undefined && object.allocatable !== null)
      ? Quantity.fromPartial(object.allocatable)
      : undefined;
    message.allocated = (object.allocated !== undefined && object.allocated !== null)
      ? Quantity.fromPartial(object.allocated)
      : undefined;
    message.attributes = object.attributes?.map((e) => Attribute.fromPartial(e)) || [];
    message.capacity = (object.capacity !== undefined && object.capacity !== null)
      ? Quantity.fromPartial(object.capacity)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
