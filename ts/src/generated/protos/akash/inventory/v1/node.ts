// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/inventory/v1/node.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { NodeResources } from "./resources.ts";

export const protobufPackage = "akash.inventory.v1";

/** NodeCapabilities extended list of node capabilities */
export interface NodeCapabilities {
  storageClasses: string[];
}

/** Node reports node inventory details */
export interface Node {
  name: string;
  resources: NodeResources | undefined;
  capabilities: NodeCapabilities | undefined;
}

function createBaseNodeCapabilities(): NodeCapabilities {
  return { storageClasses: [] };
}

export const NodeCapabilities: MessageFns<NodeCapabilities, "akash.inventory.v1.NodeCapabilities"> = {
  $type: "akash.inventory.v1.NodeCapabilities" as const,

  encode(message: NodeCapabilities, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.storageClasses) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NodeCapabilities {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNodeCapabilities();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.storageClasses.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NodeCapabilities {
    return {
      storageClasses: globalThis.Array.isArray(object?.storage_classes)
        ? object.storage_classes.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: NodeCapabilities): unknown {
    const obj: any = {};
    if (message.storageClasses?.length) {
      obj.storage_classes = message.storageClasses;
    }
    return obj;
  },

  create(base?: DeepPartial<NodeCapabilities>): NodeCapabilities {
    return NodeCapabilities.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NodeCapabilities>): NodeCapabilities {
    const message = createBaseNodeCapabilities();
    message.storageClasses = object.storageClasses?.map((e) => e) || [];
    return message;
  },
};

function createBaseNode(): Node {
  return { name: "", resources: undefined, capabilities: undefined };
}

export const Node: MessageFns<Node, "akash.inventory.v1.Node"> = {
  $type: "akash.inventory.v1.Node" as const,

  encode(message: Node, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.resources !== undefined) {
      NodeResources.encode(message.resources, writer.uint32(18).fork()).join();
    }
    if (message.capabilities !== undefined) {
      NodeCapabilities.encode(message.capabilities, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Node {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.resources = NodeResources.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.capabilities = NodeCapabilities.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Node {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      resources: isSet(object.resources) ? NodeResources.fromJSON(object.resources) : undefined,
      capabilities: isSet(object.capabilities) ? NodeCapabilities.fromJSON(object.capabilities) : undefined,
    };
  },

  toJSON(message: Node): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.resources !== undefined) {
      obj.resources = NodeResources.toJSON(message.resources);
    }
    if (message.capabilities !== undefined) {
      obj.capabilities = NodeCapabilities.toJSON(message.capabilities);
    }
    return obj;
  },

  create(base?: DeepPartial<Node>): Node {
    return Node.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Node>): Node {
    const message = createBaseNode();
    message.name = object.name ?? "";
    message.resources = (object.resources !== undefined && object.resources !== null)
      ? NodeResources.fromPartial(object.resources)
      : undefined;
    message.capabilities = (object.capabilities !== undefined && object.capabilities !== null)
      ? NodeCapabilities.fromPartial(object.capabilities)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
