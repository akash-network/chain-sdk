// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/base/deposit/v1/deposit.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../../../cosmos/base/v1beta1/coin.ts";
import Long = require("long");

export const protobufPackage = "akash.base.deposit.v1";

/** Source is an enum which lists source of funds for deployment deposit. */
export enum Source {
  /** invalid - Prefix should start with 0 in enum. So declaring dummy state. */
  invalid = 0,
  /** balance - DepositSourceBalance denotes account balance as source of funds */
  balance = 1,
  /** grant - DepositSourceGrant denotes authz grants as source of funds */
  grant = 2,
  UNRECOGNIZED = -1,
}

export function sourceFromJSON(object: any): Source {
  switch (object) {
    case 0:
    case "invalid":
      return Source.invalid;
    case 1:
    case "balance":
      return Source.balance;
    case 2:
    case "grant":
      return Source.grant;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Source.UNRECOGNIZED;
  }
}

export function sourceToJSON(object: Source): string {
  switch (object) {
    case Source.invalid:
      return "invalid";
    case Source.balance:
      return "balance";
    case Source.grant:
      return "grant";
    case Source.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Deposit is a data type used by MsgCreateDeployment, MsgDepositDeployment and MsgCreateBid to indicate source of the deposit. */
export interface Deposit {
  /** Deposit specifies the amount of coins to include in the deployment's first deposit. */
  amount:
    | Coin
    | undefined;
  /** Sources is the set of deposit sources, each entry must be unique. */
  sources: Source[];
}

function createBaseDeposit(): Deposit {
  return { amount: undefined, sources: [] };
}

export const Deposit: MessageFns<Deposit, "akash.base.deposit.v1.Deposit"> = {
  $type: "akash.base.deposit.v1.Deposit" as const,

  encode(message: Deposit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(10).fork()).join();
    }
    for (const v of message.sources) {
      writer.uint32(40).int32(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Deposit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeposit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag === 40) {
            message.sources.push(reader.int32() as any);

            continue;
          }

          if (tag === 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.sources.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Deposit {
    return {
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
      sources: globalThis.Array.isArray(object?.sources) ? object.sources.map((e: any) => sourceFromJSON(e)) : [],
    };
  },

  toJSON(message: Deposit): unknown {
    const obj: any = {};
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    if (message.sources?.length) {
      obj.sources = message.sources.map((e) => sourceToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Deposit>): Deposit {
    return Deposit.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Deposit>): Deposit {
    const message = createBaseDeposit();
    message.amount = (object.amount !== undefined && object.amount !== null)
      ? Coin.fromPartial(object.amount)
      : undefined;
    message.sources = object.sources?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
