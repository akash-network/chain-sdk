// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/deployment/v1beta4/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination.ts";
import { Account } from "../../escrow/types/v1/account.ts";
import { Deployment, DeploymentID } from "../v1/deployment.ts";
import { GroupID } from "../v1/group.ts";
import { DeploymentFilters } from "./filters.ts";
import { Group } from "./group.ts";
import { Params } from "./params.ts";
import Long = require("long");

export const protobufPackage = "akash.deployment.v1beta4";

/** QueryDeploymentsRequest is request type for the Query/Deployments RPC method. */
export interface QueryDeploymentsRequest {
  /** Filters holds the deployment fields to filter the request. */
  filters:
    | DeploymentFilters
    | undefined;
  /** Pagination is used to paginate the request. */
  pagination: PageRequest | undefined;
}

/** QueryDeploymentsResponse is response type for the Query/Deployments RPC method */
export interface QueryDeploymentsResponse {
  /** Deployments is a list of Deployments. */
  deployments: QueryDeploymentResponse[];
  /** Pagination contains the information about response pagination. */
  pagination: PageResponse | undefined;
}

/** QueryDeploymentRequest is request type for the Query/Deployment RPC method. */
export interface QueryDeploymentRequest {
  /** Id is the unique identifier of the deployment. */
  id: DeploymentID | undefined;
}

/** QueryDeploymentResponse is response type for the Query/Deployment RPC method */
export interface QueryDeploymentResponse {
  /** Deployment represents a deployment on the network. */
  deployment:
    | Deployment
    | undefined;
  /** Groups is a list of deployment groups. */
  groups: Group[];
  /**
   * EscrowAccount represents an escrow mechanism where funds are held.
   * This ensures that obligations of both tenants and providers involved in the
   * transaction are met without direct access to each other's accounts.
   */
  escrowAccount: Account | undefined;
}

/** QueryGroupRequest is request type for the Query/Group RPC method. */
export interface QueryGroupRequest {
  /** Id is the unique identifier of the Group. */
  id: GroupID | undefined;
}

/** QueryGroupResponse is response type for the Query/Group RPC method. */
export interface QueryGroupResponse {
  /** Group holds a deployment Group. */
  group: Group | undefined;
}

/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params defines the parameters of the module. */
  params: Params | undefined;
}

function createBaseQueryDeploymentsRequest(): QueryDeploymentsRequest {
  return { filters: undefined, pagination: undefined };
}

export const QueryDeploymentsRequest: MessageFns<
  QueryDeploymentsRequest,
  "akash.deployment.v1beta4.QueryDeploymentsRequest"
> = {
  $type: "akash.deployment.v1beta4.QueryDeploymentsRequest" as const,

  encode(message: QueryDeploymentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filters !== undefined) {
      DeploymentFilters.encode(message.filters, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDeploymentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDeploymentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filters = DeploymentFilters.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDeploymentsRequest {
    return {
      filters: isSet(object.filters) ? DeploymentFilters.fromJSON(object.filters) : undefined,
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDeploymentsRequest): unknown {
    const obj: any = {};
    if (message.filters !== undefined) {
      obj.filters = DeploymentFilters.toJSON(message.filters);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDeploymentsRequest>): QueryDeploymentsRequest {
    return QueryDeploymentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDeploymentsRequest>): QueryDeploymentsRequest {
    const message = createBaseQueryDeploymentsRequest();
    message.filters = (object.filters !== undefined && object.filters !== null)
      ? DeploymentFilters.fromPartial(object.filters)
      : undefined;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDeploymentsResponse(): QueryDeploymentsResponse {
  return { deployments: [], pagination: undefined };
}

export const QueryDeploymentsResponse: MessageFns<
  QueryDeploymentsResponse,
  "akash.deployment.v1beta4.QueryDeploymentsResponse"
> = {
  $type: "akash.deployment.v1beta4.QueryDeploymentsResponse" as const,

  encode(message: QueryDeploymentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deployments) {
      QueryDeploymentResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDeploymentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDeploymentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deployments.push(QueryDeploymentResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDeploymentsResponse {
    return {
      deployments: globalThis.Array.isArray(object?.deployments)
        ? object.deployments.map((e: any) => QueryDeploymentResponse.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryDeploymentsResponse): unknown {
    const obj: any = {};
    if (message.deployments?.length) {
      obj.deployments = message.deployments.map((e) => QueryDeploymentResponse.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDeploymentsResponse>): QueryDeploymentsResponse {
    return QueryDeploymentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDeploymentsResponse>): QueryDeploymentsResponse {
    const message = createBaseQueryDeploymentsResponse();
    message.deployments = object.deployments?.map((e) => QueryDeploymentResponse.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryDeploymentRequest(): QueryDeploymentRequest {
  return { id: undefined };
}

export const QueryDeploymentRequest: MessageFns<
  QueryDeploymentRequest,
  "akash.deployment.v1beta4.QueryDeploymentRequest"
> = {
  $type: "akash.deployment.v1beta4.QueryDeploymentRequest" as const,

  encode(message: QueryDeploymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      DeploymentID.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDeploymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDeploymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = DeploymentID.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDeploymentRequest {
    return { id: isSet(object.id) ? DeploymentID.fromJSON(object.id) : undefined };
  },

  toJSON(message: QueryDeploymentRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = DeploymentID.toJSON(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDeploymentRequest>): QueryDeploymentRequest {
    return QueryDeploymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDeploymentRequest>): QueryDeploymentRequest {
    const message = createBaseQueryDeploymentRequest();
    message.id = (object.id !== undefined && object.id !== null) ? DeploymentID.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseQueryDeploymentResponse(): QueryDeploymentResponse {
  return { deployment: undefined, groups: [], escrowAccount: undefined };
}

export const QueryDeploymentResponse: MessageFns<
  QueryDeploymentResponse,
  "akash.deployment.v1beta4.QueryDeploymentResponse"
> = {
  $type: "akash.deployment.v1beta4.QueryDeploymentResponse" as const,

  encode(message: QueryDeploymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployment !== undefined) {
      Deployment.encode(message.deployment, writer.uint32(10).fork()).join();
    }
    for (const v of message.groups) {
      Group.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.escrowAccount !== undefined) {
      Account.encode(message.escrowAccount, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryDeploymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryDeploymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deployment = Deployment.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.groups.push(Group.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.escrowAccount = Account.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryDeploymentResponse {
    return {
      deployment: isSet(object.deployment) ? Deployment.fromJSON(object.deployment) : undefined,
      groups: globalThis.Array.isArray(object?.groups) ? object.groups.map((e: any) => Group.fromJSON(e)) : [],
      escrowAccount: isSet(object.escrowAccount) ? Account.fromJSON(object.escrowAccount) : undefined,
    };
  },

  toJSON(message: QueryDeploymentResponse): unknown {
    const obj: any = {};
    if (message.deployment !== undefined) {
      obj.deployment = Deployment.toJSON(message.deployment);
    }
    if (message.groups?.length) {
      obj.groups = message.groups.map((e) => Group.toJSON(e));
    }
    if (message.escrowAccount !== undefined) {
      obj.escrowAccount = Account.toJSON(message.escrowAccount);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryDeploymentResponse>): QueryDeploymentResponse {
    return QueryDeploymentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryDeploymentResponse>): QueryDeploymentResponse {
    const message = createBaseQueryDeploymentResponse();
    message.deployment = (object.deployment !== undefined && object.deployment !== null)
      ? Deployment.fromPartial(object.deployment)
      : undefined;
    message.groups = object.groups?.map((e) => Group.fromPartial(e)) || [];
    message.escrowAccount = (object.escrowAccount !== undefined && object.escrowAccount !== null)
      ? Account.fromPartial(object.escrowAccount)
      : undefined;
    return message;
  },
};

function createBaseQueryGroupRequest(): QueryGroupRequest {
  return { id: undefined };
}

export const QueryGroupRequest: MessageFns<QueryGroupRequest, "akash.deployment.v1beta4.QueryGroupRequest"> = {
  $type: "akash.deployment.v1beta4.QueryGroupRequest" as const,

  encode(message: QueryGroupRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      GroupID.encode(message.id, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGroupRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGroupRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = GroupID.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGroupRequest {
    return { id: isSet(object.id) ? GroupID.fromJSON(object.id) : undefined };
  },

  toJSON(message: QueryGroupRequest): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = GroupID.toJSON(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGroupRequest>): QueryGroupRequest {
    return QueryGroupRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGroupRequest>): QueryGroupRequest {
    const message = createBaseQueryGroupRequest();
    message.id = (object.id !== undefined && object.id !== null) ? GroupID.fromPartial(object.id) : undefined;
    return message;
  },
};

function createBaseQueryGroupResponse(): QueryGroupResponse {
  return { group: undefined };
}

export const QueryGroupResponse: MessageFns<QueryGroupResponse, "akash.deployment.v1beta4.QueryGroupResponse"> = {
  $type: "akash.deployment.v1beta4.QueryGroupResponse" as const,

  encode(message: QueryGroupResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.group !== undefined) {
      Group.encode(message.group, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGroupResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGroupResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.group = Group.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGroupResponse {
    return { group: isSet(object.group) ? Group.fromJSON(object.group) : undefined };
  },

  toJSON(message: QueryGroupResponse): unknown {
    const obj: any = {};
    if (message.group !== undefined) {
      obj.group = Group.toJSON(message.group);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryGroupResponse>): QueryGroupResponse {
    return QueryGroupResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryGroupResponse>): QueryGroupResponse {
    const message = createBaseQueryGroupResponse();
    message.group = (object.group !== undefined && object.group !== null) ? Group.fromPartial(object.group) : undefined;
    return message;
  },
};

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest, "akash.deployment.v1beta4.QueryParamsRequest"> = {
  $type: "akash.deployment.v1beta4.QueryParamsRequest" as const,

  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse, "akash.deployment.v1beta4.QueryParamsResponse"> = {
  $type: "akash.deployment.v1beta4.QueryParamsResponse" as const,

  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
