import { isSet } from "../../../../../encoding/typeEncodingHelpers.ts"
import type { DeepPartial, MessageFns } from "../../../../../encoding/typeEncodingHelpers.ts"
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/deployment/v1beta4/groupspec.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PlacementRequirements } from "../../base/attributes/v1/attribute.ts";
import { ResourceUnit } from "./resourceunit.ts";

/**
 * GroupSpec defines a specification for a group in a deployment on the network.
 * This includes attributes like the group name, placement requirements, and resource units.
 */
export interface GroupSpec {
  /** Name is the name of the group. */
  name: string;
  /**
   * Requirements specifies the placement requirements for the group.
   * This determines where the resources in the group can be deployed.
   */
  requirements:
    | PlacementRequirements
    | undefined;
  /**
   * Resources is a list containing the resource units allocated to the group.
   * Each ResourceUnit defines the specific resources (e.g., CPU, memory) assigned.
   */
  resources: ResourceUnit[];
}

function createBaseGroupSpec(): GroupSpec {
  return { name: "", requirements: undefined, resources: [] };
}

export const GroupSpec: MessageFns<GroupSpec, "akash.deployment.v1beta4.GroupSpec"> = {
  $type: "akash.deployment.v1beta4.GroupSpec" as const,

  encode(message: GroupSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.requirements !== undefined) {
      PlacementRequirements.encode(message.requirements, writer.uint32(18).fork()).join();
    }
    for (const v of message.resources) {
      ResourceUnit.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GroupSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGroupSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.requirements = PlacementRequirements.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resources.push(ResourceUnit.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GroupSpec {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      requirements: isSet(object.requirements) ? PlacementRequirements.fromJSON(object.requirements) : undefined,
      resources: globalThis.Array.isArray(object?.resources)
        ? object.resources.map((e: any) => ResourceUnit.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GroupSpec): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.requirements !== undefined) {
      obj.requirements = PlacementRequirements.toJSON(message.requirements);
    }
    if (message.resources?.length) {
      obj.resources = message.resources.map((e) => ResourceUnit.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GroupSpec>): GroupSpec {
    return GroupSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GroupSpec>): GroupSpec {
    const message = createBaseGroupSpec();
    message.name = object.name ?? "";
    message.requirements = (object.requirements !== undefined && object.requirements !== null)
      ? PlacementRequirements.fromPartial(object.requirements)
      : undefined;
    message.resources = object.resources?.map((e) => ResourceUnit.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type _unused_DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function _unused_isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface _unused_MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
