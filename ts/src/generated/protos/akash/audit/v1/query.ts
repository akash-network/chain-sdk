// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/audit/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination.ts";
import { AuditedProvider } from "./audit.ts";

export const protobufPackage = "akash.audit.v1";

/** QueryProvidersResponse is response type for the Query/Providers RPC method. */
export interface QueryProvidersResponse {
  /** Providers contains a list of audited providers account addresses. */
  providers: AuditedProvider[];
  /** Pagination is used to paginate results. */
  pagination: PageResponse | undefined;
}

/** QueryProviderRequest is request type for the Query/Provider RPC method */
export interface QueryProviderRequest {
  /**
   * Auditor is the account address of the auditor.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   */
  auditor: string;
  /**
   * Owner is the account bech32 address of the provider.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   */
  owner: string;
}

/** QueryAllProvidersAttributesRequest is request type for the Query/All Providers RPC method. */
export interface QueryAllProvidersAttributesRequest {
  /** Pagination is used to paginate the request. */
  pagination: PageRequest | undefined;
}

/** QueryProviderAttributesRequest is request type for the Query/Provider RPC method. */
export interface QueryProviderAttributesRequest {
  /**
   * Owner is the account bech32 address of the provider.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   */
  owner: string;
  /** Pagination is used to paginate the request. */
  pagination: PageRequest | undefined;
}

/** QueryProviderAuditorRequest is request type for the Query/Providers RPC method. */
export interface QueryProviderAuditorRequest {
  /**
   * Auditor is the account address of the auditor.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   */
  auditor: string;
  /**
   * Owner is the account bech32 address of the provider.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   */
  owner: string;
}

/** QueryAuditorAttributesRequest is request type for the Query/Providers RPC method. */
export interface QueryAuditorAttributesRequest {
  /**
   * Auditor is the account address of the auditor.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   */
  auditor: string;
  /** Pagination is used to paginate the request. */
  pagination: PageRequest | undefined;
}

function createBaseQueryProvidersResponse(): QueryProvidersResponse {
  return { providers: [], pagination: undefined };
}

export const QueryProvidersResponse: MessageFns<QueryProvidersResponse, "akash.audit.v1.QueryProvidersResponse"> = {
  $type: "akash.audit.v1.QueryProvidersResponse" as const,

  encode(message: QueryProvidersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.providers) {
      AuditedProvider.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryProvidersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.providers.push(AuditedProvider.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryProvidersResponse {
    return {
      providers: globalThis.Array.isArray(object?.providers)
        ? object.providers.map((e: any) => AuditedProvider.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryProvidersResponse): unknown {
    const obj: any = {};
    if (message.providers?.length) {
      obj.providers = message.providers.map((e) => AuditedProvider.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryProvidersResponse>): QueryProvidersResponse {
    return QueryProvidersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryProvidersResponse>): QueryProvidersResponse {
    const message = createBaseQueryProvidersResponse();
    message.providers = object.providers?.map((e) => AuditedProvider.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryProviderRequest(): QueryProviderRequest {
  return { auditor: "", owner: "" };
}

export const QueryProviderRequest: MessageFns<QueryProviderRequest, "akash.audit.v1.QueryProviderRequest"> = {
  $type: "akash.audit.v1.QueryProviderRequest" as const,

  encode(message: QueryProviderRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.auditor !== "") {
      writer.uint32(10).string(message.auditor);
    }
    if (message.owner !== "") {
      writer.uint32(18).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryProviderRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryProviderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.auditor = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryProviderRequest {
    return {
      auditor: isSet(object.auditor) ? globalThis.String(object.auditor) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: QueryProviderRequest): unknown {
    const obj: any = {};
    if (message.auditor !== "") {
      obj.auditor = message.auditor;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryProviderRequest>): QueryProviderRequest {
    return QueryProviderRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryProviderRequest>): QueryProviderRequest {
    const message = createBaseQueryProviderRequest();
    message.auditor = object.auditor ?? "";
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseQueryAllProvidersAttributesRequest(): QueryAllProvidersAttributesRequest {
  return { pagination: undefined };
}

export const QueryAllProvidersAttributesRequest: MessageFns<
  QueryAllProvidersAttributesRequest,
  "akash.audit.v1.QueryAllProvidersAttributesRequest"
> = {
  $type: "akash.audit.v1.QueryAllProvidersAttributesRequest" as const,

  encode(message: QueryAllProvidersAttributesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAllProvidersAttributesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAllProvidersAttributesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAllProvidersAttributesRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryAllProvidersAttributesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAllProvidersAttributesRequest>): QueryAllProvidersAttributesRequest {
    return QueryAllProvidersAttributesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryAllProvidersAttributesRequest>): QueryAllProvidersAttributesRequest {
    const message = createBaseQueryAllProvidersAttributesRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryProviderAttributesRequest(): QueryProviderAttributesRequest {
  return { owner: "", pagination: undefined };
}

export const QueryProviderAttributesRequest: MessageFns<
  QueryProviderAttributesRequest,
  "akash.audit.v1.QueryProviderAttributesRequest"
> = {
  $type: "akash.audit.v1.QueryProviderAttributesRequest" as const,

  encode(message: QueryProviderAttributesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryProviderAttributesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryProviderAttributesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryProviderAttributesRequest {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryProviderAttributesRequest): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryProviderAttributesRequest>): QueryProviderAttributesRequest {
    return QueryProviderAttributesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryProviderAttributesRequest>): QueryProviderAttributesRequest {
    const message = createBaseQueryProviderAttributesRequest();
    message.owner = object.owner ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryProviderAuditorRequest(): QueryProviderAuditorRequest {
  return { auditor: "", owner: "" };
}

export const QueryProviderAuditorRequest: MessageFns<
  QueryProviderAuditorRequest,
  "akash.audit.v1.QueryProviderAuditorRequest"
> = {
  $type: "akash.audit.v1.QueryProviderAuditorRequest" as const,

  encode(message: QueryProviderAuditorRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.auditor !== "") {
      writer.uint32(10).string(message.auditor);
    }
    if (message.owner !== "") {
      writer.uint32(18).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryProviderAuditorRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryProviderAuditorRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.auditor = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryProviderAuditorRequest {
    return {
      auditor: isSet(object.auditor) ? globalThis.String(object.auditor) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: QueryProviderAuditorRequest): unknown {
    const obj: any = {};
    if (message.auditor !== "") {
      obj.auditor = message.auditor;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryProviderAuditorRequest>): QueryProviderAuditorRequest {
    return QueryProviderAuditorRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryProviderAuditorRequest>): QueryProviderAuditorRequest {
    const message = createBaseQueryProviderAuditorRequest();
    message.auditor = object.auditor ?? "";
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseQueryAuditorAttributesRequest(): QueryAuditorAttributesRequest {
  return { auditor: "", pagination: undefined };
}

export const QueryAuditorAttributesRequest: MessageFns<
  QueryAuditorAttributesRequest,
  "akash.audit.v1.QueryAuditorAttributesRequest"
> = {
  $type: "akash.audit.v1.QueryAuditorAttributesRequest" as const,

  encode(message: QueryAuditorAttributesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.auditor !== "") {
      writer.uint32(10).string(message.auditor);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryAuditorAttributesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryAuditorAttributesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.auditor = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryAuditorAttributesRequest {
    return {
      auditor: isSet(object.auditor) ? globalThis.String(object.auditor) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryAuditorAttributesRequest): unknown {
    const obj: any = {};
    if (message.auditor !== "") {
      obj.auditor = message.auditor;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryAuditorAttributesRequest>): QueryAuditorAttributesRequest {
    return QueryAuditorAttributesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryAuditorAttributesRequest>): QueryAuditorAttributesRequest {
    const message = createBaseQueryAuditorAttributesRequest();
    message.auditor = object.auditor ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
