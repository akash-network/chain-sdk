// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/audit/v1/msg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Attribute } from "../../base/attributes/v1/attribute.ts";
import Long = require("long");

export const protobufPackage = "akash.audit.v1";

/** MsgSignProviderAttributes defines an SDK message for signing a provider attributes. */
export interface MsgSignProviderAttributes {
  /**
   * Owner is the account bech32 address of the provider.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   */
  owner: string;
  /**
   * Auditor is the account address of the auditor.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   */
  auditor: string;
  /**
   * Attributes holds a list of key-value pairs of provider attributes to be audited.
   * Attributes are arbitrary values that a provider exposes.
   */
  attributes: Attribute[];
}

/** MsgSignProviderAttributesResponse defines the Msg/CreateProvider response type. */
export interface MsgSignProviderAttributesResponse {
}

/** MsgDeleteProviderAttributes defined the Msg/DeleteProviderAttributes */
export interface MsgDeleteProviderAttributes {
  /**
   * Owner is the account bech32 address of the provider.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   */
  owner: string;
  /**
   * Auditor is the account address of the auditor.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   */
  auditor: string;
  /** Keys holds a list of keys of audited provider attributes to delete from the audit. */
  keys: string[];
}

/** MsgDeleteProviderAttributesResponse defines the Msg/ProviderAttributes response type. */
export interface MsgDeleteProviderAttributesResponse {
}

function createBaseMsgSignProviderAttributes(): MsgSignProviderAttributes {
  return { owner: "", auditor: "", attributes: [] };
}

export const MsgSignProviderAttributes: MessageFns<
  MsgSignProviderAttributes,
  "akash.audit.v1.MsgSignProviderAttributes"
> = {
  $type: "akash.audit.v1.MsgSignProviderAttributes" as const,

  encode(message: MsgSignProviderAttributes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.auditor !== "") {
      writer.uint32(18).string(message.auditor);
    }
    for (const v of message.attributes) {
      Attribute.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSignProviderAttributes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSignProviderAttributes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.auditor = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.attributes.push(Attribute.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSignProviderAttributes {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      auditor: isSet(object.auditor) ? globalThis.String(object.auditor) : "",
      attributes: globalThis.Array.isArray(object?.attributes)
        ? object.attributes.map((e: any) => Attribute.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MsgSignProviderAttributes): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.auditor !== "") {
      obj.auditor = message.auditor;
    }
    if (message.attributes?.length) {
      obj.attributes = message.attributes.map((e) => Attribute.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MsgSignProviderAttributes>): MsgSignProviderAttributes {
    return MsgSignProviderAttributes.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgSignProviderAttributes>): MsgSignProviderAttributes {
    const message = createBaseMsgSignProviderAttributes();
    message.owner = object.owner ?? "";
    message.auditor = object.auditor ?? "";
    message.attributes = object.attributes?.map((e) => Attribute.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMsgSignProviderAttributesResponse(): MsgSignProviderAttributesResponse {
  return {};
}

export const MsgSignProviderAttributesResponse: MessageFns<
  MsgSignProviderAttributesResponse,
  "akash.audit.v1.MsgSignProviderAttributesResponse"
> = {
  $type: "akash.audit.v1.MsgSignProviderAttributesResponse" as const,

  encode(_: MsgSignProviderAttributesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSignProviderAttributesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSignProviderAttributesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSignProviderAttributesResponse {
    return {};
  },

  toJSON(_: MsgSignProviderAttributesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgSignProviderAttributesResponse>): MsgSignProviderAttributesResponse {
    return MsgSignProviderAttributesResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgSignProviderAttributesResponse>): MsgSignProviderAttributesResponse {
    const message = createBaseMsgSignProviderAttributesResponse();
    return message;
  },
};

function createBaseMsgDeleteProviderAttributes(): MsgDeleteProviderAttributes {
  return { owner: "", auditor: "", keys: [] };
}

export const MsgDeleteProviderAttributes: MessageFns<
  MsgDeleteProviderAttributes,
  "akash.audit.v1.MsgDeleteProviderAttributes"
> = {
  $type: "akash.audit.v1.MsgDeleteProviderAttributes" as const,

  encode(message: MsgDeleteProviderAttributes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.auditor !== "") {
      writer.uint32(18).string(message.auditor);
    }
    for (const v of message.keys) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteProviderAttributes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteProviderAttributes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.auditor = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.keys.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeleteProviderAttributes {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      auditor: isSet(object.auditor) ? globalThis.String(object.auditor) : "",
      keys: globalThis.Array.isArray(object?.keys) ? object.keys.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: MsgDeleteProviderAttributes): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.auditor !== "") {
      obj.auditor = message.auditor;
    }
    if (message.keys?.length) {
      obj.keys = message.keys;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgDeleteProviderAttributes>): MsgDeleteProviderAttributes {
    return MsgDeleteProviderAttributes.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgDeleteProviderAttributes>): MsgDeleteProviderAttributes {
    const message = createBaseMsgDeleteProviderAttributes();
    message.owner = object.owner ?? "";
    message.auditor = object.auditor ?? "";
    message.keys = object.keys?.map((e) => e) || [];
    return message;
  },
};

function createBaseMsgDeleteProviderAttributesResponse(): MsgDeleteProviderAttributesResponse {
  return {};
}

export const MsgDeleteProviderAttributesResponse: MessageFns<
  MsgDeleteProviderAttributesResponse,
  "akash.audit.v1.MsgDeleteProviderAttributesResponse"
> = {
  $type: "akash.audit.v1.MsgDeleteProviderAttributesResponse" as const,

  encode(_: MsgDeleteProviderAttributesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeleteProviderAttributesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeleteProviderAttributesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgDeleteProviderAttributesResponse {
    return {};
  },

  toJSON(_: MsgDeleteProviderAttributesResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgDeleteProviderAttributesResponse>): MsgDeleteProviderAttributesResponse {
    return MsgDeleteProviderAttributesResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgDeleteProviderAttributesResponse>): MsgDeleteProviderAttributesResponse {
    const message = createBaseMsgDeleteProviderAttributesResponse();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
