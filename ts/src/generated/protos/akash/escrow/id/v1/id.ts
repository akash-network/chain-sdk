// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/escrow/id/v1/id.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long = require("long");

export const protobufPackage = "akash.escrow.id.v1";

/** Scope is an enum which refers to the account scope */
export enum Scope {
  /** invalid - Prefix should start with 0 in enum. So declaring dummy state. */
  invalid = 0,
  /** deployment - DeploymentActive denotes state for deployment active. */
  deployment = 1,
  /** bid - DeploymentClosed denotes state for deployment closed. */
  bid = 2,
  UNRECOGNIZED = -1,
}

export function scopeFromJSON(object: any): Scope {
  switch (object) {
    case 0:
    case "invalid":
      return Scope.invalid;
    case 1:
    case "deployment":
      return Scope.deployment;
    case 2:
    case "bid":
      return Scope.bid;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Scope.UNRECOGNIZED;
  }
}

export function scopeToJSON(object: Scope): string {
  switch (object) {
    case Scope.invalid:
      return "invalid";
    case Scope.deployment:
      return "deployment";
    case Scope.bid:
      return "bid";
    case Scope.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Account is the account identifier. */
export interface Account {
  scope: Scope;
  xid: string;
}

/** Payment is the payment identifier. */
export interface Payment {
  aid: Account | undefined;
  xid: string;
}

function createBaseAccount(): Account {
  return { scope: 0, xid: "" };
}

export const Account: MessageFns<Account, "akash.escrow.id.v1.Account"> = {
  $type: "akash.escrow.id.v1.Account" as const,

  encode(message: Account, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scope !== 0) {
      writer.uint32(8).int32(message.scope);
    }
    if (message.xid !== "") {
      writer.uint32(18).string(message.xid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Account {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.scope = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.xid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Account {
    return {
      scope: isSet(object.scope) ? scopeFromJSON(object.scope) : 0,
      xid: isSet(object.xid) ? globalThis.String(object.xid) : "",
    };
  },

  toJSON(message: Account): unknown {
    const obj: any = {};
    if (message.scope !== 0) {
      obj.scope = scopeToJSON(message.scope);
    }
    if (message.xid !== "") {
      obj.xid = message.xid;
    }
    return obj;
  },

  create(base?: DeepPartial<Account>): Account {
    return Account.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Account>): Account {
    const message = createBaseAccount();
    message.scope = object.scope ?? 0;
    message.xid = object.xid ?? "";
    return message;
  },
};

function createBasePayment(): Payment {
  return { aid: undefined, xid: "" };
}

export const Payment: MessageFns<Payment, "akash.escrow.id.v1.Payment"> = {
  $type: "akash.escrow.id.v1.Payment" as const,

  encode(message: Payment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.aid !== undefined) {
      Account.encode(message.aid, writer.uint32(10).fork()).join();
    }
    if (message.xid !== "") {
      writer.uint32(18).string(message.xid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Payment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.aid = Account.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.xid = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Payment {
    return {
      aid: isSet(object.aid) ? Account.fromJSON(object.aid) : undefined,
      xid: isSet(object.xid) ? globalThis.String(object.xid) : "",
    };
  },

  toJSON(message: Payment): unknown {
    const obj: any = {};
    if (message.aid !== undefined) {
      obj.aid = Account.toJSON(message.aid);
    }
    if (message.xid !== "") {
      obj.xid = message.xid;
    }
    return obj;
  },

  create(base?: DeepPartial<Payment>): Payment {
    return Payment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Payment>): Payment {
    const message = createBasePayment();
    message.aid = (object.aid !== undefined && object.aid !== null) ? Account.fromPartial(object.aid) : undefined;
    message.xid = object.xid ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
