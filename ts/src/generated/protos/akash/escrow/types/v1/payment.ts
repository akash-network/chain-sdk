import { isSet } from "../../../../../../encoding/typeEncodingHelpers.ts"
import type { DeepPartial, MessageFns } from "../../../../../../encoding/typeEncodingHelpers.ts"
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/escrow/types/v1/payment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Coin, DecCoin } from "../../../../cosmos/base/v1beta1/coin.ts";
import { Payment as Payment1 } from "../../id/v1/id.ts";
import { State, stateFromJSON, stateToJSON } from "./state.ts";

/** Payment stores state for a payment. */
export interface PaymentState {
  /**
   * Owner is the account bech32 address of the user who owns the deployment.
   * It is a string representing a valid bech32 account address.
   *
   * Example:
   *   "akash1..."
   */
  owner: string;
  /** State represents the state of the Payment. */
  state: State;
  /** Rate holds the rate of the Payment. */
  rate:
    | DecCoin
    | undefined;
  /** Balance is the current available coins. */
  balance:
    | DecCoin
    | undefined;
  /** Unsettled is the amount needed to settle payment if account is overdrawn */
  unsettled:
    | DecCoin
    | undefined;
  /** Withdrawn corresponds to the amount of coins withdrawn by the Payment. */
  withdrawn: Coin | undefined;
}

/** Payment */
export interface Payment {
  id: Payment1 | undefined;
  state: PaymentState | undefined;
}

function createBasePaymentState(): PaymentState {
  return { owner: "", state: 0, rate: undefined, balance: undefined, unsettled: undefined, withdrawn: undefined };
}

export const PaymentState: MessageFns<PaymentState, "akash.escrow.types.v1.PaymentState"> = {
  $type: "akash.escrow.types.v1.PaymentState" as const,

  encode(message: PaymentState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    if (message.rate !== undefined) {
      DecCoin.encode(message.rate, writer.uint32(26).fork()).join();
    }
    if (message.balance !== undefined) {
      DecCoin.encode(message.balance, writer.uint32(34).fork()).join();
    }
    if (message.unsettled !== undefined) {
      DecCoin.encode(message.unsettled, writer.uint32(42).fork()).join();
    }
    if (message.withdrawn !== undefined) {
      Coin.encode(message.withdrawn, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.rate = DecCoin.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.balance = DecCoin.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.unsettled = DecCoin.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.withdrawn = Coin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentState {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
      rate: isSet(object.rate) ? DecCoin.fromJSON(object.rate) : undefined,
      balance: isSet(object.balance) ? DecCoin.fromJSON(object.balance) : undefined,
      unsettled: isSet(object.unsettled) ? DecCoin.fromJSON(object.unsettled) : undefined,
      withdrawn: isSet(object.withdrawn) ? Coin.fromJSON(object.withdrawn) : undefined,
    };
  },

  toJSON(message: PaymentState): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    if (message.rate !== undefined) {
      obj.rate = DecCoin.toJSON(message.rate);
    }
    if (message.balance !== undefined) {
      obj.balance = DecCoin.toJSON(message.balance);
    }
    if (message.unsettled !== undefined) {
      obj.unsettled = DecCoin.toJSON(message.unsettled);
    }
    if (message.withdrawn !== undefined) {
      obj.withdrawn = Coin.toJSON(message.withdrawn);
    }
    return obj;
  },

  create(base?: DeepPartial<PaymentState>): PaymentState {
    return PaymentState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PaymentState>): PaymentState {
    const message = createBasePaymentState();
    message.owner = object.owner ?? "";
    message.state = object.state ?? 0;
    message.rate = (object.rate !== undefined && object.rate !== null) ? DecCoin.fromPartial(object.rate) : undefined;
    message.balance = (object.balance !== undefined && object.balance !== null)
      ? DecCoin.fromPartial(object.balance)
      : undefined;
    message.unsettled = (object.unsettled !== undefined && object.unsettled !== null)
      ? DecCoin.fromPartial(object.unsettled)
      : undefined;
    message.withdrawn = (object.withdrawn !== undefined && object.withdrawn !== null)
      ? Coin.fromPartial(object.withdrawn)
      : undefined;
    return message;
  },
};

function createBasePayment(): Payment {
  return { id: undefined, state: undefined };
}

export const Payment: MessageFns<Payment, "akash.escrow.types.v1.Payment"> = {
  $type: "akash.escrow.types.v1.Payment" as const,

  encode(message: Payment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      Payment1.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.state !== undefined) {
      PaymentState.encode(message.state, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Payment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = Payment1.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.state = PaymentState.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Payment {
    return {
      id: isSet(object.id) ? Payment1.fromJSON(object.id) : undefined,
      state: isSet(object.state) ? PaymentState.fromJSON(object.state) : undefined,
    };
  },

  toJSON(message: Payment): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Payment1.toJSON(message.id);
    }
    if (message.state !== undefined) {
      obj.state = PaymentState.toJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Payment>): Payment {
    return Payment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Payment>): Payment {
    const message = createBasePayment();
    message.id = (object.id !== undefined && object.id !== null) ? Payment1.fromPartial(object.id) : undefined;
    message.state = (object.state !== undefined && object.state !== null)
      ? PaymentState.fromPartial(object.state)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type _unused_DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function _unused_isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface _unused_MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
