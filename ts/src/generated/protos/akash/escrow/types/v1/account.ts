// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/escrow/types/v1/account.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { DecCoin } from "../../../../cosmos/base/v1beta1/coin.ts";
import { Account as Account1 } from "../../id/v1/id.ts";
import { Balance } from "./balance.ts";
import { Depositor } from "./deposit.ts";
import { State, stateFromJSON, stateToJSON } from "./state.ts";

export const protobufPackage = "akash.escrow.types.v1";

/** Account stores state for an escrow account. */
export interface AccountState {
  /**
   * Owner is the account bech32 address of the user who owns the deployment.
   * It is a string representing a valid bech32 account address.
   *
   * Example:
   *   "akash1..."
   */
  owner: string;
  /** State represents the current state of an Account. */
  state: State;
  /** Transferred total coins spent by this account. */
  transferred: DecCoin[];
  /** SettledAt represents the block height at which this account was last settled. */
  settledAt: number;
  /** Balance holds the unspent coins received from all deposits */
  funds: Balance[];
  deposits: Depositor[];
}

/** Account */
export interface Account {
  id: Account1 | undefined;
  state: AccountState | undefined;
}

function createBaseAccountState(): AccountState {
  return { owner: "", state: 0, transferred: [], settledAt: 0, funds: [], deposits: [] };
}

export const AccountState: MessageFns<AccountState, "akash.escrow.types.v1.AccountState"> = {
  $type: "akash.escrow.types.v1.AccountState" as const,

  encode(message: AccountState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (message.state !== 0) {
      writer.uint32(16).int32(message.state);
    }
    for (const v of message.transferred) {
      DecCoin.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.settledAt !== 0) {
      writer.uint32(32).int64(message.settledAt);
    }
    for (const v of message.funds) {
      Balance.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.deposits) {
      Depositor.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccountState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccountState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.transferred.push(DecCoin.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.settledAt = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.funds.push(Balance.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.deposits.push(Depositor.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AccountState {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      state: isSet(object.state) ? stateFromJSON(object.state) : 0,
      transferred: globalThis.Array.isArray(object?.transferred)
        ? object.transferred.map((e: any) => DecCoin.fromJSON(e))
        : [],
      settledAt: isSet(object.settledAt) ? globalThis.Number(object.settledAt) : 0,
      funds: globalThis.Array.isArray(object?.funds) ? object.funds.map((e: any) => Balance.fromJSON(e)) : [],
      deposits: globalThis.Array.isArray(object?.deposits)
        ? object.deposits.map((e: any) => Depositor.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AccountState): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.state !== 0) {
      obj.state = stateToJSON(message.state);
    }
    if (message.transferred?.length) {
      obj.transferred = message.transferred.map((e) => DecCoin.toJSON(e));
    }
    if (message.settledAt !== 0) {
      obj.settledAt = Math.round(message.settledAt);
    }
    if (message.funds?.length) {
      obj.funds = message.funds.map((e) => Balance.toJSON(e));
    }
    if (message.deposits?.length) {
      obj.deposits = message.deposits.map((e) => Depositor.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AccountState>): AccountState {
    return AccountState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccountState>): AccountState {
    const message = createBaseAccountState();
    message.owner = object.owner ?? "";
    message.state = object.state ?? 0;
    message.transferred = object.transferred?.map((e) => DecCoin.fromPartial(e)) || [];
    message.settledAt = object.settledAt ?? 0;
    message.funds = object.funds?.map((e) => Balance.fromPartial(e)) || [];
    message.deposits = object.deposits?.map((e) => Depositor.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAccount(): Account {
  return { id: undefined, state: undefined };
}

export const Account: MessageFns<Account, "akash.escrow.types.v1.Account"> = {
  $type: "akash.escrow.types.v1.Account" as const,

  encode(message: Account, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== undefined) {
      Account1.encode(message.id, writer.uint32(10).fork()).join();
    }
    if (message.state !== undefined) {
      AccountState.encode(message.state, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Account {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccount();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = Account1.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.state = AccountState.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Account {
    return {
      id: isSet(object.id) ? Account1.fromJSON(object.id) : undefined,
      state: isSet(object.state) ? AccountState.fromJSON(object.state) : undefined,
    };
  },

  toJSON(message: Account): unknown {
    const obj: any = {};
    if (message.id !== undefined) {
      obj.id = Account1.toJSON(message.id);
    }
    if (message.state !== undefined) {
      obj.state = AccountState.toJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Account>): Account {
    return Account.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Account>): Account {
    const message = createBaseAccount();
    message.id = (object.id !== undefined && object.id !== null) ? Account1.fromPartial(object.id) : undefined;
    message.state = (object.state !== undefined && object.state !== null)
      ? AccountState.fromPartial(object.state)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
