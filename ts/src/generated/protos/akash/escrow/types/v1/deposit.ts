// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/escrow/types/v1/deposit.proto

/* eslint-disable */
import Long = require("long");
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { DecCoin } from "../../../../cosmos/base/v1beta1/coin.ts";

export const protobufPackage = "akash.escrow.types.v1";

/** Depositor stores state of a deposit. */
export interface Depositor {
  /**
   * Owner is the bech32 address of the depositor.
   * It is a string representing a valid account address.
   *
   * Example:
   *   "akash1..."
   * If depositor is same as the owner, then any incoming coins are added to the Balance.
   * If depositor isn't same as the owner, then any incoming coins are added to the Funds.
   */
  owner: string;
  /** Height blockchain height at which deposit was created */
  height: Long;
  /** Balance amount of funds available to spend in this deposit. */
  balance: DecCoin | undefined;
}

function createBaseDepositor(): Depositor {
  return { owner: "", height: Long.ZERO, balance: undefined };
}

export const Depositor: MessageFns<Depositor, "akash.escrow.types.v1.Depositor"> = {
  $type: "akash.escrow.types.v1.Depositor" as const,

  encode(message: Depositor, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== "") {
      writer.uint32(10).string(message.owner);
    }
    if (!message.height.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.height.toString());
    }
    if (message.balance !== undefined) {
      DecCoin.encode(message.balance, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Depositor {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDepositor();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = Long.fromString(reader.int64().toString());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.balance = DecCoin.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Depositor {
    return {
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      height: isSet(object.height) ? Long.fromValue(object.height) : Long.ZERO,
      balance: isSet(object.balance) ? DecCoin.fromJSON(object.balance) : undefined,
    };
  },

  toJSON(message: Depositor): unknown {
    const obj: any = {};
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (!message.height.equals(Long.ZERO)) {
      obj.height = (message.height || Long.ZERO).toString();
    }
    if (message.balance !== undefined) {
      obj.balance = DecCoin.toJSON(message.balance);
    }
    return obj;
  },

  create(base?: DeepPartial<Depositor>): Depositor {
    return Depositor.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Depositor>): Depositor {
    const message = createBaseDepositor();
    message.owner = object.owner ?? "";
    message.height = (object.height !== undefined && object.height !== null)
      ? Long.fromValue(object.height)
      : Long.ZERO;
    message.balance = (object.balance !== undefined && object.balance !== null)
      ? DecCoin.fromPartial(object.balance)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
