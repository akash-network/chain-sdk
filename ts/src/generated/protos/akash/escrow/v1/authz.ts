// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/escrow/v1/authz.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../../cosmos/base/v1beta1/coin.ts";
import Long = require("long");

export const protobufPackage = "akash.escrow.v1";

/**
 * DepositAuthorization allows the grantee to deposit up to spend_limit coins from
 * the granter's account for Akash deployments and bids. This authorization is used
 * within the Cosmos SDK authz module to grant scoped permissions for deposit operations.
 * The authorization can be restricted to specific scopes (deployment or bid) to limit
 * what types of deposits the grantee is authorized to make on behalf of the granter.
 */
export interface DepositAuthorization {
  /**
   * SpendLimit is the maximum amount the grantee is authorized to spend from the granter's account.
   * This limit applies cumulatively across all deposit operations within the authorized scopes.
   * Once this limit is reached, the authorization becomes invalid and no further deposits can be made.
   */
  spendLimit:
    | Coin
    | undefined;
  /**
   * Scopes defines the specific types of deposit operations this authorization permits.
   * This provides fine-grained control over what operations
   * the grantee can perform using the granter's funds.
   */
  scopes: DepositAuthorization_Scope[];
}

/**
 * Scope defines the types of deposit operations that can be authorized.
 * This enum is used to restrict the authorization to specific deposit contexts,
 * allowing fine-grained permission control within the authz system.
 */
export enum DepositAuthorization_Scope {
  /** invalid - Prefix should start with 0 in enum. So declaring dummy state. */
  invalid = 0,
  /** deployment - DepositScopeDeployment allows deposits for deployment-related operations. */
  deployment = 1,
  /** bid - DepositScopeBid allows deposits for bid-related operations. */
  bid = 2,
  UNRECOGNIZED = -1,
}

export function depositAuthorization_ScopeFromJSON(object: any): DepositAuthorization_Scope {
  switch (object) {
    case 0:
    case "invalid":
      return DepositAuthorization_Scope.invalid;
    case 1:
    case "deployment":
      return DepositAuthorization_Scope.deployment;
    case 2:
    case "bid":
      return DepositAuthorization_Scope.bid;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DepositAuthorization_Scope.UNRECOGNIZED;
  }
}

export function depositAuthorization_ScopeToJSON(object: DepositAuthorization_Scope): string {
  switch (object) {
    case DepositAuthorization_Scope.invalid:
      return "invalid";
    case DepositAuthorization_Scope.deployment:
      return "deployment";
    case DepositAuthorization_Scope.bid:
      return "bid";
    case DepositAuthorization_Scope.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseDepositAuthorization(): DepositAuthorization {
  return { spendLimit: undefined, scopes: [] };
}

export const DepositAuthorization: MessageFns<DepositAuthorization, "akash.escrow.v1.DepositAuthorization"> = {
  $type: "akash.escrow.v1.DepositAuthorization" as const,

  encode(message: DepositAuthorization, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.spendLimit !== undefined) {
      Coin.encode(message.spendLimit, writer.uint32(10).fork()).join();
    }
    for (const v of message.scopes) {
      writer.uint32(16).int32(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DepositAuthorization {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDepositAuthorization();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.spendLimit = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.scopes.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.scopes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DepositAuthorization {
    return {
      spendLimit: isSet(object.spendLimit) ? Coin.fromJSON(object.spendLimit) : undefined,
      scopes: globalThis.Array.isArray(object?.scopes)
        ? object.scopes.map((e: any) => depositAuthorization_ScopeFromJSON(e))
        : [],
    };
  },

  toJSON(message: DepositAuthorization): unknown {
    const obj: any = {};
    if (message.spendLimit !== undefined) {
      obj.spendLimit = Coin.toJSON(message.spendLimit);
    }
    if (message.scopes?.length) {
      obj.scopes = message.scopes.map((e) => depositAuthorization_ScopeToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DepositAuthorization>): DepositAuthorization {
    return DepositAuthorization.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DepositAuthorization>): DepositAuthorization {
    const message = createBaseDepositAuthorization();
    message.spendLimit = (object.spendLimit !== undefined && object.spendLimit !== null)
      ? Coin.fromPartial(object.spendLimit)
      : undefined;
    message.scopes = object.scopes?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
