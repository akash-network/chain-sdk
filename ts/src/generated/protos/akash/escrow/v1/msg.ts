// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: akash/escrow/v1/msg.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Deposit } from "../../base/deposit/v1/deposit.ts";
import { Account } from "../id/v1/id.ts";

export const protobufPackage = "akash.escrow.v1";

/**
 * MsgAccountDeposit represents a message to deposit funds into an existing escrow account
 * on the blockchain. This is part of the interaction mechanism for managing
 * deployment-related resources.
 */
export interface MsgAccountDeposit {
  /**
   * Signer is the account bech32 address of the user who wants to deposit into
   * an escrow account. Does not necessarily needs to be an owner of the deployment.
   * It is a string representing a valid bech32 account address.
   *
   * Example:
   *   "akash1..."
   */
  signer: string;
  /** ID is the unique identifier of the account. */
  id:
    | Account
    | undefined;
  /** Deposit contains information about the deposit amount and the source of the deposit to the escrow account. */
  deposit: Deposit | undefined;
}

/** MsgAccountDepositResponse defines response type for the MsgDeposit. */
export interface MsgAccountDepositResponse {
}

function createBaseMsgAccountDeposit(): MsgAccountDeposit {
  return { signer: "", id: undefined, deposit: undefined };
}

export const MsgAccountDeposit: MessageFns<MsgAccountDeposit, "akash.escrow.v1.MsgAccountDeposit"> = {
  $type: "akash.escrow.v1.MsgAccountDeposit" as const,

  encode(message: MsgAccountDeposit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.id !== undefined) {
      Account.encode(message.id, writer.uint32(18).fork()).join();
    }
    if (message.deposit !== undefined) {
      Deposit.encode(message.deposit, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAccountDeposit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAccountDeposit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = Account.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.deposit = Deposit.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAccountDeposit {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      id: isSet(object.id) ? Account.fromJSON(object.id) : undefined,
      deposit: isSet(object.deposit) ? Deposit.fromJSON(object.deposit) : undefined,
    };
  },

  toJSON(message: MsgAccountDeposit): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.id !== undefined) {
      obj.id = Account.toJSON(message.id);
    }
    if (message.deposit !== undefined) {
      obj.deposit = Deposit.toJSON(message.deposit);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgAccountDeposit>): MsgAccountDeposit {
    return MsgAccountDeposit.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgAccountDeposit>): MsgAccountDeposit {
    const message = createBaseMsgAccountDeposit();
    message.signer = object.signer ?? "";
    message.id = (object.id !== undefined && object.id !== null) ? Account.fromPartial(object.id) : undefined;
    message.deposit = (object.deposit !== undefined && object.deposit !== null)
      ? Deposit.fromPartial(object.deposit)
      : undefined;
    return message;
  },
};

function createBaseMsgAccountDepositResponse(): MsgAccountDepositResponse {
  return {};
}

export const MsgAccountDepositResponse: MessageFns<
  MsgAccountDepositResponse,
  "akash.escrow.v1.MsgAccountDepositResponse"
> = {
  $type: "akash.escrow.v1.MsgAccountDepositResponse" as const,

  encode(_: MsgAccountDepositResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAccountDepositResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAccountDepositResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAccountDepositResponse {
    return {};
  },

  toJSON(_: MsgAccountDepositResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgAccountDepositResponse>): MsgAccountDepositResponse {
    return MsgAccountDepositResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgAccountDepositResponse>): MsgAccountDepositResponse {
    const message = createBaseMsgAccountDepositResponse();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
