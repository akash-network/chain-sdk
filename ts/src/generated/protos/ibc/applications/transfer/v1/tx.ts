import { isSet } from "../../../../../../encoding/typeEncodingHelpers.ts"
import type { DeepPartial, MessageFns } from "../../../../../../encoding/typeEncodingHelpers.ts"
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: ibc/applications/transfer/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Coin } from "../../../../cosmos/base/v1beta1/coin.ts";
import { Height } from "../../../core/client/v1/client.ts";
import { Params } from "./transfer.ts";

/**
 * MsgTransfer defines a msg to transfer fungible tokens (i.e Coins) between
 * ICS20 enabled chains. See ICS Spec here:
 * https://github.com/cosmos/ibc/tree/master/spec/app/ics-020-fungible-token-transfer#data-structures
 */
export interface MsgTransfer {
  /** the port on which the packet will be sent */
  sourcePort: string;
  /** the channel by which the packet will be sent */
  sourceChannel: string;
  /** token to be transferred */
  token:
    | Coin
    | undefined;
  /** the sender address */
  sender: string;
  /** the recipient address on the destination chain */
  receiver: string;
  /**
   * Timeout height relative to the current block height.
   * If you are sending with IBC v1 protocol, either timeout_height or timeout_timestamp must be set.
   * If you are sending with IBC v2 protocol, timeout_timestamp must be set, and timeout_height must be omitted.
   */
  timeoutHeight:
    | Height
    | undefined;
  /**
   * Timeout timestamp in absolute nanoseconds since unix epoch.
   * If you are sending with IBC v1 protocol, either timeout_height or timeout_timestamp must be set.
   * If you are sending with IBC v2 protocol, timeout_timestamp must be set.
   */
  timeoutTimestamp: Long;
  /** optional memo */
  memo: string;
  /** optional encoding */
  encoding: string;
}

/** MsgTransferResponse defines the Msg/Transfer response type. */
export interface MsgTransferResponse {
  /** sequence number of the transfer packet sent */
  sequence: Long;
}

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** signer address */
  signer: string;
  /**
   * params defines the transfer parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

function createBaseMsgTransfer(): MsgTransfer {
  return {
    sourcePort: "",
    sourceChannel: "",
    token: undefined,
    sender: "",
    receiver: "",
    timeoutHeight: undefined,
    timeoutTimestamp: Long.UZERO,
    memo: "",
    encoding: "",
  };
}

export const MsgTransfer: MessageFns<MsgTransfer, "ibc.applications.transfer.v1.MsgTransfer"> = {
  $type: "ibc.applications.transfer.v1.MsgTransfer" as const,

  encode(message: MsgTransfer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourcePort !== "") {
      writer.uint32(10).string(message.sourcePort);
    }
    if (message.sourceChannel !== "") {
      writer.uint32(18).string(message.sourceChannel);
    }
    if (message.token !== undefined) {
      Coin.encode(message.token, writer.uint32(26).fork()).join();
    }
    if (message.sender !== "") {
      writer.uint32(34).string(message.sender);
    }
    if (message.receiver !== "") {
      writer.uint32(42).string(message.receiver);
    }
    if (message.timeoutHeight !== undefined) {
      Height.encode(message.timeoutHeight, writer.uint32(50).fork()).join();
    }
    if (!message.timeoutTimestamp.equals(Long.UZERO)) {
      writer.uint32(56).uint64(message.timeoutTimestamp.toString());
    }
    if (message.memo !== "") {
      writer.uint32(66).string(message.memo);
    }
    if (message.encoding !== "") {
      writer.uint32(74).string(message.encoding);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgTransfer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgTransfer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sourcePort = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sourceChannel = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.token = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.receiver = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.timeoutHeight = Height.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.timeoutTimestamp = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.memo = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.encoding = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgTransfer {
    return {
      sourcePort: isSet(object.source_port) ? globalThis.String(object.source_port) : "",
      sourceChannel: isSet(object.source_channel) ? globalThis.String(object.source_channel) : "",
      token: isSet(object.token) ? Coin.fromJSON(object.token) : undefined,
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      receiver: isSet(object.receiver) ? globalThis.String(object.receiver) : "",
      timeoutHeight: isSet(object.timeout_height) ? Height.fromJSON(object.timeout_height) : undefined,
      timeoutTimestamp: isSet(object.timeout_timestamp) ? Long.fromValue(object.timeout_timestamp) : Long.UZERO,
      memo: isSet(object.memo) ? globalThis.String(object.memo) : "",
      encoding: isSet(object.encoding) ? globalThis.String(object.encoding) : "",
    };
  },

  toJSON(message: MsgTransfer): unknown {
    const obj: any = {};
    if (message.sourcePort !== "") {
      obj.source_port = message.sourcePort;
    }
    if (message.sourceChannel !== "") {
      obj.source_channel = message.sourceChannel;
    }
    if (message.token !== undefined) {
      obj.token = Coin.toJSON(message.token);
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.receiver !== "") {
      obj.receiver = message.receiver;
    }
    if (message.timeoutHeight !== undefined) {
      obj.timeout_height = Height.toJSON(message.timeoutHeight);
    }
    if (!message.timeoutTimestamp.equals(Long.UZERO)) {
      obj.timeout_timestamp = (message.timeoutTimestamp || Long.UZERO).toString();
    }
    if (message.memo !== "") {
      obj.memo = message.memo;
    }
    if (message.encoding !== "") {
      obj.encoding = message.encoding;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgTransfer>): MsgTransfer {
    return MsgTransfer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgTransfer>): MsgTransfer {
    const message = createBaseMsgTransfer();
    message.sourcePort = object.sourcePort ?? "";
    message.sourceChannel = object.sourceChannel ?? "";
    message.token = (object.token !== undefined && object.token !== null) ? Coin.fromPartial(object.token) : undefined;
    message.sender = object.sender ?? "";
    message.receiver = object.receiver ?? "";
    message.timeoutHeight = (object.timeoutHeight !== undefined && object.timeoutHeight !== null)
      ? Height.fromPartial(object.timeoutHeight)
      : undefined;
    message.timeoutTimestamp = (object.timeoutTimestamp !== undefined && object.timeoutTimestamp !== null)
      ? Long.fromValue(object.timeoutTimestamp)
      : Long.UZERO;
    message.memo = object.memo ?? "";
    message.encoding = object.encoding ?? "";
    return message;
  },
};

function createBaseMsgTransferResponse(): MsgTransferResponse {
  return { sequence: Long.UZERO };
}

export const MsgTransferResponse: MessageFns<MsgTransferResponse, "ibc.applications.transfer.v1.MsgTransferResponse"> =
  {
    $type: "ibc.applications.transfer.v1.MsgTransferResponse" as const,

    encode(message: MsgTransferResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (!message.sequence.equals(Long.UZERO)) {
        writer.uint32(8).uint64(message.sequence.toString());
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): MsgTransferResponse {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMsgTransferResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.sequence = Long.fromString(reader.uint64().toString(), true);
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): MsgTransferResponse {
      return { sequence: isSet(object.sequence) ? Long.fromValue(object.sequence) : Long.UZERO };
    },

    toJSON(message: MsgTransferResponse): unknown {
      const obj: any = {};
      if (!message.sequence.equals(Long.UZERO)) {
        obj.sequence = (message.sequence || Long.UZERO).toString();
      }
      return obj;
    },

    create(base?: DeepPartial<MsgTransferResponse>): MsgTransferResponse {
      return MsgTransferResponse.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<MsgTransferResponse>): MsgTransferResponse {
      const message = createBaseMsgTransferResponse();
      message.sequence = (object.sequence !== undefined && object.sequence !== null)
        ? Long.fromValue(object.sequence)
        : Long.UZERO;
      return message;
    },
  };

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { signer: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams, "ibc.applications.transfer.v1.MsgUpdateParams"> = {
  $type: "ibc.applications.transfer.v1.MsgUpdateParams" as const,

  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateParams>): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUpdateParams>): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.signer = object.signer ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<
  MsgUpdateParamsResponse,
  "ibc.applications.transfer.v1.MsgUpdateParamsResponse"
> = {
  $type: "ibc.applications.transfer.v1.MsgUpdateParamsResponse" as const,

  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type _unused_DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function _unused_isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface _unused_MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
