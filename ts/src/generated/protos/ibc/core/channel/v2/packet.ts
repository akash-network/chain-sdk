import { bytesFromBase64, base64FromBytes, isSet } from "../../../../../../encoding/typeEncodingHelpers.ts"
import type { DeepPartial, MessageFns } from "../../../../../../encoding/typeEncodingHelpers.ts"
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: ibc/core/channel/v2/packet.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

/** PacketStatus specifies the status of a RecvPacketResult. */
export enum PacketStatus {
  /** PACKET_STATUS_UNSPECIFIED - PACKET_STATUS_UNSPECIFIED indicates an unknown packet status. */
  PACKET_STATUS_UNSPECIFIED = 0,
  /** PACKET_STATUS_SUCCESS - PACKET_STATUS_SUCCESS indicates a successful packet receipt. */
  PACKET_STATUS_SUCCESS = 1,
  /** PACKET_STATUS_FAILURE - PACKET_STATUS_FAILURE indicates a failed packet receipt. */
  PACKET_STATUS_FAILURE = 2,
  /** PACKET_STATUS_ASYNC - PACKET_STATUS_ASYNC indicates an async packet receipt. */
  PACKET_STATUS_ASYNC = 3,
  UNRECOGNIZED = -1,
}

export function packetStatusFromJSON(object: any): PacketStatus {
  switch (object) {
    case 0:
    case "PACKET_STATUS_UNSPECIFIED":
      return PacketStatus.PACKET_STATUS_UNSPECIFIED;
    case 1:
    case "PACKET_STATUS_SUCCESS":
      return PacketStatus.PACKET_STATUS_SUCCESS;
    case 2:
    case "PACKET_STATUS_FAILURE":
      return PacketStatus.PACKET_STATUS_FAILURE;
    case 3:
    case "PACKET_STATUS_ASYNC":
      return PacketStatus.PACKET_STATUS_ASYNC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PacketStatus.UNRECOGNIZED;
  }
}

export function packetStatusToJSON(object: PacketStatus): string {
  switch (object) {
    case PacketStatus.PACKET_STATUS_UNSPECIFIED:
      return "PACKET_STATUS_UNSPECIFIED";
    case PacketStatus.PACKET_STATUS_SUCCESS:
      return "PACKET_STATUS_SUCCESS";
    case PacketStatus.PACKET_STATUS_FAILURE:
      return "PACKET_STATUS_FAILURE";
    case PacketStatus.PACKET_STATUS_ASYNC:
      return "PACKET_STATUS_ASYNC";
    case PacketStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Packet defines a type that carries data across different chains through IBC */
export interface Packet {
  /**
   * number corresponds to the order of sends and receives, where a Packet
   * with an earlier sequence number must be sent and received before a Packet
   * with a later sequence number.
   */
  sequence: Long;
  /** identifies the sending client on the sending chain. */
  sourceClient: string;
  /** identifies the receiving client on the receiving chain. */
  destinationClient: string;
  /** timeout timestamp in seconds after which the packet times out. */
  timeoutTimestamp: Long;
  /** a list of payloads, each one for a specific application. */
  payloads: Payload[];
}

/** Payload contains the source and destination ports and payload for the application (version, encoding, raw bytes) */
export interface Payload {
  /** specifies the source port of the packet. */
  sourcePort: string;
  /** specifies the destination port of the packet. */
  destinationPort: string;
  /** version of the specified application. */
  version: string;
  /** the encoding used for the provided value. */
  encoding: string;
  /** the raw bytes for the payload. */
  value: Uint8Array;
}

/**
 * Acknowledgement contains a list of all ack results associated with a single packet.
 * In the case of a successful receive, the acknowledgement will contain an app acknowledgement
 * for each application that received a payload in the same order that the payloads were sent
 * in the packet.
 * If the receive is not successful, the acknowledgement will contain a single app acknowledgment
 * which will be a constant error acknowledgment as defined by the IBC v2 protocol.
 */
export interface Acknowledgement {
  appAcknowledgements: Uint8Array[];
}

/** RecvPacketResult speecifies the status of a packet as well as the acknowledgement bytes. */
export interface RecvPacketResult {
  /** status of the packet */
  status: PacketStatus;
  /** acknowledgement of the packet */
  acknowledgement: Uint8Array;
}

function createBasePacket(): Packet {
  return { sequence: Long.UZERO, sourceClient: "", destinationClient: "", timeoutTimestamp: Long.UZERO, payloads: [] };
}

export const Packet: MessageFns<Packet, "ibc.core.channel.v2.Packet"> = {
  $type: "ibc.core.channel.v2.Packet" as const,

  encode(message: Packet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.sequence.equals(Long.UZERO)) {
      writer.uint32(8).uint64(message.sequence.toString());
    }
    if (message.sourceClient !== "") {
      writer.uint32(18).string(message.sourceClient);
    }
    if (message.destinationClient !== "") {
      writer.uint32(26).string(message.destinationClient);
    }
    if (!message.timeoutTimestamp.equals(Long.UZERO)) {
      writer.uint32(32).uint64(message.timeoutTimestamp.toString());
    }
    for (const v of message.payloads) {
      Payload.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Packet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePacket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sequence = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sourceClient = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.destinationClient = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.timeoutTimestamp = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.payloads.push(Payload.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Packet {
    return {
      sequence: isSet(object.sequence) ? Long.fromValue(object.sequence) : Long.UZERO,
      sourceClient: isSet(object.source_client) ? globalThis.String(object.source_client) : "",
      destinationClient: isSet(object.destination_client) ? globalThis.String(object.destination_client) : "",
      timeoutTimestamp: isSet(object.timeout_timestamp) ? Long.fromValue(object.timeout_timestamp) : Long.UZERO,
      payloads: globalThis.Array.isArray(object?.payloads) ? object.payloads.map((e: any) => Payload.fromJSON(e)) : [],
    };
  },

  toJSON(message: Packet): unknown {
    const obj: any = {};
    if (!message.sequence.equals(Long.UZERO)) {
      obj.sequence = (message.sequence || Long.UZERO).toString();
    }
    if (message.sourceClient !== "") {
      obj.source_client = message.sourceClient;
    }
    if (message.destinationClient !== "") {
      obj.destination_client = message.destinationClient;
    }
    if (!message.timeoutTimestamp.equals(Long.UZERO)) {
      obj.timeout_timestamp = (message.timeoutTimestamp || Long.UZERO).toString();
    }
    if (message.payloads?.length) {
      obj.payloads = message.payloads.map((e) => Payload.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Packet>): Packet {
    return Packet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Packet>): Packet {
    const message = createBasePacket();
    message.sequence = (object.sequence !== undefined && object.sequence !== null)
      ? Long.fromValue(object.sequence)
      : Long.UZERO;
    message.sourceClient = object.sourceClient ?? "";
    message.destinationClient = object.destinationClient ?? "";
    message.timeoutTimestamp = (object.timeoutTimestamp !== undefined && object.timeoutTimestamp !== null)
      ? Long.fromValue(object.timeoutTimestamp)
      : Long.UZERO;
    message.payloads = object.payloads?.map((e) => Payload.fromPartial(e)) || [];
    return message;
  },
};

function createBasePayload(): Payload {
  return { sourcePort: "", destinationPort: "", version: "", encoding: "", value: new Uint8Array(0) };
}

export const Payload: MessageFns<Payload, "ibc.core.channel.v2.Payload"> = {
  $type: "ibc.core.channel.v2.Payload" as const,

  encode(message: Payload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourcePort !== "") {
      writer.uint32(10).string(message.sourcePort);
    }
    if (message.destinationPort !== "") {
      writer.uint32(18).string(message.destinationPort);
    }
    if (message.version !== "") {
      writer.uint32(26).string(message.version);
    }
    if (message.encoding !== "") {
      writer.uint32(34).string(message.encoding);
    }
    if (message.value.length !== 0) {
      writer.uint32(42).bytes(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Payload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sourcePort = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.destinationPort = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.encoding = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.value = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Payload {
    return {
      sourcePort: isSet(object.source_port) ? globalThis.String(object.source_port) : "",
      destinationPort: isSet(object.destination_port) ? globalThis.String(object.destination_port) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      encoding: isSet(object.encoding) ? globalThis.String(object.encoding) : "",
      value: isSet(object.value) ? bytesFromBase64(object.value) : new Uint8Array(0),
    };
  },

  toJSON(message: Payload): unknown {
    const obj: any = {};
    if (message.sourcePort !== "") {
      obj.source_port = message.sourcePort;
    }
    if (message.destinationPort !== "") {
      obj.destination_port = message.destinationPort;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.encoding !== "") {
      obj.encoding = message.encoding;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<Payload>): Payload {
    return Payload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Payload>): Payload {
    const message = createBasePayload();
    message.sourcePort = object.sourcePort ?? "";
    message.destinationPort = object.destinationPort ?? "";
    message.version = object.version ?? "";
    message.encoding = object.encoding ?? "";
    message.value = object.value ?? new Uint8Array(0);
    return message;
  },
};

function createBaseAcknowledgement(): Acknowledgement {
  return { appAcknowledgements: [] };
}

export const Acknowledgement: MessageFns<Acknowledgement, "ibc.core.channel.v2.Acknowledgement"> = {
  $type: "ibc.core.channel.v2.Acknowledgement" as const,

  encode(message: Acknowledgement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.appAcknowledgements) {
      writer.uint32(10).bytes(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Acknowledgement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAcknowledgement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.appAcknowledgements.push(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Acknowledgement {
    return {
      appAcknowledgements: globalThis.Array.isArray(object?.app_acknowledgements)
        ? object.app_acknowledgements.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: Acknowledgement): unknown {
    const obj: any = {};
    if (message.appAcknowledgements?.length) {
      obj.app_acknowledgements = message.appAcknowledgements.map((e) => base64FromBytes(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Acknowledgement>): Acknowledgement {
    return Acknowledgement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Acknowledgement>): Acknowledgement {
    const message = createBaseAcknowledgement();
    message.appAcknowledgements = object.appAcknowledgements?.map((e) => e) || [];
    return message;
  },
};

function createBaseRecvPacketResult(): RecvPacketResult {
  return { status: 0, acknowledgement: new Uint8Array(0) };
}

export const RecvPacketResult: MessageFns<RecvPacketResult, "ibc.core.channel.v2.RecvPacketResult"> = {
  $type: "ibc.core.channel.v2.RecvPacketResult" as const,

  encode(message: RecvPacketResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.acknowledgement.length !== 0) {
      writer.uint32(18).bytes(message.acknowledgement);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RecvPacketResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRecvPacketResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.acknowledgement = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RecvPacketResult {
    return {
      status: isSet(object.status) ? packetStatusFromJSON(object.status) : 0,
      acknowledgement: isSet(object.acknowledgement) ? bytesFromBase64(object.acknowledgement) : new Uint8Array(0),
    };
  },

  toJSON(message: RecvPacketResult): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = packetStatusToJSON(message.status);
    }
    if (message.acknowledgement.length !== 0) {
      obj.acknowledgement = base64FromBytes(message.acknowledgement);
    }
    return obj;
  },

  create(base?: DeepPartial<RecvPacketResult>): RecvPacketResult {
    return RecvPacketResult.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RecvPacketResult>): RecvPacketResult {
    const message = createBaseRecvPacketResult();
    message.status = object.status ?? 0;
    message.acknowledgement = object.acknowledgement ?? new Uint8Array(0);
    return message;
  },
};

function _unused_bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function _unused_base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type _unused_DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function _unused_isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface _unused_MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
