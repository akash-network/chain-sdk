import { bytesFromBase64, base64FromBytes, isSet } from "../../../../../../encoding/typeEncodingHelpers.ts"
import type { DeepPartial, MessageFns } from "../../../../../../encoding/typeEncodingHelpers.ts"
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: ibc/core/connection/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Any } from "../../../../google/protobuf/any.ts";
import { Height } from "../../client/v1/client.ts";
import { Counterparty, Params, Version } from "./connection.ts";

/**
 * MsgConnectionOpenInit defines the msg sent by an account on Chain A to
 * initialize a connection with Chain B.
 */
export interface MsgConnectionOpenInit {
  clientId: string;
  counterparty: Counterparty | undefined;
  version: Version | undefined;
  delayPeriod: Long;
  signer: string;
}

/**
 * MsgConnectionOpenInitResponse defines the Msg/ConnectionOpenInit response
 * type.
 */
export interface MsgConnectionOpenInitResponse {
}

/**
 * MsgConnectionOpenTry defines a msg sent by a Relayer to try to open a
 * connection on Chain B.
 */
export interface MsgConnectionOpenTry {
  clientId: string;
  /**
   * Deprecated: this field is unused. Crossing hellos are no longer supported in core IBC.
   *
   * @deprecated
   */
  previousConnectionId: string;
  /**
   * Deprecated: this field is unused.
   *
   * @deprecated
   */
  clientState: Any | undefined;
  counterparty: Counterparty | undefined;
  delayPeriod: Long;
  counterpartyVersions: Version[];
  proofHeight:
    | Height
    | undefined;
  /**
   * proof of the initialization the connection on Chain A: `UNINITIALIZED ->
   * INIT`
   */
  proofInit: Uint8Array;
  /**
   * Deprecated: this field is unused.
   *
   * @deprecated
   */
  proofClient: Uint8Array;
  /**
   * Deprecated: this field is unused.
   *
   * @deprecated
   */
  proofConsensus: Uint8Array;
  /**
   * Deprecated: this field is unused.
   *
   * @deprecated
   */
  consensusHeight: Height | undefined;
  signer: string;
  /**
   * Deprecated: this field is unused.
   *
   * @deprecated
   */
  hostConsensusStateProof: Uint8Array;
}

/** MsgConnectionOpenTryResponse defines the Msg/ConnectionOpenTry response type. */
export interface MsgConnectionOpenTryResponse {
}

/**
 * MsgConnectionOpenAck defines a msg sent by a Relayer to Chain A to
 * acknowledge the change of connection state to TRYOPEN on Chain B.
 */
export interface MsgConnectionOpenAck {
  connectionId: string;
  counterpartyConnectionId: string;
  version:
    | Version
    | undefined;
  /**
   * Deprecated: this field is unused.
   *
   * @deprecated
   */
  clientState: Any | undefined;
  proofHeight:
    | Height
    | undefined;
  /**
   * proof of the initialization the connection on Chain B: `UNINITIALIZED ->
   * TRYOPEN`
   */
  proofTry: Uint8Array;
  /**
   * Deprecated: this field is unused.
   *
   * @deprecated
   */
  proofClient: Uint8Array;
  /**
   * Deprecated: this field is unused.
   *
   * @deprecated
   */
  proofConsensus: Uint8Array;
  /**
   * Deprecated: this field is unused.
   *
   * @deprecated
   */
  consensusHeight: Height | undefined;
  signer: string;
  /**
   * Deprecated: this field is unused.
   *
   * @deprecated
   */
  hostConsensusStateProof: Uint8Array;
}

/** MsgConnectionOpenAckResponse defines the Msg/ConnectionOpenAck response type. */
export interface MsgConnectionOpenAckResponse {
}

/**
 * MsgConnectionOpenConfirm defines a msg sent by a Relayer to Chain B to
 * acknowledge the change of connection state to OPEN on Chain A.
 */
export interface MsgConnectionOpenConfirm {
  connectionId: string;
  /** proof for the change of the connection state on Chain A: `INIT -> OPEN` */
  proofAck: Uint8Array;
  proofHeight: Height | undefined;
  signer: string;
}

/**
 * MsgConnectionOpenConfirmResponse defines the Msg/ConnectionOpenConfirm
 * response type.
 */
export interface MsgConnectionOpenConfirmResponse {
}

/** MsgUpdateParams defines the sdk.Msg type to update the connection parameters. */
export interface MsgUpdateParams {
  /** signer address */
  signer: string;
  /**
   * params defines the connection parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params: Params | undefined;
}

/** MsgUpdateParamsResponse defines the MsgUpdateParams response type. */
export interface MsgUpdateParamsResponse {
}

function createBaseMsgConnectionOpenInit(): MsgConnectionOpenInit {
  return { clientId: "", counterparty: undefined, version: undefined, delayPeriod: Long.UZERO, signer: "" };
}

export const MsgConnectionOpenInit: MessageFns<MsgConnectionOpenInit, "ibc.core.connection.v1.MsgConnectionOpenInit"> =
  {
    $type: "ibc.core.connection.v1.MsgConnectionOpenInit" as const,

    encode(message: MsgConnectionOpenInit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
      if (message.clientId !== "") {
        writer.uint32(10).string(message.clientId);
      }
      if (message.counterparty !== undefined) {
        Counterparty.encode(message.counterparty, writer.uint32(18).fork()).join();
      }
      if (message.version !== undefined) {
        Version.encode(message.version, writer.uint32(26).fork()).join();
      }
      if (!message.delayPeriod.equals(Long.UZERO)) {
        writer.uint32(32).uint64(message.delayPeriod.toString());
      }
      if (message.signer !== "") {
        writer.uint32(42).string(message.signer);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): MsgConnectionOpenInit {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      const end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMsgConnectionOpenInit();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.clientId = reader.string();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.counterparty = Counterparty.decode(reader, reader.uint32());
            continue;
          }
          case 3: {
            if (tag !== 26) {
              break;
            }

            message.version = Version.decode(reader, reader.uint32());
            continue;
          }
          case 4: {
            if (tag !== 32) {
              break;
            }

            message.delayPeriod = Long.fromString(reader.uint64().toString(), true);
            continue;
          }
          case 5: {
            if (tag !== 42) {
              break;
            }

            message.signer = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): MsgConnectionOpenInit {
      return {
        clientId: isSet(object.client_id) ? globalThis.String(object.client_id) : "",
        counterparty: isSet(object.counterparty) ? Counterparty.fromJSON(object.counterparty) : undefined,
        version: isSet(object.version) ? Version.fromJSON(object.version) : undefined,
        delayPeriod: isSet(object.delay_period) ? Long.fromValue(object.delay_period) : Long.UZERO,
        signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      };
    },

    toJSON(message: MsgConnectionOpenInit): unknown {
      const obj: any = {};
      if (message.clientId !== "") {
        obj.client_id = message.clientId;
      }
      if (message.counterparty !== undefined) {
        obj.counterparty = Counterparty.toJSON(message.counterparty);
      }
      if (message.version !== undefined) {
        obj.version = Version.toJSON(message.version);
      }
      if (!message.delayPeriod.equals(Long.UZERO)) {
        obj.delay_period = (message.delayPeriod || Long.UZERO).toString();
      }
      if (message.signer !== "") {
        obj.signer = message.signer;
      }
      return obj;
    },

    create(base?: DeepPartial<MsgConnectionOpenInit>): MsgConnectionOpenInit {
      return MsgConnectionOpenInit.fromPartial(base ?? {});
    },
    fromPartial(object: DeepPartial<MsgConnectionOpenInit>): MsgConnectionOpenInit {
      const message = createBaseMsgConnectionOpenInit();
      message.clientId = object.clientId ?? "";
      message.counterparty = (object.counterparty !== undefined && object.counterparty !== null)
        ? Counterparty.fromPartial(object.counterparty)
        : undefined;
      message.version = (object.version !== undefined && object.version !== null)
        ? Version.fromPartial(object.version)
        : undefined;
      message.delayPeriod = (object.delayPeriod !== undefined && object.delayPeriod !== null)
        ? Long.fromValue(object.delayPeriod)
        : Long.UZERO;
      message.signer = object.signer ?? "";
      return message;
    },
  };

function createBaseMsgConnectionOpenInitResponse(): MsgConnectionOpenInitResponse {
  return {};
}

export const MsgConnectionOpenInitResponse: MessageFns<
  MsgConnectionOpenInitResponse,
  "ibc.core.connection.v1.MsgConnectionOpenInitResponse"
> = {
  $type: "ibc.core.connection.v1.MsgConnectionOpenInitResponse" as const,

  encode(_: MsgConnectionOpenInitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgConnectionOpenInitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConnectionOpenInitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgConnectionOpenInitResponse {
    return {};
  },

  toJSON(_: MsgConnectionOpenInitResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgConnectionOpenInitResponse>): MsgConnectionOpenInitResponse {
    return MsgConnectionOpenInitResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgConnectionOpenInitResponse>): MsgConnectionOpenInitResponse {
    const message = createBaseMsgConnectionOpenInitResponse();
    return message;
  },
};

function createBaseMsgConnectionOpenTry(): MsgConnectionOpenTry {
  return {
    clientId: "",
    previousConnectionId: "",
    clientState: undefined,
    counterparty: undefined,
    delayPeriod: Long.UZERO,
    counterpartyVersions: [],
    proofHeight: undefined,
    proofInit: new Uint8Array(0),
    proofClient: new Uint8Array(0),
    proofConsensus: new Uint8Array(0),
    consensusHeight: undefined,
    signer: "",
    hostConsensusStateProof: new Uint8Array(0),
  };
}

export const MsgConnectionOpenTry: MessageFns<MsgConnectionOpenTry, "ibc.core.connection.v1.MsgConnectionOpenTry"> = {
  $type: "ibc.core.connection.v1.MsgConnectionOpenTry" as const,

  encode(message: MsgConnectionOpenTry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.previousConnectionId !== "") {
      writer.uint32(18).string(message.previousConnectionId);
    }
    if (message.clientState !== undefined) {
      Any.encode(message.clientState, writer.uint32(26).fork()).join();
    }
    if (message.counterparty !== undefined) {
      Counterparty.encode(message.counterparty, writer.uint32(34).fork()).join();
    }
    if (!message.delayPeriod.equals(Long.UZERO)) {
      writer.uint32(40).uint64(message.delayPeriod.toString());
    }
    for (const v of message.counterpartyVersions) {
      Version.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.proofHeight !== undefined) {
      Height.encode(message.proofHeight, writer.uint32(58).fork()).join();
    }
    if (message.proofInit.length !== 0) {
      writer.uint32(66).bytes(message.proofInit);
    }
    if (message.proofClient.length !== 0) {
      writer.uint32(74).bytes(message.proofClient);
    }
    if (message.proofConsensus.length !== 0) {
      writer.uint32(82).bytes(message.proofConsensus);
    }
    if (message.consensusHeight !== undefined) {
      Height.encode(message.consensusHeight, writer.uint32(90).fork()).join();
    }
    if (message.signer !== "") {
      writer.uint32(98).string(message.signer);
    }
    if (message.hostConsensusStateProof.length !== 0) {
      writer.uint32(106).bytes(message.hostConsensusStateProof);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgConnectionOpenTry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConnectionOpenTry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.previousConnectionId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.clientState = Any.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.counterparty = Counterparty.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.delayPeriod = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.counterpartyVersions.push(Version.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.proofHeight = Height.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.proofInit = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.proofClient = reader.bytes();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.proofConsensus = reader.bytes();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.consensusHeight = Height.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.signer = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.hostConsensusStateProof = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgConnectionOpenTry {
    return {
      clientId: isSet(object.client_id) ? globalThis.String(object.client_id) : "",
      previousConnectionId: isSet(object.previous_connection_id)
        ? globalThis.String(object.previous_connection_id)
        : "",
      clientState: isSet(object.client_state) ? Any.fromJSON(object.client_state) : undefined,
      counterparty: isSet(object.counterparty) ? Counterparty.fromJSON(object.counterparty) : undefined,
      delayPeriod: isSet(object.delay_period) ? Long.fromValue(object.delay_period) : Long.UZERO,
      counterpartyVersions: globalThis.Array.isArray(object?.counterparty_versions)
        ? object.counterparty_versions.map((e: any) => Version.fromJSON(e))
        : [],
      proofHeight: isSet(object.proof_height) ? Height.fromJSON(object.proof_height) : undefined,
      proofInit: isSet(object.proof_init) ? bytesFromBase64(object.proof_init) : new Uint8Array(0),
      proofClient: isSet(object.proof_client) ? bytesFromBase64(object.proof_client) : new Uint8Array(0),
      proofConsensus: isSet(object.proof_consensus) ? bytesFromBase64(object.proof_consensus) : new Uint8Array(0),
      consensusHeight: isSet(object.consensus_height) ? Height.fromJSON(object.consensus_height) : undefined,
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      hostConsensusStateProof: isSet(object.host_consensus_state_proof)
        ? bytesFromBase64(object.host_consensus_state_proof)
        : new Uint8Array(0),
    };
  },

  toJSON(message: MsgConnectionOpenTry): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.client_id = message.clientId;
    }
    if (message.previousConnectionId !== "") {
      obj.previous_connection_id = message.previousConnectionId;
    }
    if (message.clientState !== undefined) {
      obj.client_state = Any.toJSON(message.clientState);
    }
    if (message.counterparty !== undefined) {
      obj.counterparty = Counterparty.toJSON(message.counterparty);
    }
    if (!message.delayPeriod.equals(Long.UZERO)) {
      obj.delay_period = (message.delayPeriod || Long.UZERO).toString();
    }
    if (message.counterpartyVersions?.length) {
      obj.counterparty_versions = message.counterpartyVersions.map((e) => Version.toJSON(e));
    }
    if (message.proofHeight !== undefined) {
      obj.proof_height = Height.toJSON(message.proofHeight);
    }
    if (message.proofInit.length !== 0) {
      obj.proof_init = base64FromBytes(message.proofInit);
    }
    if (message.proofClient.length !== 0) {
      obj.proof_client = base64FromBytes(message.proofClient);
    }
    if (message.proofConsensus.length !== 0) {
      obj.proof_consensus = base64FromBytes(message.proofConsensus);
    }
    if (message.consensusHeight !== undefined) {
      obj.consensus_height = Height.toJSON(message.consensusHeight);
    }
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.hostConsensusStateProof.length !== 0) {
      obj.host_consensus_state_proof = base64FromBytes(message.hostConsensusStateProof);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgConnectionOpenTry>): MsgConnectionOpenTry {
    return MsgConnectionOpenTry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgConnectionOpenTry>): MsgConnectionOpenTry {
    const message = createBaseMsgConnectionOpenTry();
    message.clientId = object.clientId ?? "";
    message.previousConnectionId = object.previousConnectionId ?? "";
    message.clientState = (object.clientState !== undefined && object.clientState !== null)
      ? Any.fromPartial(object.clientState)
      : undefined;
    message.counterparty = (object.counterparty !== undefined && object.counterparty !== null)
      ? Counterparty.fromPartial(object.counterparty)
      : undefined;
    message.delayPeriod = (object.delayPeriod !== undefined && object.delayPeriod !== null)
      ? Long.fromValue(object.delayPeriod)
      : Long.UZERO;
    message.counterpartyVersions = object.counterpartyVersions?.map((e) => Version.fromPartial(e)) || [];
    message.proofHeight = (object.proofHeight !== undefined && object.proofHeight !== null)
      ? Height.fromPartial(object.proofHeight)
      : undefined;
    message.proofInit = object.proofInit ?? new Uint8Array(0);
    message.proofClient = object.proofClient ?? new Uint8Array(0);
    message.proofConsensus = object.proofConsensus ?? new Uint8Array(0);
    message.consensusHeight = (object.consensusHeight !== undefined && object.consensusHeight !== null)
      ? Height.fromPartial(object.consensusHeight)
      : undefined;
    message.signer = object.signer ?? "";
    message.hostConsensusStateProof = object.hostConsensusStateProof ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgConnectionOpenTryResponse(): MsgConnectionOpenTryResponse {
  return {};
}

export const MsgConnectionOpenTryResponse: MessageFns<
  MsgConnectionOpenTryResponse,
  "ibc.core.connection.v1.MsgConnectionOpenTryResponse"
> = {
  $type: "ibc.core.connection.v1.MsgConnectionOpenTryResponse" as const,

  encode(_: MsgConnectionOpenTryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgConnectionOpenTryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConnectionOpenTryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgConnectionOpenTryResponse {
    return {};
  },

  toJSON(_: MsgConnectionOpenTryResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgConnectionOpenTryResponse>): MsgConnectionOpenTryResponse {
    return MsgConnectionOpenTryResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgConnectionOpenTryResponse>): MsgConnectionOpenTryResponse {
    const message = createBaseMsgConnectionOpenTryResponse();
    return message;
  },
};

function createBaseMsgConnectionOpenAck(): MsgConnectionOpenAck {
  return {
    connectionId: "",
    counterpartyConnectionId: "",
    version: undefined,
    clientState: undefined,
    proofHeight: undefined,
    proofTry: new Uint8Array(0),
    proofClient: new Uint8Array(0),
    proofConsensus: new Uint8Array(0),
    consensusHeight: undefined,
    signer: "",
    hostConsensusStateProof: new Uint8Array(0),
  };
}

export const MsgConnectionOpenAck: MessageFns<MsgConnectionOpenAck, "ibc.core.connection.v1.MsgConnectionOpenAck"> = {
  $type: "ibc.core.connection.v1.MsgConnectionOpenAck" as const,

  encode(message: MsgConnectionOpenAck, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.connectionId !== "") {
      writer.uint32(10).string(message.connectionId);
    }
    if (message.counterpartyConnectionId !== "") {
      writer.uint32(18).string(message.counterpartyConnectionId);
    }
    if (message.version !== undefined) {
      Version.encode(message.version, writer.uint32(26).fork()).join();
    }
    if (message.clientState !== undefined) {
      Any.encode(message.clientState, writer.uint32(34).fork()).join();
    }
    if (message.proofHeight !== undefined) {
      Height.encode(message.proofHeight, writer.uint32(42).fork()).join();
    }
    if (message.proofTry.length !== 0) {
      writer.uint32(50).bytes(message.proofTry);
    }
    if (message.proofClient.length !== 0) {
      writer.uint32(58).bytes(message.proofClient);
    }
    if (message.proofConsensus.length !== 0) {
      writer.uint32(66).bytes(message.proofConsensus);
    }
    if (message.consensusHeight !== undefined) {
      Height.encode(message.consensusHeight, writer.uint32(74).fork()).join();
    }
    if (message.signer !== "") {
      writer.uint32(82).string(message.signer);
    }
    if (message.hostConsensusStateProof.length !== 0) {
      writer.uint32(90).bytes(message.hostConsensusStateProof);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgConnectionOpenAck {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConnectionOpenAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.connectionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.counterpartyConnectionId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.version = Version.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.clientState = Any.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.proofHeight = Height.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.proofTry = reader.bytes();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.proofClient = reader.bytes();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.proofConsensus = reader.bytes();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.consensusHeight = Height.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.signer = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.hostConsensusStateProof = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgConnectionOpenAck {
    return {
      connectionId: isSet(object.connection_id) ? globalThis.String(object.connection_id) : "",
      counterpartyConnectionId: isSet(object.counterparty_connection_id)
        ? globalThis.String(object.counterparty_connection_id)
        : "",
      version: isSet(object.version) ? Version.fromJSON(object.version) : undefined,
      clientState: isSet(object.client_state) ? Any.fromJSON(object.client_state) : undefined,
      proofHeight: isSet(object.proof_height) ? Height.fromJSON(object.proof_height) : undefined,
      proofTry: isSet(object.proof_try) ? bytesFromBase64(object.proof_try) : new Uint8Array(0),
      proofClient: isSet(object.proof_client) ? bytesFromBase64(object.proof_client) : new Uint8Array(0),
      proofConsensus: isSet(object.proof_consensus) ? bytesFromBase64(object.proof_consensus) : new Uint8Array(0),
      consensusHeight: isSet(object.consensus_height) ? Height.fromJSON(object.consensus_height) : undefined,
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      hostConsensusStateProof: isSet(object.host_consensus_state_proof)
        ? bytesFromBase64(object.host_consensus_state_proof)
        : new Uint8Array(0),
    };
  },

  toJSON(message: MsgConnectionOpenAck): unknown {
    const obj: any = {};
    if (message.connectionId !== "") {
      obj.connection_id = message.connectionId;
    }
    if (message.counterpartyConnectionId !== "") {
      obj.counterparty_connection_id = message.counterpartyConnectionId;
    }
    if (message.version !== undefined) {
      obj.version = Version.toJSON(message.version);
    }
    if (message.clientState !== undefined) {
      obj.client_state = Any.toJSON(message.clientState);
    }
    if (message.proofHeight !== undefined) {
      obj.proof_height = Height.toJSON(message.proofHeight);
    }
    if (message.proofTry.length !== 0) {
      obj.proof_try = base64FromBytes(message.proofTry);
    }
    if (message.proofClient.length !== 0) {
      obj.proof_client = base64FromBytes(message.proofClient);
    }
    if (message.proofConsensus.length !== 0) {
      obj.proof_consensus = base64FromBytes(message.proofConsensus);
    }
    if (message.consensusHeight !== undefined) {
      obj.consensus_height = Height.toJSON(message.consensusHeight);
    }
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.hostConsensusStateProof.length !== 0) {
      obj.host_consensus_state_proof = base64FromBytes(message.hostConsensusStateProof);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgConnectionOpenAck>): MsgConnectionOpenAck {
    return MsgConnectionOpenAck.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgConnectionOpenAck>): MsgConnectionOpenAck {
    const message = createBaseMsgConnectionOpenAck();
    message.connectionId = object.connectionId ?? "";
    message.counterpartyConnectionId = object.counterpartyConnectionId ?? "";
    message.version = (object.version !== undefined && object.version !== null)
      ? Version.fromPartial(object.version)
      : undefined;
    message.clientState = (object.clientState !== undefined && object.clientState !== null)
      ? Any.fromPartial(object.clientState)
      : undefined;
    message.proofHeight = (object.proofHeight !== undefined && object.proofHeight !== null)
      ? Height.fromPartial(object.proofHeight)
      : undefined;
    message.proofTry = object.proofTry ?? new Uint8Array(0);
    message.proofClient = object.proofClient ?? new Uint8Array(0);
    message.proofConsensus = object.proofConsensus ?? new Uint8Array(0);
    message.consensusHeight = (object.consensusHeight !== undefined && object.consensusHeight !== null)
      ? Height.fromPartial(object.consensusHeight)
      : undefined;
    message.signer = object.signer ?? "";
    message.hostConsensusStateProof = object.hostConsensusStateProof ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgConnectionOpenAckResponse(): MsgConnectionOpenAckResponse {
  return {};
}

export const MsgConnectionOpenAckResponse: MessageFns<
  MsgConnectionOpenAckResponse,
  "ibc.core.connection.v1.MsgConnectionOpenAckResponse"
> = {
  $type: "ibc.core.connection.v1.MsgConnectionOpenAckResponse" as const,

  encode(_: MsgConnectionOpenAckResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgConnectionOpenAckResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConnectionOpenAckResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgConnectionOpenAckResponse {
    return {};
  },

  toJSON(_: MsgConnectionOpenAckResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgConnectionOpenAckResponse>): MsgConnectionOpenAckResponse {
    return MsgConnectionOpenAckResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgConnectionOpenAckResponse>): MsgConnectionOpenAckResponse {
    const message = createBaseMsgConnectionOpenAckResponse();
    return message;
  },
};

function createBaseMsgConnectionOpenConfirm(): MsgConnectionOpenConfirm {
  return { connectionId: "", proofAck: new Uint8Array(0), proofHeight: undefined, signer: "" };
}

export const MsgConnectionOpenConfirm: MessageFns<
  MsgConnectionOpenConfirm,
  "ibc.core.connection.v1.MsgConnectionOpenConfirm"
> = {
  $type: "ibc.core.connection.v1.MsgConnectionOpenConfirm" as const,

  encode(message: MsgConnectionOpenConfirm, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.connectionId !== "") {
      writer.uint32(10).string(message.connectionId);
    }
    if (message.proofAck.length !== 0) {
      writer.uint32(18).bytes(message.proofAck);
    }
    if (message.proofHeight !== undefined) {
      Height.encode(message.proofHeight, writer.uint32(26).fork()).join();
    }
    if (message.signer !== "") {
      writer.uint32(34).string(message.signer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgConnectionOpenConfirm {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConnectionOpenConfirm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.connectionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.proofAck = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proofHeight = Height.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.signer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgConnectionOpenConfirm {
    return {
      connectionId: isSet(object.connection_id) ? globalThis.String(object.connection_id) : "",
      proofAck: isSet(object.proof_ack) ? bytesFromBase64(object.proof_ack) : new Uint8Array(0),
      proofHeight: isSet(object.proof_height) ? Height.fromJSON(object.proof_height) : undefined,
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
    };
  },

  toJSON(message: MsgConnectionOpenConfirm): unknown {
    const obj: any = {};
    if (message.connectionId !== "") {
      obj.connection_id = message.connectionId;
    }
    if (message.proofAck.length !== 0) {
      obj.proof_ack = base64FromBytes(message.proofAck);
    }
    if (message.proofHeight !== undefined) {
      obj.proof_height = Height.toJSON(message.proofHeight);
    }
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgConnectionOpenConfirm>): MsgConnectionOpenConfirm {
    return MsgConnectionOpenConfirm.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgConnectionOpenConfirm>): MsgConnectionOpenConfirm {
    const message = createBaseMsgConnectionOpenConfirm();
    message.connectionId = object.connectionId ?? "";
    message.proofAck = object.proofAck ?? new Uint8Array(0);
    message.proofHeight = (object.proofHeight !== undefined && object.proofHeight !== null)
      ? Height.fromPartial(object.proofHeight)
      : undefined;
    message.signer = object.signer ?? "";
    return message;
  },
};

function createBaseMsgConnectionOpenConfirmResponse(): MsgConnectionOpenConfirmResponse {
  return {};
}

export const MsgConnectionOpenConfirmResponse: MessageFns<
  MsgConnectionOpenConfirmResponse,
  "ibc.core.connection.v1.MsgConnectionOpenConfirmResponse"
> = {
  $type: "ibc.core.connection.v1.MsgConnectionOpenConfirmResponse" as const,

  encode(_: MsgConnectionOpenConfirmResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgConnectionOpenConfirmResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConnectionOpenConfirmResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgConnectionOpenConfirmResponse {
    return {};
  },

  toJSON(_: MsgConnectionOpenConfirmResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgConnectionOpenConfirmResponse>): MsgConnectionOpenConfirmResponse {
    return MsgConnectionOpenConfirmResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgConnectionOpenConfirmResponse>): MsgConnectionOpenConfirmResponse {
    const message = createBaseMsgConnectionOpenConfirmResponse();
    return message;
  },
};

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { signer: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams, "ibc.core.connection.v1.MsgUpdateParams"> = {
  $type: "ibc.core.connection.v1.MsgUpdateParams" as const,

  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateParams>): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUpdateParams>): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.signer = object.signer ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<
  MsgUpdateParamsResponse,
  "ibc.core.connection.v1.MsgUpdateParamsResponse"
> = {
  $type: "ibc.core.connection.v1.MsgUpdateParamsResponse" as const,

  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgUpdateParamsResponse>): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function _unused_bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function _unused_base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type _unused_DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function _unused_isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface _unused_MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
