import { bytesFromBase64, base64FromBytes, isSet } from "../../../../../../encoding/typeEncodingHelpers.ts"
import type { DeepPartial, MessageFns } from "../../../../../../encoding/typeEncodingHelpers.ts"
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: ibc/core/connection/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { PageRequest, PageResponse } from "../../../../cosmos/base/query/v1beta1/pagination.ts";
import { Any } from "../../../../google/protobuf/any.ts";
import { Height, IdentifiedClientState } from "../../client/v1/client.ts";
import { ConnectionEnd, IdentifiedConnection, Params } from "./connection.ts";

/**
 * QueryConnectionRequest is the request type for the Query/Connection RPC
 * method
 */
export interface QueryConnectionRequest {
  /** connection unique identifier */
  connectionId: string;
}

/**
 * QueryConnectionResponse is the response type for the Query/Connection RPC
 * method. Besides the connection end, it includes a proof and the height from
 * which the proof was retrieved.
 */
export interface QueryConnectionResponse {
  /** connection associated with the request identifier */
  connection:
    | ConnectionEnd
    | undefined;
  /** merkle proof of existence */
  proof: Uint8Array;
  /** height at which the proof was retrieved */
  proofHeight: Height | undefined;
}

/**
 * QueryConnectionsRequest is the request type for the Query/Connections RPC
 * method
 */
export interface QueryConnectionsRequest {
  pagination: PageRequest | undefined;
}

/**
 * QueryConnectionsResponse is the response type for the Query/Connections RPC
 * method.
 */
export interface QueryConnectionsResponse {
  /** list of stored connections of the chain. */
  connections: IdentifiedConnection[];
  /** pagination response */
  pagination:
    | PageResponse
    | undefined;
  /** query block height */
  height: Height | undefined;
}

/**
 * QueryClientConnectionsRequest is the request type for the
 * Query/ClientConnections RPC method
 */
export interface QueryClientConnectionsRequest {
  /** client identifier associated with a connection */
  clientId: string;
}

/**
 * QueryClientConnectionsResponse is the response type for the
 * Query/ClientConnections RPC method
 */
export interface QueryClientConnectionsResponse {
  /** slice of all the connection paths associated with a client. */
  connectionPaths: string[];
  /** merkle proof of existence */
  proof: Uint8Array;
  /** height at which the proof was generated */
  proofHeight: Height | undefined;
}

/**
 * QueryConnectionClientStateRequest is the request type for the
 * Query/ConnectionClientState RPC method
 */
export interface QueryConnectionClientStateRequest {
  /** connection identifier */
  connectionId: string;
}

/**
 * QueryConnectionClientStateResponse is the response type for the
 * Query/ConnectionClientState RPC method
 */
export interface QueryConnectionClientStateResponse {
  /** client state associated with the channel */
  identifiedClientState:
    | IdentifiedClientState
    | undefined;
  /** merkle proof of existence */
  proof: Uint8Array;
  /** height at which the proof was retrieved */
  proofHeight: Height | undefined;
}

/**
 * QueryConnectionConsensusStateRequest is the request type for the
 * Query/ConnectionConsensusState RPC method
 */
export interface QueryConnectionConsensusStateRequest {
  /** connection identifier */
  connectionId: string;
  revisionNumber: Long;
  revisionHeight: Long;
}

/**
 * QueryConnectionConsensusStateResponse is the response type for the
 * Query/ConnectionConsensusState RPC method
 */
export interface QueryConnectionConsensusStateResponse {
  /** consensus state associated with the channel */
  consensusState:
    | Any
    | undefined;
  /** client ID associated with the consensus state */
  clientId: string;
  /** merkle proof of existence */
  proof: Uint8Array;
  /** height at which the proof was retrieved */
  proofHeight: Height | undefined;
}

/** QueryConnectionParamsRequest is the request type for the Query/ConnectionParams RPC method. */
export interface QueryConnectionParamsRequest {
}

/** QueryConnectionParamsResponse is the response type for the Query/ConnectionParams RPC method. */
export interface QueryConnectionParamsResponse {
  /** params defines the parameters of the module. */
  params: Params | undefined;
}

function createBaseQueryConnectionRequest(): QueryConnectionRequest {
  return { connectionId: "" };
}

export const QueryConnectionRequest: MessageFns<
  QueryConnectionRequest,
  "ibc.core.connection.v1.QueryConnectionRequest"
> = {
  $type: "ibc.core.connection.v1.QueryConnectionRequest" as const,

  encode(message: QueryConnectionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.connectionId !== "") {
      writer.uint32(10).string(message.connectionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConnectionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConnectionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.connectionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConnectionRequest {
    return { connectionId: isSet(object.connection_id) ? globalThis.String(object.connection_id) : "" };
  },

  toJSON(message: QueryConnectionRequest): unknown {
    const obj: any = {};
    if (message.connectionId !== "") {
      obj.connection_id = message.connectionId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryConnectionRequest>): QueryConnectionRequest {
    return QueryConnectionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryConnectionRequest>): QueryConnectionRequest {
    const message = createBaseQueryConnectionRequest();
    message.connectionId = object.connectionId ?? "";
    return message;
  },
};

function createBaseQueryConnectionResponse(): QueryConnectionResponse {
  return { connection: undefined, proof: new Uint8Array(0), proofHeight: undefined };
}

export const QueryConnectionResponse: MessageFns<
  QueryConnectionResponse,
  "ibc.core.connection.v1.QueryConnectionResponse"
> = {
  $type: "ibc.core.connection.v1.QueryConnectionResponse" as const,

  encode(message: QueryConnectionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.connection !== undefined) {
      ConnectionEnd.encode(message.connection, writer.uint32(10).fork()).join();
    }
    if (message.proof.length !== 0) {
      writer.uint32(18).bytes(message.proof);
    }
    if (message.proofHeight !== undefined) {
      Height.encode(message.proofHeight, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConnectionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConnectionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.connection = ConnectionEnd.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.proof = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proofHeight = Height.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConnectionResponse {
    return {
      connection: isSet(object.connection) ? ConnectionEnd.fromJSON(object.connection) : undefined,
      proof: isSet(object.proof) ? bytesFromBase64(object.proof) : new Uint8Array(0),
      proofHeight: isSet(object.proof_height) ? Height.fromJSON(object.proof_height) : undefined,
    };
  },

  toJSON(message: QueryConnectionResponse): unknown {
    const obj: any = {};
    if (message.connection !== undefined) {
      obj.connection = ConnectionEnd.toJSON(message.connection);
    }
    if (message.proof.length !== 0) {
      obj.proof = base64FromBytes(message.proof);
    }
    if (message.proofHeight !== undefined) {
      obj.proof_height = Height.toJSON(message.proofHeight);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryConnectionResponse>): QueryConnectionResponse {
    return QueryConnectionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryConnectionResponse>): QueryConnectionResponse {
    const message = createBaseQueryConnectionResponse();
    message.connection = (object.connection !== undefined && object.connection !== null)
      ? ConnectionEnd.fromPartial(object.connection)
      : undefined;
    message.proof = object.proof ?? new Uint8Array(0);
    message.proofHeight = (object.proofHeight !== undefined && object.proofHeight !== null)
      ? Height.fromPartial(object.proofHeight)
      : undefined;
    return message;
  },
};

function createBaseQueryConnectionsRequest(): QueryConnectionsRequest {
  return { pagination: undefined };
}

export const QueryConnectionsRequest: MessageFns<
  QueryConnectionsRequest,
  "ibc.core.connection.v1.QueryConnectionsRequest"
> = {
  $type: "ibc.core.connection.v1.QueryConnectionsRequest" as const,

  encode(message: QueryConnectionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConnectionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConnectionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConnectionsRequest {
    return { pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined };
  },

  toJSON(message: QueryConnectionsRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryConnectionsRequest>): QueryConnectionsRequest {
    return QueryConnectionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryConnectionsRequest>): QueryConnectionsRequest {
    const message = createBaseQueryConnectionsRequest();
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryConnectionsResponse(): QueryConnectionsResponse {
  return { connections: [], pagination: undefined, height: undefined };
}

export const QueryConnectionsResponse: MessageFns<
  QueryConnectionsResponse,
  "ibc.core.connection.v1.QueryConnectionsResponse"
> = {
  $type: "ibc.core.connection.v1.QueryConnectionsResponse" as const,

  encode(message: QueryConnectionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.connections) {
      IdentifiedConnection.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    if (message.height !== undefined) {
      Height.encode(message.height, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConnectionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConnectionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.connections.push(IdentifiedConnection.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.height = Height.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConnectionsResponse {
    return {
      connections: globalThis.Array.isArray(object?.connections)
        ? object.connections.map((e: any) => IdentifiedConnection.fromJSON(e))
        : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
      height: isSet(object.height) ? Height.fromJSON(object.height) : undefined,
    };
  },

  toJSON(message: QueryConnectionsResponse): unknown {
    const obj: any = {};
    if (message.connections?.length) {
      obj.connections = message.connections.map((e) => IdentifiedConnection.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    if (message.height !== undefined) {
      obj.height = Height.toJSON(message.height);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryConnectionsResponse>): QueryConnectionsResponse {
    return QueryConnectionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryConnectionsResponse>): QueryConnectionsResponse {
    const message = createBaseQueryConnectionsResponse();
    message.connections = object.connections?.map((e) => IdentifiedConnection.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    message.height = (object.height !== undefined && object.height !== null)
      ? Height.fromPartial(object.height)
      : undefined;
    return message;
  },
};

function createBaseQueryClientConnectionsRequest(): QueryClientConnectionsRequest {
  return { clientId: "" };
}

export const QueryClientConnectionsRequest: MessageFns<
  QueryClientConnectionsRequest,
  "ibc.core.connection.v1.QueryClientConnectionsRequest"
> = {
  $type: "ibc.core.connection.v1.QueryClientConnectionsRequest" as const,

  encode(message: QueryClientConnectionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryClientConnectionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryClientConnectionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryClientConnectionsRequest {
    return { clientId: isSet(object.client_id) ? globalThis.String(object.client_id) : "" };
  },

  toJSON(message: QueryClientConnectionsRequest): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.client_id = message.clientId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryClientConnectionsRequest>): QueryClientConnectionsRequest {
    return QueryClientConnectionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryClientConnectionsRequest>): QueryClientConnectionsRequest {
    const message = createBaseQueryClientConnectionsRequest();
    message.clientId = object.clientId ?? "";
    return message;
  },
};

function createBaseQueryClientConnectionsResponse(): QueryClientConnectionsResponse {
  return { connectionPaths: [], proof: new Uint8Array(0), proofHeight: undefined };
}

export const QueryClientConnectionsResponse: MessageFns<
  QueryClientConnectionsResponse,
  "ibc.core.connection.v1.QueryClientConnectionsResponse"
> = {
  $type: "ibc.core.connection.v1.QueryClientConnectionsResponse" as const,

  encode(message: QueryClientConnectionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.connectionPaths) {
      writer.uint32(10).string(v!);
    }
    if (message.proof.length !== 0) {
      writer.uint32(18).bytes(message.proof);
    }
    if (message.proofHeight !== undefined) {
      Height.encode(message.proofHeight, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryClientConnectionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryClientConnectionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.connectionPaths.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.proof = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proofHeight = Height.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryClientConnectionsResponse {
    return {
      connectionPaths: globalThis.Array.isArray(object?.connection_paths)
        ? object.connection_paths.map((e: any) => globalThis.String(e))
        : [],
      proof: isSet(object.proof) ? bytesFromBase64(object.proof) : new Uint8Array(0),
      proofHeight: isSet(object.proof_height) ? Height.fromJSON(object.proof_height) : undefined,
    };
  },

  toJSON(message: QueryClientConnectionsResponse): unknown {
    const obj: any = {};
    if (message.connectionPaths?.length) {
      obj.connection_paths = message.connectionPaths;
    }
    if (message.proof.length !== 0) {
      obj.proof = base64FromBytes(message.proof);
    }
    if (message.proofHeight !== undefined) {
      obj.proof_height = Height.toJSON(message.proofHeight);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryClientConnectionsResponse>): QueryClientConnectionsResponse {
    return QueryClientConnectionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryClientConnectionsResponse>): QueryClientConnectionsResponse {
    const message = createBaseQueryClientConnectionsResponse();
    message.connectionPaths = object.connectionPaths?.map((e) => e) || [];
    message.proof = object.proof ?? new Uint8Array(0);
    message.proofHeight = (object.proofHeight !== undefined && object.proofHeight !== null)
      ? Height.fromPartial(object.proofHeight)
      : undefined;
    return message;
  },
};

function createBaseQueryConnectionClientStateRequest(): QueryConnectionClientStateRequest {
  return { connectionId: "" };
}

export const QueryConnectionClientStateRequest: MessageFns<
  QueryConnectionClientStateRequest,
  "ibc.core.connection.v1.QueryConnectionClientStateRequest"
> = {
  $type: "ibc.core.connection.v1.QueryConnectionClientStateRequest" as const,

  encode(message: QueryConnectionClientStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.connectionId !== "") {
      writer.uint32(10).string(message.connectionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConnectionClientStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConnectionClientStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.connectionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConnectionClientStateRequest {
    return { connectionId: isSet(object.connection_id) ? globalThis.String(object.connection_id) : "" };
  },

  toJSON(message: QueryConnectionClientStateRequest): unknown {
    const obj: any = {};
    if (message.connectionId !== "") {
      obj.connection_id = message.connectionId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryConnectionClientStateRequest>): QueryConnectionClientStateRequest {
    return QueryConnectionClientStateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryConnectionClientStateRequest>): QueryConnectionClientStateRequest {
    const message = createBaseQueryConnectionClientStateRequest();
    message.connectionId = object.connectionId ?? "";
    return message;
  },
};

function createBaseQueryConnectionClientStateResponse(): QueryConnectionClientStateResponse {
  return { identifiedClientState: undefined, proof: new Uint8Array(0), proofHeight: undefined };
}

export const QueryConnectionClientStateResponse: MessageFns<
  QueryConnectionClientStateResponse,
  "ibc.core.connection.v1.QueryConnectionClientStateResponse"
> = {
  $type: "ibc.core.connection.v1.QueryConnectionClientStateResponse" as const,

  encode(message: QueryConnectionClientStateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.identifiedClientState !== undefined) {
      IdentifiedClientState.encode(message.identifiedClientState, writer.uint32(10).fork()).join();
    }
    if (message.proof.length !== 0) {
      writer.uint32(18).bytes(message.proof);
    }
    if (message.proofHeight !== undefined) {
      Height.encode(message.proofHeight, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConnectionClientStateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConnectionClientStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.identifiedClientState = IdentifiedClientState.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.proof = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proofHeight = Height.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConnectionClientStateResponse {
    return {
      identifiedClientState: isSet(object.identified_client_state)
        ? IdentifiedClientState.fromJSON(object.identified_client_state)
        : undefined,
      proof: isSet(object.proof) ? bytesFromBase64(object.proof) : new Uint8Array(0),
      proofHeight: isSet(object.proof_height) ? Height.fromJSON(object.proof_height) : undefined,
    };
  },

  toJSON(message: QueryConnectionClientStateResponse): unknown {
    const obj: any = {};
    if (message.identifiedClientState !== undefined) {
      obj.identified_client_state = IdentifiedClientState.toJSON(message.identifiedClientState);
    }
    if (message.proof.length !== 0) {
      obj.proof = base64FromBytes(message.proof);
    }
    if (message.proofHeight !== undefined) {
      obj.proof_height = Height.toJSON(message.proofHeight);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryConnectionClientStateResponse>): QueryConnectionClientStateResponse {
    return QueryConnectionClientStateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryConnectionClientStateResponse>): QueryConnectionClientStateResponse {
    const message = createBaseQueryConnectionClientStateResponse();
    message.identifiedClientState =
      (object.identifiedClientState !== undefined && object.identifiedClientState !== null)
        ? IdentifiedClientState.fromPartial(object.identifiedClientState)
        : undefined;
    message.proof = object.proof ?? new Uint8Array(0);
    message.proofHeight = (object.proofHeight !== undefined && object.proofHeight !== null)
      ? Height.fromPartial(object.proofHeight)
      : undefined;
    return message;
  },
};

function createBaseQueryConnectionConsensusStateRequest(): QueryConnectionConsensusStateRequest {
  return { connectionId: "", revisionNumber: Long.UZERO, revisionHeight: Long.UZERO };
}

export const QueryConnectionConsensusStateRequest: MessageFns<
  QueryConnectionConsensusStateRequest,
  "ibc.core.connection.v1.QueryConnectionConsensusStateRequest"
> = {
  $type: "ibc.core.connection.v1.QueryConnectionConsensusStateRequest" as const,

  encode(message: QueryConnectionConsensusStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.connectionId !== "") {
      writer.uint32(10).string(message.connectionId);
    }
    if (!message.revisionNumber.equals(Long.UZERO)) {
      writer.uint32(16).uint64(message.revisionNumber.toString());
    }
    if (!message.revisionHeight.equals(Long.UZERO)) {
      writer.uint32(24).uint64(message.revisionHeight.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConnectionConsensusStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConnectionConsensusStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.connectionId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.revisionNumber = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.revisionHeight = Long.fromString(reader.uint64().toString(), true);
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConnectionConsensusStateRequest {
    return {
      connectionId: isSet(object.connection_id) ? globalThis.String(object.connection_id) : "",
      revisionNumber: isSet(object.revision_number) ? Long.fromValue(object.revision_number) : Long.UZERO,
      revisionHeight: isSet(object.revision_height) ? Long.fromValue(object.revision_height) : Long.UZERO,
    };
  },

  toJSON(message: QueryConnectionConsensusStateRequest): unknown {
    const obj: any = {};
    if (message.connectionId !== "") {
      obj.connection_id = message.connectionId;
    }
    if (!message.revisionNumber.equals(Long.UZERO)) {
      obj.revision_number = (message.revisionNumber || Long.UZERO).toString();
    }
    if (!message.revisionHeight.equals(Long.UZERO)) {
      obj.revision_height = (message.revisionHeight || Long.UZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<QueryConnectionConsensusStateRequest>): QueryConnectionConsensusStateRequest {
    return QueryConnectionConsensusStateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryConnectionConsensusStateRequest>): QueryConnectionConsensusStateRequest {
    const message = createBaseQueryConnectionConsensusStateRequest();
    message.connectionId = object.connectionId ?? "";
    message.revisionNumber = (object.revisionNumber !== undefined && object.revisionNumber !== null)
      ? Long.fromValue(object.revisionNumber)
      : Long.UZERO;
    message.revisionHeight = (object.revisionHeight !== undefined && object.revisionHeight !== null)
      ? Long.fromValue(object.revisionHeight)
      : Long.UZERO;
    return message;
  },
};

function createBaseQueryConnectionConsensusStateResponse(): QueryConnectionConsensusStateResponse {
  return { consensusState: undefined, clientId: "", proof: new Uint8Array(0), proofHeight: undefined };
}

export const QueryConnectionConsensusStateResponse: MessageFns<
  QueryConnectionConsensusStateResponse,
  "ibc.core.connection.v1.QueryConnectionConsensusStateResponse"
> = {
  $type: "ibc.core.connection.v1.QueryConnectionConsensusStateResponse" as const,

  encode(message: QueryConnectionConsensusStateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.consensusState !== undefined) {
      Any.encode(message.consensusState, writer.uint32(10).fork()).join();
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    if (message.proof.length !== 0) {
      writer.uint32(26).bytes(message.proof);
    }
    if (message.proofHeight !== undefined) {
      Height.encode(message.proofHeight, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConnectionConsensusStateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConnectionConsensusStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.consensusState = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proof = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.proofHeight = Height.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConnectionConsensusStateResponse {
    return {
      consensusState: isSet(object.consensus_state) ? Any.fromJSON(object.consensus_state) : undefined,
      clientId: isSet(object.client_id) ? globalThis.String(object.client_id) : "",
      proof: isSet(object.proof) ? bytesFromBase64(object.proof) : new Uint8Array(0),
      proofHeight: isSet(object.proof_height) ? Height.fromJSON(object.proof_height) : undefined,
    };
  },

  toJSON(message: QueryConnectionConsensusStateResponse): unknown {
    const obj: any = {};
    if (message.consensusState !== undefined) {
      obj.consensus_state = Any.toJSON(message.consensusState);
    }
    if (message.clientId !== "") {
      obj.client_id = message.clientId;
    }
    if (message.proof.length !== 0) {
      obj.proof = base64FromBytes(message.proof);
    }
    if (message.proofHeight !== undefined) {
      obj.proof_height = Height.toJSON(message.proofHeight);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryConnectionConsensusStateResponse>): QueryConnectionConsensusStateResponse {
    return QueryConnectionConsensusStateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryConnectionConsensusStateResponse>): QueryConnectionConsensusStateResponse {
    const message = createBaseQueryConnectionConsensusStateResponse();
    message.consensusState = (object.consensusState !== undefined && object.consensusState !== null)
      ? Any.fromPartial(object.consensusState)
      : undefined;
    message.clientId = object.clientId ?? "";
    message.proof = object.proof ?? new Uint8Array(0);
    message.proofHeight = (object.proofHeight !== undefined && object.proofHeight !== null)
      ? Height.fromPartial(object.proofHeight)
      : undefined;
    return message;
  },
};

function createBaseQueryConnectionParamsRequest(): QueryConnectionParamsRequest {
  return {};
}

export const QueryConnectionParamsRequest: MessageFns<
  QueryConnectionParamsRequest,
  "ibc.core.connection.v1.QueryConnectionParamsRequest"
> = {
  $type: "ibc.core.connection.v1.QueryConnectionParamsRequest" as const,

  encode(_: QueryConnectionParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConnectionParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConnectionParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryConnectionParamsRequest {
    return {};
  },

  toJSON(_: QueryConnectionParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<QueryConnectionParamsRequest>): QueryConnectionParamsRequest {
    return QueryConnectionParamsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<QueryConnectionParamsRequest>): QueryConnectionParamsRequest {
    const message = createBaseQueryConnectionParamsRequest();
    return message;
  },
};

function createBaseQueryConnectionParamsResponse(): QueryConnectionParamsResponse {
  return { params: undefined };
}

export const QueryConnectionParamsResponse: MessageFns<
  QueryConnectionParamsResponse,
  "ibc.core.connection.v1.QueryConnectionParamsResponse"
> = {
  $type: "ibc.core.connection.v1.QueryConnectionParamsResponse" as const,

  encode(message: QueryConnectionParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConnectionParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConnectionParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConnectionParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryConnectionParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryConnectionParamsResponse>): QueryConnectionParamsResponse {
    return QueryConnectionParamsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryConnectionParamsResponse>): QueryConnectionParamsResponse {
    const message = createBaseQueryConnectionParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function _unused_bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function _unused_base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type _unused_DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function _unused_isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface _unused_MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
