import { bytesFromBase64, base64FromBytes, isSet } from "../../../../../../encoding/typeEncodingHelpers.ts"
import type { DeepPartial, MessageFns } from "../../../../../../encoding/typeEncodingHelpers.ts"
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: ibc/core/client/v2/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Config } from "./config.ts";

/** MsgRegisterCounterparty defines a message to register a counterparty on a client */
export interface MsgRegisterCounterparty {
  /** client identifier */
  clientId: string;
  /** counterparty merkle prefix */
  counterpartyMerklePrefix: Uint8Array[];
  /** counterparty client identifier */
  counterpartyClientId: string;
  /** signer address */
  signer: string;
}

/** MsgRegisterCounterpartyResponse defines the Msg/RegisterCounterparty response type. */
export interface MsgRegisterCounterpartyResponse {
}

/** MsgUpdateClientConfig defines the sdk.Msg type to update the configuration for a given client */
export interface MsgUpdateClientConfig {
  /** client identifier */
  clientId: string;
  /**
   * allowed relayers
   *
   * NOTE: All fields in the config must be supplied.
   */
  config:
    | Config
    | undefined;
  /** signer address */
  signer: string;
}

/** MsgUpdateClientConfigResponse defines the MsgUpdateClientConfig response type. */
export interface MsgUpdateClientConfigResponse {
}

function createBaseMsgRegisterCounterparty(): MsgRegisterCounterparty {
  return { clientId: "", counterpartyMerklePrefix: [], counterpartyClientId: "", signer: "" };
}

export const MsgRegisterCounterparty: MessageFns<
  MsgRegisterCounterparty,
  "ibc.core.client.v2.MsgRegisterCounterparty"
> = {
  $type: "ibc.core.client.v2.MsgRegisterCounterparty" as const,

  encode(message: MsgRegisterCounterparty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    for (const v of message.counterpartyMerklePrefix) {
      writer.uint32(18).bytes(v!);
    }
    if (message.counterpartyClientId !== "") {
      writer.uint32(26).string(message.counterpartyClientId);
    }
    if (message.signer !== "") {
      writer.uint32(34).string(message.signer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterCounterparty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterCounterparty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.counterpartyMerklePrefix.push(reader.bytes());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.counterpartyClientId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.signer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterCounterparty {
    return {
      clientId: isSet(object.client_id) ? globalThis.String(object.client_id) : "",
      counterpartyMerklePrefix: globalThis.Array.isArray(object?.counterparty_merkle_prefix)
        ? object.counterparty_merkle_prefix.map((e: any) => bytesFromBase64(e))
        : [],
      counterpartyClientId: isSet(object.counterparty_client_id)
        ? globalThis.String(object.counterparty_client_id)
        : "",
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
    };
  },

  toJSON(message: MsgRegisterCounterparty): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.client_id = message.clientId;
    }
    if (message.counterpartyMerklePrefix?.length) {
      obj.counterparty_merkle_prefix = message.counterpartyMerklePrefix.map((e) => base64FromBytes(e));
    }
    if (message.counterpartyClientId !== "") {
      obj.counterparty_client_id = message.counterpartyClientId;
    }
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRegisterCounterparty>): MsgRegisterCounterparty {
    return MsgRegisterCounterparty.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRegisterCounterparty>): MsgRegisterCounterparty {
    const message = createBaseMsgRegisterCounterparty();
    message.clientId = object.clientId ?? "";
    message.counterpartyMerklePrefix = object.counterpartyMerklePrefix?.map((e) => e) || [];
    message.counterpartyClientId = object.counterpartyClientId ?? "";
    message.signer = object.signer ?? "";
    return message;
  },
};

function createBaseMsgRegisterCounterpartyResponse(): MsgRegisterCounterpartyResponse {
  return {};
}

export const MsgRegisterCounterpartyResponse: MessageFns<
  MsgRegisterCounterpartyResponse,
  "ibc.core.client.v2.MsgRegisterCounterpartyResponse"
> = {
  $type: "ibc.core.client.v2.MsgRegisterCounterpartyResponse" as const,

  encode(_: MsgRegisterCounterpartyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterCounterpartyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterCounterpartyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRegisterCounterpartyResponse {
    return {};
  },

  toJSON(_: MsgRegisterCounterpartyResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgRegisterCounterpartyResponse>): MsgRegisterCounterpartyResponse {
    return MsgRegisterCounterpartyResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgRegisterCounterpartyResponse>): MsgRegisterCounterpartyResponse {
    const message = createBaseMsgRegisterCounterpartyResponse();
    return message;
  },
};

function createBaseMsgUpdateClientConfig(): MsgUpdateClientConfig {
  return { clientId: "", config: undefined, signer: "" };
}

export const MsgUpdateClientConfig: MessageFns<MsgUpdateClientConfig, "ibc.core.client.v2.MsgUpdateClientConfig"> = {
  $type: "ibc.core.client.v2.MsgUpdateClientConfig" as const,

  encode(message: MsgUpdateClientConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    if (message.config !== undefined) {
      Config.encode(message.config, writer.uint32(18).fork()).join();
    }
    if (message.signer !== "") {
      writer.uint32(26).string(message.signer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateClientConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateClientConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config = Config.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.signer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateClientConfig {
    return {
      clientId: isSet(object.client_id) ? globalThis.String(object.client_id) : "",
      config: isSet(object.config) ? Config.fromJSON(object.config) : undefined,
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
    };
  },

  toJSON(message: MsgUpdateClientConfig): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.client_id = message.clientId;
    }
    if (message.config !== undefined) {
      obj.config = Config.toJSON(message.config);
    }
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateClientConfig>): MsgUpdateClientConfig {
    return MsgUpdateClientConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgUpdateClientConfig>): MsgUpdateClientConfig {
    const message = createBaseMsgUpdateClientConfig();
    message.clientId = object.clientId ?? "";
    message.config = (object.config !== undefined && object.config !== null)
      ? Config.fromPartial(object.config)
      : undefined;
    message.signer = object.signer ?? "";
    return message;
  },
};

function createBaseMsgUpdateClientConfigResponse(): MsgUpdateClientConfigResponse {
  return {};
}

export const MsgUpdateClientConfigResponse: MessageFns<
  MsgUpdateClientConfigResponse,
  "ibc.core.client.v2.MsgUpdateClientConfigResponse"
> = {
  $type: "ibc.core.client.v2.MsgUpdateClientConfigResponse" as const,

  encode(_: MsgUpdateClientConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateClientConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateClientConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateClientConfigResponse {
    return {};
  },

  toJSON(_: MsgUpdateClientConfigResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<MsgUpdateClientConfigResponse>): MsgUpdateClientConfigResponse {
    return MsgUpdateClientConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<MsgUpdateClientConfigResponse>): MsgUpdateClientConfigResponse {
    const message = createBaseMsgUpdateClientConfigResponse();
    return message;
  },
};

function _unused_bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function _unused_base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type _unused_DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function _unused_isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface _unused_MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
