import { isSet } from "../../../../../../encoding/typeEncodingHelpers.ts"
import type { DeepPartial, MessageFns } from "../../../../../../encoding/typeEncodingHelpers.ts"
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: ibc/core/client/v2/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Config } from "./config.ts";
import { CounterpartyInfo } from "./counterparty.ts";

/**
 * QueryCounterpartyInfoRequest is the request type for the Query/CounterpartyInfo RPC
 * method
 */
export interface QueryCounterpartyInfoRequest {
  /** client state unique identifier */
  clientId: string;
}

/**
 * QueryCounterpartyInfoResponse is the response type for the
 * Query/CounterpartyInfo RPC method.
 */
export interface QueryCounterpartyInfoResponse {
  counterpartyInfo: CounterpartyInfo | undefined;
}

/** QueryConfigRequest is the request type for the Query/Config RPC method */
export interface QueryConfigRequest {
  /** client state unique identifier */
  clientId: string;
}

/** QueryConfigResponse is the response type for the Query/Config RPC method */
export interface QueryConfigResponse {
  config: Config | undefined;
}

function createBaseQueryCounterpartyInfoRequest(): QueryCounterpartyInfoRequest {
  return { clientId: "" };
}

export const QueryCounterpartyInfoRequest: MessageFns<
  QueryCounterpartyInfoRequest,
  "ibc.core.client.v2.QueryCounterpartyInfoRequest"
> = {
  $type: "ibc.core.client.v2.QueryCounterpartyInfoRequest" as const,

  encode(message: QueryCounterpartyInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryCounterpartyInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryCounterpartyInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryCounterpartyInfoRequest {
    return { clientId: isSet(object.client_id) ? globalThis.String(object.client_id) : "" };
  },

  toJSON(message: QueryCounterpartyInfoRequest): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.client_id = message.clientId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryCounterpartyInfoRequest>): QueryCounterpartyInfoRequest {
    return QueryCounterpartyInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryCounterpartyInfoRequest>): QueryCounterpartyInfoRequest {
    const message = createBaseQueryCounterpartyInfoRequest();
    message.clientId = object.clientId ?? "";
    return message;
  },
};

function createBaseQueryCounterpartyInfoResponse(): QueryCounterpartyInfoResponse {
  return { counterpartyInfo: undefined };
}

export const QueryCounterpartyInfoResponse: MessageFns<
  QueryCounterpartyInfoResponse,
  "ibc.core.client.v2.QueryCounterpartyInfoResponse"
> = {
  $type: "ibc.core.client.v2.QueryCounterpartyInfoResponse" as const,

  encode(message: QueryCounterpartyInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.counterpartyInfo !== undefined) {
      CounterpartyInfo.encode(message.counterpartyInfo, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryCounterpartyInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryCounterpartyInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.counterpartyInfo = CounterpartyInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryCounterpartyInfoResponse {
    return {
      counterpartyInfo: isSet(object.counterparty_info)
        ? CounterpartyInfo.fromJSON(object.counterparty_info)
        : undefined,
    };
  },

  toJSON(message: QueryCounterpartyInfoResponse): unknown {
    const obj: any = {};
    if (message.counterpartyInfo !== undefined) {
      obj.counterparty_info = CounterpartyInfo.toJSON(message.counterpartyInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryCounterpartyInfoResponse>): QueryCounterpartyInfoResponse {
    return QueryCounterpartyInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryCounterpartyInfoResponse>): QueryCounterpartyInfoResponse {
    const message = createBaseQueryCounterpartyInfoResponse();
    message.counterpartyInfo = (object.counterpartyInfo !== undefined && object.counterpartyInfo !== null)
      ? CounterpartyInfo.fromPartial(object.counterpartyInfo)
      : undefined;
    return message;
  },
};

function createBaseQueryConfigRequest(): QueryConfigRequest {
  return { clientId: "" };
}

export const QueryConfigRequest: MessageFns<QueryConfigRequest, "ibc.core.client.v2.QueryConfigRequest"> = {
  $type: "ibc.core.client.v2.QueryConfigRequest" as const,

  encode(message: QueryConfigRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientId !== "") {
      writer.uint32(10).string(message.clientId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConfigRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConfigRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConfigRequest {
    return { clientId: isSet(object.client_id) ? globalThis.String(object.client_id) : "" };
  },

  toJSON(message: QueryConfigRequest): unknown {
    const obj: any = {};
    if (message.clientId !== "") {
      obj.client_id = message.clientId;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryConfigRequest>): QueryConfigRequest {
    return QueryConfigRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryConfigRequest>): QueryConfigRequest {
    const message = createBaseQueryConfigRequest();
    message.clientId = object.clientId ?? "";
    return message;
  },
};

function createBaseQueryConfigResponse(): QueryConfigResponse {
  return { config: undefined };
}

export const QueryConfigResponse: MessageFns<QueryConfigResponse, "ibc.core.client.v2.QueryConfigResponse"> = {
  $type: "ibc.core.client.v2.QueryConfigResponse" as const,

  encode(message: QueryConfigResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      Config.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryConfigResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryConfigResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = Config.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryConfigResponse {
    return { config: isSet(object.config) ? Config.fromJSON(object.config) : undefined };
  },

  toJSON(message: QueryConfigResponse): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = Config.toJSON(message.config);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryConfigResponse>): QueryConfigResponse {
    return QueryConfigResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryConfigResponse>): QueryConfigResponse {
    const message = createBaseQueryConfigResponse();
    message.config = (object.config !== undefined && object.config !== null)
      ? Config.fromPartial(object.config)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type _unused_DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function _unused_isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface _unused_MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
