import { bytesFromBase64, base64FromBytes, isSet } from "../../../../../../encoding/typeEncodingHelpers.ts"
import type { DeepPartial, MessageFns } from "../../../../../../encoding/typeEncodingHelpers.ts"
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: ibc/core/client/v2/counterparty.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

/** CounterpartyInfo defines the key that the counterparty will use to message our client */
export interface CounterpartyInfo {
  /** merkle prefix key is the prefix that ics provable keys are stored under */
  merklePrefix: Uint8Array[];
  /** client identifier is the identifier used to send packet messages to our client */
  clientId: string;
}

function createBaseCounterpartyInfo(): CounterpartyInfo {
  return { merklePrefix: [], clientId: "" };
}

export const CounterpartyInfo: MessageFns<CounterpartyInfo, "ibc.core.client.v2.CounterpartyInfo"> = {
  $type: "ibc.core.client.v2.CounterpartyInfo" as const,

  encode(message: CounterpartyInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.merklePrefix) {
      writer.uint32(10).bytes(v!);
    }
    if (message.clientId !== "") {
      writer.uint32(18).string(message.clientId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CounterpartyInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCounterpartyInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.merklePrefix.push(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.clientId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CounterpartyInfo {
    return {
      merklePrefix: globalThis.Array.isArray(object?.merkle_prefix)
        ? object.merkle_prefix.map((e: any) => bytesFromBase64(e))
        : [],
      clientId: isSet(object.client_id) ? globalThis.String(object.client_id) : "",
    };
  },

  toJSON(message: CounterpartyInfo): unknown {
    const obj: any = {};
    if (message.merklePrefix?.length) {
      obj.merkle_prefix = message.merklePrefix.map((e) => base64FromBytes(e));
    }
    if (message.clientId !== "") {
      obj.client_id = message.clientId;
    }
    return obj;
  },

  create(base?: DeepPartial<CounterpartyInfo>): CounterpartyInfo {
    return CounterpartyInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CounterpartyInfo>): CounterpartyInfo {
    const message = createBaseCounterpartyInfo();
    message.merklePrefix = object.merklePrefix?.map((e) => e) || [];
    message.clientId = object.clientId ?? "";
    return message;
  },
};

function _unused_bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function _unused_base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type _unused_DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function _unused_isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface _unused_MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
