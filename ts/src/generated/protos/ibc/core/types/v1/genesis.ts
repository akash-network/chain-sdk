import { isSet } from "../../../../../../encoding/typeEncodingHelpers.ts"
import type { DeepPartial, MessageFns } from "../../../../../../encoding/typeEncodingHelpers.ts"
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: ibc/core/types/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { GenesisState as GenesisState3 } from "../../channel/v1/genesis.ts";
import { GenesisState as GenesisState5 } from "../../channel/v2/genesis.ts";
import { GenesisState as GenesisState1 } from "../../client/v1/genesis.ts";
import { GenesisState as GenesisState4 } from "../../client/v2/genesis.ts";
import { GenesisState as GenesisState2 } from "../../connection/v1/genesis.ts";

/** GenesisState defines the ibc module's genesis state. */
export interface GenesisState {
  /** ICS002 - Clients genesis state */
  clientGenesis:
    | GenesisState1
    | undefined;
  /** ICS003 - Connections genesis state */
  connectionGenesis:
    | GenesisState2
    | undefined;
  /** ICS004 - Channel genesis state */
  channelGenesis:
    | GenesisState3
    | undefined;
  /** ICS002 - Clients/v2 genesis state */
  clientV2Genesis:
    | GenesisState4
    | undefined;
  /** ICS004 - Channel/v2 genesis state */
  channelV2Genesis: GenesisState5 | undefined;
}

function createBaseGenesisState(): GenesisState {
  return {
    clientGenesis: undefined,
    connectionGenesis: undefined,
    channelGenesis: undefined,
    clientV2Genesis: undefined,
    channelV2Genesis: undefined,
  };
}

export const GenesisState: MessageFns<GenesisState, "ibc.core.types.v1.GenesisState"> = {
  $type: "ibc.core.types.v1.GenesisState" as const,

  encode(message: GenesisState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clientGenesis !== undefined) {
      GenesisState1.encode(message.clientGenesis, writer.uint32(10).fork()).join();
    }
    if (message.connectionGenesis !== undefined) {
      GenesisState2.encode(message.connectionGenesis, writer.uint32(18).fork()).join();
    }
    if (message.channelGenesis !== undefined) {
      GenesisState3.encode(message.channelGenesis, writer.uint32(26).fork()).join();
    }
    if (message.clientV2Genesis !== undefined) {
      GenesisState4.encode(message.clientV2Genesis, writer.uint32(34).fork()).join();
    }
    if (message.channelV2Genesis !== undefined) {
      GenesisState5.encode(message.channelV2Genesis, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clientGenesis = GenesisState1.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.connectionGenesis = GenesisState2.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.channelGenesis = GenesisState3.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.clientV2Genesis = GenesisState4.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.channelV2Genesis = GenesisState5.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      clientGenesis: isSet(object.client_genesis) ? GenesisState1.fromJSON(object.client_genesis) : undefined,
      connectionGenesis: isSet(object.connection_genesis)
        ? GenesisState2.fromJSON(object.connection_genesis)
        : undefined,
      channelGenesis: isSet(object.channel_genesis) ? GenesisState3.fromJSON(object.channel_genesis) : undefined,
      clientV2Genesis: isSet(object.client_v2_genesis) ? GenesisState4.fromJSON(object.client_v2_genesis) : undefined,
      channelV2Genesis: isSet(object.channel_v2_genesis)
        ? GenesisState5.fromJSON(object.channel_v2_genesis)
        : undefined,
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.clientGenesis !== undefined) {
      obj.client_genesis = GenesisState1.toJSON(message.clientGenesis);
    }
    if (message.connectionGenesis !== undefined) {
      obj.connection_genesis = GenesisState2.toJSON(message.connectionGenesis);
    }
    if (message.channelGenesis !== undefined) {
      obj.channel_genesis = GenesisState3.toJSON(message.channelGenesis);
    }
    if (message.clientV2Genesis !== undefined) {
      obj.client_v2_genesis = GenesisState4.toJSON(message.clientV2Genesis);
    }
    if (message.channelV2Genesis !== undefined) {
      obj.channel_v2_genesis = GenesisState5.toJSON(message.channelV2Genesis);
    }
    return obj;
  },

  create(base?: DeepPartial<GenesisState>): GenesisState {
    return GenesisState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenesisState>): GenesisState {
    const message = createBaseGenesisState();
    message.clientGenesis = (object.clientGenesis !== undefined && object.clientGenesis !== null)
      ? GenesisState1.fromPartial(object.clientGenesis)
      : undefined;
    message.connectionGenesis = (object.connectionGenesis !== undefined && object.connectionGenesis !== null)
      ? GenesisState2.fromPartial(object.connectionGenesis)
      : undefined;
    message.channelGenesis = (object.channelGenesis !== undefined && object.channelGenesis !== null)
      ? GenesisState3.fromPartial(object.channelGenesis)
      : undefined;
    message.clientV2Genesis = (object.clientV2Genesis !== undefined && object.clientV2Genesis !== null)
      ? GenesisState4.fromPartial(object.clientV2Genesis)
      : undefined;
    message.channelV2Genesis = (object.channelV2Genesis !== undefined && object.channelV2Genesis !== null)
      ? GenesisState5.fromPartial(object.channelV2Genesis)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type _unused_DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function _unused_isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface _unused_MessageFns<T, V extends string> {
  readonly $type: V;
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
