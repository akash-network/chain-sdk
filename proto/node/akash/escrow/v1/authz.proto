syntax = "proto3";
package akash.escrow.v1;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "pkg.akt.dev/go/node/escrow/v1";

// DepositAuthorization allows the grantee to deposit up to spend_limit coins from
// the granter's account for Akash deployments and bids. This authorization is used
// within the Cosmos SDK authz module to grant scoped permissions for deposit operations.
// The authorization can be restricted to specific scopes (deployment or bid) to limit
// what types of deposits the grantee is authorized to make on behalf of the granter.
message DepositAuthorization {
  option (cosmos_proto.message_added_in)     = "chain-sdk v0.1.0";
  option (cosmos_proto.implements_interface) = "cosmos.authz.v1beta1.Authorization";
  option (amino.name)                        = "akash/DepositAuthorization";

  // Scope defines the types of deposit operations that can be authorized.
  // This enum is used to restrict the authorization to specific deposit contexts,
  // allowing fine-grained permission control within the authz system.
  enum Scope {
    option (gogoproto.goproto_enum_prefix) = false;

    // Prefix should start with 0 in enum. So declaring dummy state.
    invalid = 0 [(gogoproto.enumvalue_customname)     = "DepositScopeInvalid"];
    // DepositScopeDeployment allows deposits for deployment-related operations.
    deployment = 1 [(gogoproto.enumvalue_customname)  = "DepositScopeDeployment"];
    // DepositScopeBid allows deposits for bid-related operations.
    bid = 2 [(gogoproto.enumvalue_customname)         = "DepositScopeBid"];
  }

  // SpendLimit is the maximum amount the grantee is authorized to spend from the granter's account.
  // This limit applies cumulatively across all deposit operations within the authorized scopes.
  // Once this limit is reached, the authorization becomes invalid and no further deposits can be made.
  cosmos.base.v1beta1.Coin spend_limit = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag)  = "spend_limit"
  ];

  // Scopes defines the specific types of deposit operations this authorization permits.
  // This provides fine-grained control over what operations
  // the grantee can perform using the granter's funds.
  repeated Scope scopes = 2 [
    (gogoproto.castrepeated) = "DepositAuthorizationScopes",
    (gogoproto.jsontag)  = "scopes",
    (gogoproto.moretags) = "yaml:\"scopes\""
  ];
}
